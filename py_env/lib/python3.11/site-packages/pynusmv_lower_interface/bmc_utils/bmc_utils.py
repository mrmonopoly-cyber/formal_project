# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bmc_utils
else:
    import _bmc_utils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _bmc_utils.PRIuPTR

PRIdPTR = _bmc_utils.PRIdPTR

LLU = _bmc_utils.LLU

LLO = _bmc_utils.LLO

LLX = _bmc_utils.LLX

false = _bmc_utils.false

true = _bmc_utils.true

OUTCOME_GENERIC_ERROR = _bmc_utils.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _bmc_utils.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _bmc_utils.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _bmc_utils.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _bmc_utils.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _bmc_utils.OUTCOME_SUCCESS


def proposition_at_time(enc, formula, time):
    r"""proposition_at_time(BeEnc_ptr enc, node_ptr formula, int time) -> be_ptr"""
    return _bmc_utils.proposition_at_time(enc, formula, time)

def succ(k, l, time):
    r"""succ(int k, int l, int time) -> int"""
    return _bmc_utils.succ(k, l, time)

def fairness_constraint(fsm, k, l):
    r"""fairness_constraint(BeFsm_ptr fsm, int k, int l) -> be_ptr"""
    return _bmc_utils.fairness_constraint(fsm, k, l)

def loop_condition(enc, k, l):
    r"""loop_condition(BeEnc_ptr enc, int k, int l) -> be_ptr"""
    return _bmc_utils.loop_condition(enc, k, l)

def sem_no_loop_offset(fsm, formula, time, bound, offset):
    r"""sem_no_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int offset) -> be_ptr"""
    return _bmc_utils.sem_no_loop_offset(fsm, formula, time, bound, offset)

def sem_with_loop_offset(fsm, formula, time, bound, loop, offset):
    r"""sem_with_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int loop, int offset) -> be_ptr"""
    return _bmc_utils.sem_with_loop_offset(fsm, formula, time, bound, loop, offset)

def NO_MEMOIZE_sem_no_loop_offset(fsm, formula, time, bound, offset):
    r"""NO_MEMOIZE_sem_no_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int offset) -> be_ptr"""
    return _bmc_utils.NO_MEMOIZE_sem_no_loop_offset(fsm, formula, time, bound, offset)

def NO_MEMOIZE_sem_with_loop_offset(fsm, formula, time, bound, loop, offset):
    r"""NO_MEMOIZE_sem_with_loop_offset(BeFsm_ptr fsm, node_ptr formula, int time, int bound, int loop, int offset) -> be_ptr"""
    return _bmc_utils.NO_MEMOIZE_sem_with_loop_offset(fsm, formula, time, bound, loop, offset)

def MEMOIZER_key(formula, time, k, l, offset):
    r"""MEMOIZER_key(node_ptr formula, int time, int k, int l, int offset) -> node_ptr"""
    return _bmc_utils.MEMOIZER_key(formula, time, k, l, offset)

def MEMOIZER_get(key):
    r"""MEMOIZER_get(node_ptr key) -> be_ptr"""
    return _bmc_utils.MEMOIZER_get(key)

def MEMOIZER_put(key, be):
    r"""MEMOIZER_put(node_ptr key, be_ptr be)"""
    return _bmc_utils.MEMOIZER_put(key, be)

def MEMOIZER_clear():
    r"""MEMOIZER_clear()"""
    return _bmc_utils.MEMOIZER_clear()

