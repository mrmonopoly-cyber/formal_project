# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _wff
else:
    import _wff

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _wff.PRIuPTR

PRIdPTR = _wff.PRIdPTR

LLU = _wff.LLU

LLO = _wff.LLO

LLX = _wff.LLX

false = _wff.false

true = _wff.true

OUTCOME_GENERIC_ERROR = _wff.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _wff.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _wff.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _wff.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _wff.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _wff.OUTCOME_SUCCESS


def wff_pkg_init():
    r"""wff_pkg_init()"""
    return _wff.wff_pkg_init()

def wff_pkg_quit():
    r"""wff_pkg_quit()"""
    return _wff.wff_pkg_quit()

def Wff_get_depth(ltl_wff):
    r"""Wff_get_depth(node_ptr ltl_wff) -> int"""
    return _wff.Wff_get_depth(ltl_wff)

def Wff_make_truth():
    r"""Wff_make_truth() -> node_ptr"""
    return _wff.Wff_make_truth()

def Wff_make_falsity():
    r"""Wff_make_falsity() -> node_ptr"""
    return _wff.Wff_make_falsity()

def Wff_make_not(arg):
    r"""Wff_make_not(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_not(arg)

def Wff_make_and(arg1, arg2):
    r"""Wff_make_and(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_and(arg1, arg2)

def Wff_make_or(arg1, arg2):
    r"""Wff_make_or(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_or(arg1, arg2)

def Wff_make_implies(arg1, arg2):
    r"""Wff_make_implies(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_implies(arg1, arg2)

def Wff_make_iff(arg1, arg2):
    r"""Wff_make_iff(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_iff(arg1, arg2)

def Wff_make_next(arg):
    r"""Wff_make_next(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_next(arg)

def Wff_make_opnext_times(arg, x):
    r"""Wff_make_opnext_times(node_ptr arg, int x) -> node_ptr"""
    return _wff.Wff_make_opnext_times(arg, x)

def Wff_make_opnext(arg):
    r"""Wff_make_opnext(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_opnext(arg)

def Wff_make_opprec(arg):
    r"""Wff_make_opprec(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_opprec(arg)

def Wff_make_opnotprecnot(arg):
    r"""Wff_make_opnotprecnot(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_opnotprecnot(arg)

def Wff_make_globally(arg):
    r"""Wff_make_globally(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_globally(arg)

def Wff_make_historically(arg):
    r"""Wff_make_historically(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_historically(arg)

def Wff_make_eventually(arg):
    r"""Wff_make_eventually(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_eventually(arg)

def Wff_make_once(arg):
    r"""Wff_make_once(node_ptr arg) -> node_ptr"""
    return _wff.Wff_make_once(arg)

def Wff_make_until(arg1, arg2):
    r"""Wff_make_until(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_until(arg1, arg2)

def Wff_make_since(arg1, arg2):
    r"""Wff_make_since(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_since(arg1, arg2)

def Wff_make_releases(arg1, arg2):
    r"""Wff_make_releases(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_releases(arg1, arg2)

def Wff_make_triggered(arg1, arg2):
    r"""Wff_make_triggered(node_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _wff.Wff_make_triggered(arg1, arg2)

