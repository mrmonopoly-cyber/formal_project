# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _set
else:
    import _set

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _set.PRIuPTR

PRIdPTR = _set.PRIdPTR

LLU = _set.LLU

LLO = _set.LLO

LLX = _set.LLX

false = _set.false

true = _set.true

OUTCOME_GENERIC_ERROR = _set.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _set.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _set.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _set.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _set.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _set.OUTCOME_SUCCESS


def set_pkg_init():
    r"""set_pkg_init()"""
    return _set.set_pkg_init()

def set_pkg_quit():
    r"""set_pkg_quit()"""
    return _set.set_pkg_quit()

def Set_MakeEmpty():
    r"""Set_MakeEmpty() -> Set_t"""
    return _set.Set_MakeEmpty()

def Set_Make(list):
    r"""Set_Make(node_ptr list) -> Set_t"""
    return _set.Set_Make(list)

def Set_MakeFromUnion(_union):
    r"""Set_MakeFromUnion(node_ptr _union) -> Set_t"""
    return _set.Set_MakeFromUnion(_union)

def Set_MakeSingleton(elem):
    r"""Set_MakeSingleton(Set_Element_t elem) -> Set_t"""
    return _set.Set_MakeSingleton(elem)

def Set_Copy(set):
    r"""Set_Copy(Set_t const set) -> Set_t"""
    return _set.Set_Copy(set)

def Set_Freeze(set):
    r"""Set_Freeze(Set_t set) -> Set_t"""
    return _set.Set_Freeze(set)

def Set_ReleaseSet(set):
    r"""Set_ReleaseSet(Set_t set)"""
    return _set.Set_ReleaseSet(set)

def Set_ReleaseSetOfSet(set):
    r"""Set_ReleaseSetOfSet(Set_t set)"""
    return _set.Set_ReleaseSetOfSet(set)

def Set_IsEmpty(set):
    r"""Set_IsEmpty(Set_t const set) -> boolean"""
    return _set.Set_IsEmpty(set)

def Set_IsMember(set, elem):
    r"""Set_IsMember(Set_t const set, Set_Element_t elem) -> boolean"""
    return _set.Set_IsMember(set, elem)

def Set_GiveCardinality(set):
    r"""Set_GiveCardinality(Set_t const set) -> int"""
    return _set.Set_GiveCardinality(set)

def Set_AddMember(set, el):
    r"""Set_AddMember(Set_t set, Set_Element_t el) -> Set_t"""
    return _set.Set_AddMember(set, el)

def Set_RemoveMember(set, el):
    r"""Set_RemoveMember(Set_t set, Set_Element_t el) -> Set_t"""
    return _set.Set_RemoveMember(set, el)

def Set_AddMembersFromList(set, list):
    r"""Set_AddMembersFromList(Set_t set, NodeList_ptr const list) -> Set_t"""
    return _set.Set_AddMembersFromList(set, list)

def Set_Contains(set1, set2):
    r"""Set_Contains(Set_t const set1, Set_t const set2) -> boolean"""
    return _set.Set_Contains(set1, set2)

def Set_Equals(set1, set2):
    r"""Set_Equals(Set_t const set1, Set_t const set2) -> boolean"""
    return _set.Set_Equals(set1, set2)

def Set_Intersects(set1, set2):
    r"""Set_Intersects(Set_t const set1, Set_t const set2) -> boolean"""
    return _set.Set_Intersects(set1, set2)

def Set_Union(set1, set2):
    r"""Set_Union(Set_t set1, Set_t const set2) -> Set_t"""
    return _set.Set_Union(set1, set2)

def Set_Intersection(set1, set2):
    r"""Set_Intersection(Set_t set1, Set_t const set2) -> Set_t"""
    return _set.Set_Intersection(set1, set2)

def Set_Difference(set1, set2):
    r"""Set_Difference(Set_t set1, Set_t const set2) -> Set_t"""
    return _set.Set_Difference(set1, set2)

def Set_GetRest(set, _from):
    r"""Set_GetRest(Set_t const set, Set_Iterator_t _from) -> Set_t"""
    return _set.Set_GetRest(set, _from)

def Set_GetFirstIter(set1):
    r"""Set_GetFirstIter(Set_t set1) -> Set_Iterator_t"""
    return _set.Set_GetFirstIter(set1)

def Set_GetNextIter(iter):
    r"""Set_GetNextIter(Set_Iterator_t iter) -> Set_Iterator_t"""
    return _set.Set_GetNextIter(iter)

def Set_IsEndIter(iter):
    r"""Set_IsEndIter(Set_Iterator_t iter) -> boolean"""
    return _set.Set_IsEndIter(iter)

def Set_GetMember(set, iter):
    r"""Set_GetMember(Set_t const set, Set_Iterator_t iter) -> Set_Element_t"""
    return _set.Set_GetMember(set, iter)

def Set_Set2List(set):
    r"""Set_Set2List(Set_t const set) -> NodeList_ptr"""
    return _set.Set_Set2List(set)

def Set_PrintSet(arg1, set, printer, printer_arg):
    r"""Set_PrintSet(FILE * arg1, Set_t const set, void (*)(FILE *,Set_Element_t,void *) printer, void * printer_arg)"""
    return _set.Set_PrintSet(arg1, set, printer, printer_arg)

