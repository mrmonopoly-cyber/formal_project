# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bdd
else:
    import _bdd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def bddenc2baseenc(bdd_enc):
    r"""bddenc2baseenc(BddEnc_ptr bdd_enc) -> BaseEnc_ptr"""
    return _bdd.bddenc2baseenc(bdd_enc)

def pick_one_state(_self, states):
    r"""pick_one_state(BddEnc_ptr const _self, bdd_ptr states) -> bdd_ptr"""
    return _bdd.pick_one_state(_self, states)

def pick_one_state_rand(_self, states):
    r"""pick_one_state_rand(BddEnc_ptr const _self, bdd_ptr states) -> bdd_ptr"""
    return _bdd.pick_one_state_rand(_self, states)

def pick_one_input(_self, inputs):
    r"""pick_one_input(BddEnc_ptr const _self, bdd_ptr inputs) -> bdd_ptr"""
    return _bdd.pick_one_input(_self, inputs)

def pick_one_input_rand(_self, inputs):
    r"""pick_one_input_rand(BddEnc_ptr const _self, bdd_ptr inputs) -> bdd_ptr"""
    return _bdd.pick_one_input_rand(_self, inputs)

def bdd_dup(dd_node):
    r"""bdd_dup(bdd_ptr dd_node) -> bdd_ptr"""
    return _bdd.bdd_dup(dd_node)

def new_bddArray(nelements):
    r"""new_bddArray(size_t nelements) -> bdd_ptr *"""
    return _bdd.new_bddArray(nelements)

def delete_bddArray(ary):
    r"""delete_bddArray(bdd_ptr * ary)"""
    return _bdd.delete_bddArray(ary)

def bddArray_getitem(ary, index):
    r"""bddArray_getitem(bdd_ptr * ary, size_t index) -> bdd_ptr"""
    return _bdd.bddArray_getitem(ary, index)

def bddArray_setitem(ary, index, value):
    r"""bddArray_setitem(bdd_ptr * ary, size_t index, bdd_ptr value)"""
    return _bdd.bddArray_setitem(ary, index, value)


def pick_all_terms_states(bddenc, bdd):
# count states
    count = int(BddEnc_count_states_of_bdd(bddenc, bdd))

    if count <= 0:
        return (0, tuple())

# init array
    array = new_bddArray(count)
    for i in range(count):
        bddArray_setitem(array, i, None)

# call function
    err = _pick_all_terms_states(bddenc, bdd, array, count)

    if err:
        delete_bddArray(array)
        return (err, tuple())

    else:
# create tuple from array
        l = list()
        for i in range(count):
            if bddArray_getitem(array, i) is not None:
                l.append(bddArray_getitem(array, i))
        t = tuple(l)

# delete array
        delete_bddArray(array)

        return (err, t)


def pick_all_terms_inputs(bddenc, bdd):
# count states
    count = int(BddEnc_count_inputs_of_bdd(bddenc, bdd))

    if count <= 0:
        return (0, tuple())

# init array
    array = new_bddArray(count)
    for i in range(count):
        bddArray_setitem(array, i, None)

# call function
    err = _pick_all_terms_inputs(bddenc, bdd, array, count)

    if err:
        delete_bddArray(array)
        return (err, tuple())

    else:
# create tuple from array
        l = list()
        for i in range(count):
            if bddArray_getitem(array, i) is not None:
                l.append(bddArray_getitem(array, i))
        t = tuple(l)

# delete array
        delete_bddArray(array)

        return (err, t)

def pick_all_terms_states_inputs(bddenc, bdd):
# count states
    count = int(BddEnc_count_states_inputs_of_bdd(bddenc, bdd))

    if count <= 0:
        return (0, tuple())

# init array
    array = new_bddArray(count)
    for i in range(count):
        bddArray_setitem(array, i, None)

# call function
    err = _pick_all_terms_states_inputs(bddenc, bdd, array, count)

    if err:
        delete_bddArray(array)
        return (err, tuple())

    else:
# create tuple from array
        l = list()
        for i in range(count):
            if bddArray_getitem(array, i) is not None:
                l.append(bddArray_getitem(array, i))
        t = tuple(l)

# delete array
        delete_bddArray(array)

        return (err, t)


def _pick_all_terms_states(_self, bdd, result_array, array_len):
    r"""_pick_all_terms_states(BddEnc_ptr const _self, bdd_ptr bdd, bdd_ptr * result_array, int const array_len) -> boolean"""
    return _bdd._pick_all_terms_states(_self, bdd, result_array, array_len)

def _pick_all_terms_inputs(_self, bdd, result_array, array_len):
    r"""_pick_all_terms_inputs(BddEnc_ptr const _self, bdd_ptr bdd, bdd_ptr * result_array, int const array_len) -> boolean"""
    return _bdd._pick_all_terms_inputs(_self, bdd, result_array, array_len)

def _pick_all_terms_states_inputs(_self, bdd, result_array, array_len):
    r"""_pick_all_terms_states_inputs(BddEnc_ptr const _self, bdd_ptr bdd, bdd_ptr * result_array, int const array_len) -> boolean"""
    return _bdd._pick_all_terms_states_inputs(_self, bdd, result_array, array_len)

def pick_one_state_input(_self, si):
    r"""pick_one_state_input(BddEnc_ptr const _self, bdd_ptr si) -> bdd_ptr"""
    return _bdd.pick_one_state_input(_self, si)

def pick_one_state_input_rand(_self, si):
    r"""pick_one_state_input_rand(BddEnc_ptr const _self, bdd_ptr si) -> bdd_ptr"""
    return _bdd.pick_one_state_input_rand(_self, si)

def BddEnc_force_order_from_filename(_self, filename):
    r"""BddEnc_force_order_from_filename(BddEnc_ptr const _self, char const * filename) -> int"""
    return _bdd.BddEnc_force_order_from_filename(_self, filename)
PRIuPTR = _bdd.PRIuPTR

PRIdPTR = _bdd.PRIdPTR

LLU = _bdd.LLU

LLO = _bdd.LLO

LLX = _bdd.LLX

false = _bdd.false

true = _bdd.true

OUTCOME_GENERIC_ERROR = _bdd.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _bdd.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _bdd.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _bdd.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _bdd.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _bdd.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _bdd.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _bdd.Object_copy(_self)
DUMP_DEFAULT = _bdd.DUMP_DEFAULT

DUMP_BITS = _bdd.DUMP_BITS

DUMP_SCALARS_ONLY = _bdd.DUMP_SCALARS_ONLY


def BddEnc_create(symb_table, bool_enc, dd_vars_hndr, ord_groups):
    r"""BddEnc_create(SymbTable_ptr symb_table, BoolEnc_ptr bool_enc, VarsHandler_ptr dd_vars_hndr, OrdGroups_ptr ord_groups) -> BddEnc_ptr"""
    return _bdd.BddEnc_create(symb_table, bool_enc, dd_vars_hndr, ord_groups)

def BddEnc_destroy(_self):
    r"""BddEnc_destroy(BddEnc_ptr _self)"""
    return _bdd.BddEnc_destroy(_self)

def BddEnc_get_dd_vars_handler(_self):
    r"""BddEnc_get_dd_vars_handler(BddEnc_ptr const _self) -> VarsHandler_ptr"""
    return _bdd.BddEnc_get_dd_vars_handler(_self)

def BddEnc_get_dd_manager(_self):
    r"""BddEnc_get_dd_manager(BddEnc_ptr const _self) -> DdManager *"""
    return _bdd.BddEnc_get_dd_manager(_self)

def BddEnc_get_ord_groups(_self):
    r"""BddEnc_get_ord_groups(BddEnc_ptr const _self) -> OrdGroups_ptr"""
    return _bdd.BddEnc_get_ord_groups(_self)

def BddEnc_expr_to_add(_self, expr, context):
    r"""BddEnc_expr_to_add(BddEnc_ptr _self, Expr_ptr const expr, node_ptr const context) -> add_ptr"""
    return _bdd.BddEnc_expr_to_add(_self, expr, context)

def BddEnc_expr_to_addarray(_self, expr, context):
    r"""BddEnc_expr_to_addarray(BddEnc_ptr _self, Expr_ptr const expr, node_ptr const context) -> AddArray_ptr"""
    return _bdd.BddEnc_expr_to_addarray(_self, expr, context)

def BddEnc_expr_to_bdd(_self, expr, context):
    r"""BddEnc_expr_to_bdd(BddEnc_ptr _self, Expr_ptr const expr, node_ptr const context) -> bdd_ptr"""
    return _bdd.BddEnc_expr_to_bdd(_self, expr, context)

def BddEnc_add_to_expr(_self, add, det_layer):
    r"""BddEnc_add_to_expr(BddEnc_ptr _self, add_ptr const add, SymbLayer_ptr det_layer) -> node_ptr"""
    return _bdd.BddEnc_add_to_expr(_self, add, det_layer)

def BddEnc_add_to_scalar_expr(_self, add, det_layer):
    r"""BddEnc_add_to_scalar_expr(BddEnc_ptr _self, add_ptr const add, SymbLayer_ptr det_layer) -> node_ptr"""
    return _bdd.BddEnc_add_to_scalar_expr(_self, add, det_layer)

def BddEnc_bdd_to_expr(_self, bdd):
    r"""BddEnc_bdd_to_expr(BddEnc_ptr _self, bdd_ptr const bdd) -> node_ptr"""
    return _bdd.BddEnc_bdd_to_expr(_self, bdd)

def BddEnc_get_state_vars_cube(_self):
    r"""BddEnc_get_state_vars_cube(BddEnc_ptr const _self) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_state_vars_cube(_self)

def BddEnc_get_next_state_vars_cube(_self):
    r"""BddEnc_get_next_state_vars_cube(BddEnc_ptr const _self) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_next_state_vars_cube(_self)

def BddEnc_get_frozen_vars_cube(_self):
    r"""BddEnc_get_frozen_vars_cube(BddEnc_ptr const _self) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_frozen_vars_cube(_self)

def BddEnc_get_state_frozen_vars_cube(_self):
    r"""BddEnc_get_state_frozen_vars_cube(BddEnc_ptr const _self) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_state_frozen_vars_cube(_self)

def BddEnc_get_input_vars_cube(_self):
    r"""BddEnc_get_input_vars_cube(BddEnc_ptr const _self) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_input_vars_cube(_self)

def BddEnc_get_layer_vars_cube(_self, layer, vt):
    r"""BddEnc_get_layer_vars_cube(BddEnc_ptr const _self, SymbLayer_ptr layer, SymbFilterType vt) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_layer_vars_cube(_self, layer, vt)

def BddEnc_is_var_in_cube(_self, name, cube):
    r"""BddEnc_is_var_in_cube(BddEnc_ptr const _self, node_ptr name, add_ptr cube) -> boolean"""
    return _bdd.BddEnc_is_var_in_cube(_self, name, cube)

def BddEnc_state_var_to_next_state_var_add(_self, add):
    r"""BddEnc_state_var_to_next_state_var_add(BddEnc_ptr const _self, add_ptr add) -> add_ptr"""
    return _bdd.BddEnc_state_var_to_next_state_var_add(_self, add)

def BddEnc_next_state_var_to_state_var_add(_self, add):
    r"""BddEnc_next_state_var_to_state_var_add(BddEnc_ptr const _self, add_ptr add) -> add_ptr"""
    return _bdd.BddEnc_next_state_var_to_state_var_add(_self, add)

def BddEnc_state_var_to_next_state_var(_self, bdd):
    r"""BddEnc_state_var_to_next_state_var(BddEnc_ptr const _self, bdd_ptr bdd) -> bdd_ptr"""
    return _bdd.BddEnc_state_var_to_next_state_var(_self, bdd)

def BddEnc_next_state_var_to_state_var(_self, bdd):
    r"""BddEnc_next_state_var_to_state_var(BddEnc_ptr const _self, bdd_ptr bdd) -> bdd_ptr"""
    return _bdd.BddEnc_next_state_var_to_state_var(_self, bdd)

def BddEnc_print_bdd_begin(_self, symbols, changes_only):
    r"""BddEnc_print_bdd_begin(BddEnc_ptr _self, NodeList_ptr symbols, boolean changes_only)"""
    return _bdd.BddEnc_print_bdd_begin(_self, symbols, changes_only)

def BddEnc_print_bdd_end(_self):
    r"""BddEnc_print_bdd_end(BddEnc_ptr _self)"""
    return _bdd.BddEnc_print_bdd_end(_self)

def BddEnc_print_bdd(_self, bdd, p_fun, file):
    r"""BddEnc_print_bdd(BddEnc_ptr _self, bdd_ptr bdd, VPFNNF p_fun, FILE * file) -> int"""
    return _bdd.BddEnc_print_bdd(_self, bdd, p_fun, file)

def BddEnc_print_set_of_states(_self, states, changes_only, print_defines, p_fun, file):
    r"""BddEnc_print_set_of_states(BddEnc_ptr _self, bdd_ptr states, boolean changes_only, boolean print_defines, VPFNNF p_fun, FILE * file)"""
    return _bdd.BddEnc_print_set_of_states(_self, states, changes_only, print_defines, p_fun, file)

def BddEnc_print_set_of_inputs(_self, inputs, changes_only, p_fun, file):
    r"""BddEnc_print_set_of_inputs(BddEnc_ptr _self, bdd_ptr inputs, boolean changes_only, VPFNNF p_fun, FILE * file)"""
    return _bdd.BddEnc_print_set_of_inputs(_self, inputs, changes_only, p_fun, file)

def BddEnc_print_set_of_state_input_pairs(_self, state_input_pairs, changes_only, p_fun, file):
    r"""BddEnc_print_set_of_state_input_pairs(BddEnc_ptr _self, bdd_ptr state_input_pairs, boolean changes_only, VPFNNF p_fun, FILE * file)"""
    return _bdd.BddEnc_print_set_of_state_input_pairs(_self, state_input_pairs, changes_only, p_fun, file)

def BddEnc_print_set_of_trans_models(_self, state_input_pairs, file):
    r"""BddEnc_print_set_of_trans_models(BddEnc_ptr _self, bdd_ptr state_input_pairs, FILE * file)"""
    return _bdd.BddEnc_print_set_of_trans_models(_self, state_input_pairs, file)

def BddEnc_assign_symbols(_self, bdd, symbols, onlyRequiredSymbs, resultBdd):
    r"""BddEnc_assign_symbols(BddEnc_ptr _self, bdd_ptr bdd, NodeList_ptr symbols, boolean onlyRequiredSymbs, bdd_ptr * resultBdd) -> node_ptr"""
    return _bdd.BddEnc_assign_symbols(_self, bdd, symbols, onlyRequiredSymbs, resultBdd)

def BddEnc_print_vars_in_cube(_self, cube, list_of_sym, file):
    r"""BddEnc_print_vars_in_cube(BddEnc_ptr _self, bdd_ptr cube, node_ptr list_of_sym, FILE * file)"""
    return _bdd.BddEnc_print_vars_in_cube(_self, cube, list_of_sym, file)

def BddEnc_get_var_ordering(_self, ord_type):
    r"""BddEnc_get_var_ordering(BddEnc_ptr const _self, VarOrderingType const ord_type) -> NodeList_ptr"""
    return _bdd.BddEnc_get_var_ordering(_self, ord_type)

def BddEnc_write_var_ordering(_self, output_order_file_name, dump_type):
    r"""BddEnc_write_var_ordering(BddEnc_ptr const _self, char const * output_order_file_name, VarOrderingType const dump_type)"""
    return _bdd.BddEnc_write_var_ordering(_self, output_order_file_name, dump_type)

def BddEnc_get_reordering_count(_self):
    r"""BddEnc_get_reordering_count(BddEnc_ptr const _self) -> int"""
    return _bdd.BddEnc_get_reordering_count(_self)

def BddEnc_reset_reordering_count(_self):
    r"""BddEnc_reset_reordering_count(BddEnc_ptr _self)"""
    return _bdd.BddEnc_reset_reordering_count(_self)

def BddEnc_count_states_of_add(_self, add):
    r"""BddEnc_count_states_of_add(BddEnc_ptr const _self, add_ptr add) -> double"""
    return _bdd.BddEnc_count_states_of_add(_self, add)

def BddEnc_count_states_of_bdd(_self, bdd):
    r"""BddEnc_count_states_of_bdd(BddEnc_ptr const _self, bdd_ptr bdd) -> double"""
    return _bdd.BddEnc_count_states_of_bdd(_self, bdd)

def BddEnc_count_inputs_of_bdd(_self, bdd):
    r"""BddEnc_count_inputs_of_bdd(BddEnc_ptr const _self, bdd_ptr bdd) -> double"""
    return _bdd.BddEnc_count_inputs_of_bdd(_self, bdd)

def BddEnc_count_states_inputs_of_bdd(_self, bdd):
    r"""BddEnc_count_states_inputs_of_bdd(BddEnc_ptr const _self, bdd_ptr bdd) -> double"""
    return _bdd.BddEnc_count_states_inputs_of_bdd(_self, bdd)

def BddEnc_get_minterms_of_add(_self, add):
    r"""BddEnc_get_minterms_of_add(BddEnc_ptr const _self, add_ptr add) -> double"""
    return _bdd.BddEnc_get_minterms_of_add(_self, add)

def BddEnc_get_minterms_of_bdd(_self, bdd):
    r"""BddEnc_get_minterms_of_bdd(BddEnc_ptr const _self, bdd_ptr bdd) -> double"""
    return _bdd.BddEnc_get_minterms_of_bdd(_self, bdd)

def BddEnc_pick_one_state(_self, states):
    r"""BddEnc_pick_one_state(BddEnc_ptr const _self, bdd_ptr states) -> bdd_ptr"""
    return _bdd.BddEnc_pick_one_state(_self, states)

def BddEnc_pick_one_input(_self, inputs):
    r"""BddEnc_pick_one_input(BddEnc_ptr const _self, bdd_ptr inputs) -> bdd_ptr"""
    return _bdd.BddEnc_pick_one_input(_self, inputs)

def BddEnc_pick_all_terms_states_inputs(_self, bdd, result_array, array_len):
    r"""BddEnc_pick_all_terms_states_inputs(BddEnc_ptr const _self, bdd_ptr bdd, bdd_ptr * result_array, int const array_len) -> boolean"""
    return _bdd.BddEnc_pick_all_terms_states_inputs(_self, bdd, result_array, array_len)

def BddEnc_pick_all_terms_states(_self, bdd, result_array, array_len):
    r"""BddEnc_pick_all_terms_states(BddEnc_ptr const _self, bdd_ptr bdd, bdd_ptr * result_array, int const array_len) -> boolean"""
    return _bdd.BddEnc_pick_all_terms_states(_self, bdd, result_array, array_len)

def BddEnc_pick_all_terms_inputs(_self, bdd, result_array, array_len):
    r"""BddEnc_pick_all_terms_inputs(BddEnc_ptr const _self, bdd_ptr bdd, bdd_ptr * result_array, int const array_len) -> boolean"""
    return _bdd.BddEnc_pick_all_terms_inputs(_self, bdd, result_array, array_len)

def BddEnc_pick_one_state_rand(_self, states):
    r"""BddEnc_pick_one_state_rand(BddEnc_ptr const _self, bdd_ptr states) -> bdd_ptr"""
    return _bdd.BddEnc_pick_one_state_rand(_self, states)

def BddEnc_pick_one_input_rand(_self, inputs):
    r"""BddEnc_pick_one_input_rand(BddEnc_ptr const _self, bdd_ptr inputs) -> bdd_ptr"""
    return _bdd.BddEnc_pick_one_input_rand(_self, inputs)

def BddEnc_get_var_name_from_index(_self, index):
    r"""BddEnc_get_var_name_from_index(BddEnc_ptr const _self, int index) -> node_ptr"""
    return _bdd.BddEnc_get_var_name_from_index(_self, index)

def BddEnc_has_var_at_index(_self, index):
    r"""BddEnc_has_var_at_index(BddEnc_ptr const _self, int index) -> boolean"""
    return _bdd.BddEnc_has_var_at_index(_self, index)

def BddEnc_get_var_index_from_name(_self, name):
    r"""BddEnc_get_var_index_from_name(BddEnc_ptr const _self, node_ptr name) -> int"""
    return _bdd.BddEnc_get_var_index_from_name(_self, name)

def BddEnc_constant_to_add(_self, constant):
    r"""BddEnc_constant_to_add(BddEnc_ptr const _self, node_ptr constant) -> add_ptr"""
    return _bdd.BddEnc_constant_to_add(_self, constant)

def BddEnc_eval_sign_add(_self, a, flag):
    r"""BddEnc_eval_sign_add(BddEnc_ptr _self, add_ptr a, int flag) -> add_ptr"""
    return _bdd.BddEnc_eval_sign_add(_self, a, flag)

def BddEnc_eval_sign_bdd(_self, a, flag):
    r"""BddEnc_eval_sign_bdd(BddEnc_ptr _self, bdd_ptr a, int flag) -> bdd_ptr"""
    return _bdd.BddEnc_eval_sign_bdd(_self, a, flag)

def BddEnc_eval_num(_self, e, context):
    r"""BddEnc_eval_num(BddEnc_ptr _self, node_ptr e, node_ptr context) -> int"""
    return _bdd.BddEnc_eval_num(_self, e, context)

def BddEnc_eval_constant(_self, expr, context):
    r"""BddEnc_eval_constant(BddEnc_ptr _self, Expr_ptr expr, node_ptr context) -> add_ptr"""
    return _bdd.BddEnc_eval_constant(_self, expr, context)

def BddEnc_get_symbol_add(_self, name):
    r"""BddEnc_get_symbol_add(BddEnc_ptr _self, node_ptr name) -> AddArray_ptr"""
    return _bdd.BddEnc_get_symbol_add(_self, name)

def BddEnc_get_state_frozen_vars_mask_add(_self):
    r"""BddEnc_get_state_frozen_vars_mask_add(BddEnc_ptr _self) -> add_ptr"""
    return _bdd.BddEnc_get_state_frozen_vars_mask_add(_self)

def BddEnc_get_input_vars_mask_add(_self):
    r"""BddEnc_get_input_vars_mask_add(BddEnc_ptr _self) -> add_ptr"""
    return _bdd.BddEnc_get_input_vars_mask_add(_self)

def BddEnc_get_state_frozen_input_vars_mask_add(_self):
    r"""BddEnc_get_state_frozen_input_vars_mask_add(BddEnc_ptr _self) -> add_ptr"""
    return _bdd.BddEnc_get_state_frozen_input_vars_mask_add(_self)

def BddEnc_get_state_frozen_vars_mask_bdd(_self):
    r"""BddEnc_get_state_frozen_vars_mask_bdd(BddEnc_ptr _self) -> bdd_ptr"""
    return _bdd.BddEnc_get_state_frozen_vars_mask_bdd(_self)

def BddEnc_get_input_vars_mask_bdd(_self):
    r"""BddEnc_get_input_vars_mask_bdd(BddEnc_ptr _self) -> bdd_ptr"""
    return _bdd.BddEnc_get_input_vars_mask_bdd(_self)

def BddEnc_get_state_frozen_input_vars_mask_bdd(_self):
    r"""BddEnc_get_state_frozen_input_vars_mask_bdd(BddEnc_ptr _self) -> bdd_ptr"""
    return _bdd.BddEnc_get_state_frozen_input_vars_mask_bdd(_self)

def BddEnc_apply_state_frozen_vars_mask_add(_self, states):
    r"""BddEnc_apply_state_frozen_vars_mask_add(BddEnc_ptr _self, add_ptr states) -> add_ptr"""
    return _bdd.BddEnc_apply_state_frozen_vars_mask_add(_self, states)

def BddEnc_apply_input_vars_mask_add(_self, inputs):
    r"""BddEnc_apply_input_vars_mask_add(BddEnc_ptr _self, add_ptr inputs) -> add_ptr"""
    return _bdd.BddEnc_apply_input_vars_mask_add(_self, inputs)

def BddEnc_apply_state_frozen_input_vars_mask_add(_self, states_inputs):
    r"""BddEnc_apply_state_frozen_input_vars_mask_add(BddEnc_ptr _self, add_ptr states_inputs) -> add_ptr"""
    return _bdd.BddEnc_apply_state_frozen_input_vars_mask_add(_self, states_inputs)

def BddEnc_apply_state_frozen_vars_mask_bdd(_self, states):
    r"""BddEnc_apply_state_frozen_vars_mask_bdd(BddEnc_ptr _self, BddStates states) -> BddStates"""
    return _bdd.BddEnc_apply_state_frozen_vars_mask_bdd(_self, states)

def BddEnc_apply_input_vars_mask_bdd(_self, inputs):
    r"""BddEnc_apply_input_vars_mask_bdd(BddEnc_ptr _self, BddInputs inputs) -> BddInputs"""
    return _bdd.BddEnc_apply_input_vars_mask_bdd(_self, inputs)

def BddEnc_apply_state_frozen_input_vars_mask_bdd(_self, states_inputs):
    r"""BddEnc_apply_state_frozen_input_vars_mask_bdd(BddEnc_ptr _self, BddStatesInputs states_inputs) -> BddStatesInputs"""
    return _bdd.BddEnc_apply_state_frozen_input_vars_mask_bdd(_self, states_inputs)

def BddEnc_get_var_mask(_self, var_name):
    r"""BddEnc_get_var_mask(BddEnc_ptr _self, node_ptr var_name) -> add_ptr"""
    return _bdd.BddEnc_get_var_mask(_self, var_name)

def BddEnc_ComputePrimeImplicants(_self, layer_names, formula):
    r"""BddEnc_ComputePrimeImplicants(BddEnc_ptr _self, array_t const * layer_names, bdd_ptr formula) -> array_t *"""
    return _bdd.BddEnc_ComputePrimeImplicants(_self, layer_names, formula)

def BddEnc_force_order(_self, new_po_grps):
    r"""BddEnc_force_order(BddEnc_ptr _self, OrdGroups_ptr new_po_grps)"""
    return _bdd.BddEnc_force_order(_self, new_po_grps)

def BddEnc_force_order_from_file(_self, orderfile):
    r"""BddEnc_force_order_from_file(BddEnc_ptr _self, FILE * orderfile)"""
    return _bdd.BddEnc_force_order_from_file(_self, orderfile)

def BddEnc_print_bdd_wff(_self, bdd, vars, do_sharing, do_indent, start_at_column, out):
    r"""BddEnc_print_bdd_wff(BddEnc_ptr _self, bdd_ptr bdd, NodeList_ptr vars, boolean do_sharing, boolean do_indent, int start_at_column, FILE * out)"""
    return _bdd.BddEnc_print_bdd_wff(_self, bdd, vars, do_sharing, do_indent, start_at_column, out)

def BddEnc_print_formula_info(_self, formula, print_models, print_formula, out):
    r"""BddEnc_print_formula_info(BddEnc_ptr _self, Expr_ptr formula, boolean print_models, boolean print_formula, FILE * out)"""
    return _bdd.BddEnc_print_formula_info(_self, formula, print_models, print_formula, out)

def BddEnc_bdd_to_wff(_self, bdd, vars):
    r"""BddEnc_bdd_to_wff(BddEnc_ptr _self, bdd_ptr bdd, NodeList_ptr vars) -> node_ptr"""
    return _bdd.BddEnc_bdd_to_wff(_self, bdd, vars)

def BddEnc_clean_evaluation_cache(_self):
    r"""BddEnc_clean_evaluation_cache(BddEnc_ptr _self)"""
    return _bdd.BddEnc_clean_evaluation_cache(_self)

def BddEnc_get_vars_cube(_self, vars, vt):
    r"""BddEnc_get_vars_cube(BddEnc_ptr const _self, Set_t vars, SymbFilterType vt) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_vars_cube(_self, vars, vt)

def BddEnc_get_unfiltered_vars_cube(_self, vars):
    r"""BddEnc_get_unfiltered_vars_cube(BddEnc_ptr const _self, Set_t vars) -> BddVarSet_ptr"""
    return _bdd.BddEnc_get_unfiltered_vars_cube(_self, vars)

def BddEnc_dump_addarray_dot(_self, addarray, labels, outfile):
    r"""BddEnc_dump_addarray_dot(BddEnc_ptr _self, AddArray_ptr addarray, char const ** labels, FILE * outfile) -> int"""
    return _bdd.BddEnc_dump_addarray_dot(_self, addarray, labels, outfile)

def BddEnc_dump_addarray_davinci(_self, addarray, labels, outfile):
    r"""BddEnc_dump_addarray_davinci(BddEnc_ptr _self, AddArray_ptr addarray, char const ** labels, FILE * outfile) -> int"""
    return _bdd.BddEnc_dump_addarray_davinci(_self, addarray, labels, outfile)

def BddEncCache_create(symb_table, dd):
    r"""BddEncCache_create(SymbTable_ptr symb_table, DdManager * dd) -> BddEncCache_ptr"""
    return _bdd.BddEncCache_create(symb_table, dd)

def BddEncCache_destroy(_self):
    r"""BddEncCache_destroy(BddEncCache_ptr _self)"""
    return _bdd.BddEncCache_destroy(_self)

def BddEncCache_new_constant(_self, constant, constant_add):
    r"""BddEncCache_new_constant(BddEncCache_ptr _self, node_ptr constant, add_ptr constant_add)"""
    return _bdd.BddEncCache_new_constant(_self, constant, constant_add)

def BddEncCache_remove_constant(_self, constant):
    r"""BddEncCache_remove_constant(BddEncCache_ptr _self, node_ptr constant)"""
    return _bdd.BddEncCache_remove_constant(_self, constant)

def BddEncCache_is_constant_encoded(_self, constant):
    r"""BddEncCache_is_constant_encoded(BddEncCache_ptr const _self, node_ptr constant) -> boolean"""
    return _bdd.BddEncCache_is_constant_encoded(_self, constant)

def BddEncCache_lookup_constant(_self, constant):
    r"""BddEncCache_lookup_constant(BddEncCache_ptr const _self, node_ptr constant) -> add_ptr"""
    return _bdd.BddEncCache_lookup_constant(_self, constant)

def BddEncCache_new_boolean_var(_self, var_name, var_add):
    r"""BddEncCache_new_boolean_var(BddEncCache_ptr _self, node_ptr var_name, add_ptr var_add)"""
    return _bdd.BddEncCache_new_boolean_var(_self, var_name, var_add)

def BddEncCache_remove_boolean_var(_self, var_name):
    r"""BddEncCache_remove_boolean_var(BddEncCache_ptr _self, node_ptr var_name)"""
    return _bdd.BddEncCache_remove_boolean_var(_self, var_name)

def BddEncCache_is_boolean_var_encoded(_self, var_name):
    r"""BddEncCache_is_boolean_var_encoded(BddEncCache_ptr const _self, node_ptr var_name) -> boolean"""
    return _bdd.BddEncCache_is_boolean_var_encoded(_self, var_name)

def BddEncCache_lookup_boolean_var(_self, var_name):
    r"""BddEncCache_lookup_boolean_var(BddEncCache_ptr const _self, node_ptr var_name) -> add_ptr"""
    return _bdd.BddEncCache_lookup_boolean_var(_self, var_name)

def BddEncCache_set_evaluation(_self, expr, add_array):
    r"""BddEncCache_set_evaluation(BddEncCache_ptr _self, node_ptr expr, AddArray_ptr add_array)"""
    return _bdd.BddEncCache_set_evaluation(_self, expr, add_array)

def BddEncCache_remove_evaluation(_self, expr):
    r"""BddEncCache_remove_evaluation(BddEncCache_ptr _self, node_ptr expr)"""
    return _bdd.BddEncCache_remove_evaluation(_self, expr)

def BddEncCache_get_evaluation(_self, expr):
    r"""BddEncCache_get_evaluation(BddEncCache_ptr _self, node_ptr expr) -> AddArray_ptr"""
    return _bdd.BddEncCache_get_evaluation(_self, expr)

def BddEncCache_clean_evaluation_about(_self, symbs):
    r"""BddEncCache_clean_evaluation_about(BddEncCache_ptr _self, NodeList_ptr symbs)"""
    return _bdd.BddEncCache_clean_evaluation_about(_self, symbs)

def BddEncCache_clean_evaluation(_self):
    r"""BddEncCache_clean_evaluation(BddEncCache_ptr _self)"""
    return _bdd.BddEncCache_clean_evaluation(_self)

cvar = _bdd.cvar

