# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _utils
else:
    import _utils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _utils.PRIuPTR

PRIdPTR = _utils.PRIdPTR

LLU = _utils.LLU

LLO = _utils.LLO

LLX = _utils.LLX

false = _utils.false

true = _utils.true

OUTCOME_GENERIC_ERROR = _utils.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _utils.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _utils.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _utils.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _utils.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _utils.OUTCOME_SUCCESS


def AddArray_create(number):
    r"""AddArray_create(int number) -> AddArray_ptr"""
    return _utils.AddArray_create(number)

def AddArray_destroy(dd, _self):
    r"""AddArray_destroy(DdManager * dd, AddArray_ptr _self)"""
    return _utils.AddArray_destroy(dd, _self)

def AddArray_from_word_number(dd, wn):
    r"""AddArray_from_word_number(DdManager * dd, WordNumber_ptr wn) -> AddArray_ptr"""
    return _utils.AddArray_from_word_number(dd, wn)

def AddArray_from_add(add):
    r"""AddArray_from_add(add_ptr add) -> AddArray_ptr"""
    return _utils.AddArray_from_add(add)

def AddArray_duplicate(_self):
    r"""AddArray_duplicate(AddArray_ptr _self) -> AddArray_ptr"""
    return _utils.AddArray_duplicate(_self)

def AddArray_get_size(_self):
    r"""AddArray_get_size(AddArray_ptr _self) -> int"""
    return _utils.AddArray_get_size(_self)

def AddArray_get_add_size(_self, dd):
    r"""AddArray_get_add_size(AddArray_ptr const _self, DdManager * dd) -> size_t"""
    return _utils.AddArray_get_add_size(_self, dd)

def AddArray_get_add(_self):
    r"""AddArray_get_add(AddArray_ptr _self) -> add_ptr"""
    return _utils.AddArray_get_add(_self)

def AddArray_get_n(_self, number):
    r"""AddArray_get_n(AddArray_ptr _self, int number) -> add_ptr"""
    return _utils.AddArray_get_n(_self, number)

def AddArray_set_n(_self, number, add):
    r"""AddArray_set_n(AddArray_ptr _self, int number, add_ptr add)"""
    return _utils.AddArray_set_n(_self, number, add)

def AddArray_get_array(_self):
    r"""AddArray_get_array(AddArray_ptr _self) -> array_t *"""
    return _utils.AddArray_get_array(_self)

def AddArray_word_apply_unary(dd, arg1, op):
    r"""AddArray_word_apply_unary(DdManager * dd, AddArray_ptr arg1, FP_A_DA op) -> AddArray_ptr"""
    return _utils.AddArray_word_apply_unary(dd, arg1, op)

def AddArray_word_apply_binary(dd, arg1, arg2, op):
    r"""AddArray_word_apply_binary(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2, FP_A_DAA op) -> AddArray_ptr"""
    return _utils.AddArray_word_apply_binary(dd, arg1, arg2, op)

def AddArray_make_disjunction(dd, arg):
    r"""AddArray_make_disjunction(DdManager * dd, AddArray_ptr arg) -> add_ptr"""
    return _utils.AddArray_make_disjunction(dd, arg)

def AddArray_make_conjunction(dd, arg):
    r"""AddArray_make_conjunction(DdManager * dd, AddArray_ptr arg) -> add_ptr"""
    return _utils.AddArray_make_conjunction(dd, arg)

def AddArray_word_plus(dd, arg1, arg2):
    r"""AddArray_word_plus(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_plus(dd, arg1, arg2)

def AddArray_word_minus(dd, arg1, arg2):
    r"""AddArray_word_minus(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_minus(dd, arg1, arg2)

def AddArray_word_unary_minus(dd, arg):
    r"""AddArray_word_unary_minus(DdManager * dd, AddArray_ptr arg) -> AddArray_ptr"""
    return _utils.AddArray_word_unary_minus(dd, arg)

def AddArray_word_times(dd, arg1, arg2):
    r"""AddArray_word_times(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_times(dd, arg1, arg2)

def AddArray_word_unsigned_divide(dd, arg1, arg2):
    r"""AddArray_word_unsigned_divide(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_divide(dd, arg1, arg2)

def AddArray_word_unsigned_mod(dd, arg1, arg2):
    r"""AddArray_word_unsigned_mod(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_mod(dd, arg1, arg2)

def AddArray_word_signed_divide(dd, arg1, arg2):
    r"""AddArray_word_signed_divide(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_divide(dd, arg1, arg2)

def AddArray_word_signed_mod(dd, arg1, arg2):
    r"""AddArray_word_signed_mod(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_mod(dd, arg1, arg2)

def AddArray_word_left_shift(dd, arg, number):
    r"""AddArray_word_left_shift(DdManager * dd, AddArray_ptr arg, AddArray_ptr number) -> AddArray_ptr"""
    return _utils.AddArray_word_left_shift(dd, arg, number)

def AddArray_word_unsigned_right_shift(dd, arg, number):
    r"""AddArray_word_unsigned_right_shift(DdManager * dd, AddArray_ptr arg, AddArray_ptr number) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_right_shift(dd, arg, number)

def AddArray_word_signed_right_shift(dd, arg, number):
    r"""AddArray_word_signed_right_shift(DdManager * dd, AddArray_ptr arg, AddArray_ptr number) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_right_shift(dd, arg, number)

def AddArray_word_left_rotate(dd, arg, number):
    r"""AddArray_word_left_rotate(DdManager * dd, AddArray_ptr arg, AddArray_ptr number) -> AddArray_ptr"""
    return _utils.AddArray_word_left_rotate(dd, arg, number)

def AddArray_word_right_rotate(dd, arg, number):
    r"""AddArray_word_right_rotate(DdManager * dd, AddArray_ptr arg, AddArray_ptr number) -> AddArray_ptr"""
    return _utils.AddArray_word_right_rotate(dd, arg, number)

def AddArray_word_unsigned_less(dd, arg1, arg2):
    r"""AddArray_word_unsigned_less(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_less(dd, arg1, arg2)

def AddArray_word_unsigned_less_equal(dd, arg1, arg2):
    r"""AddArray_word_unsigned_less_equal(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_less_equal(dd, arg1, arg2)

def AddArray_word_unsigned_greater(dd, arg1, arg2):
    r"""AddArray_word_unsigned_greater(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_greater(dd, arg1, arg2)

def AddArray_word_unsigned_greater_equal(dd, arg1, arg2):
    r"""AddArray_word_unsigned_greater_equal(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_greater_equal(dd, arg1, arg2)

def AddArray_word_signed_less(dd, arg1, arg2):
    r"""AddArray_word_signed_less(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_less(dd, arg1, arg2)

def AddArray_word_signed_less_equal(dd, arg1, arg2):
    r"""AddArray_word_signed_less_equal(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_less_equal(dd, arg1, arg2)

def AddArray_word_signed_greater(dd, arg1, arg2):
    r"""AddArray_word_signed_greater(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_greater(dd, arg1, arg2)

def AddArray_word_signed_greater_equal(dd, arg1, arg2):
    r"""AddArray_word_signed_greater_equal(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_greater_equal(dd, arg1, arg2)

def AddArray_word_signed_extend(dd, arg, repeat):
    r"""AddArray_word_signed_extend(DdManager * dd, AddArray_ptr arg, AddArray_ptr repeat) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_extend(dd, arg, repeat)

def AddArray_word_unsigned_extend(dd, arg, repeat):
    r"""AddArray_word_unsigned_extend(DdManager * dd, AddArray_ptr arg, AddArray_ptr repeat) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_extend(dd, arg, repeat)

def AddArray_word_signed_resize(dd, arg, new_size):
    r"""AddArray_word_signed_resize(DdManager * dd, AddArray_ptr arg, AddArray_ptr new_size) -> AddArray_ptr"""
    return _utils.AddArray_word_signed_resize(dd, arg, new_size)

def AddArray_word_unsigned_resize(dd, arg, new_size):
    r"""AddArray_word_unsigned_resize(DdManager * dd, AddArray_ptr arg, AddArray_ptr new_size) -> AddArray_ptr"""
    return _utils.AddArray_word_unsigned_resize(dd, arg, new_size)

def AddArray_word_equal(dd, arg1, arg2):
    r"""AddArray_word_equal(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_equal(dd, arg1, arg2)

def AddArray_word_not_equal(dd, arg1, arg2):
    r"""AddArray_word_not_equal(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_not_equal(dd, arg1, arg2)

def AddArray_word_ite(dd, _if, _then, _else):
    r"""AddArray_word_ite(DdManager * dd, AddArray_ptr _if, AddArray_ptr _then, AddArray_ptr _else) -> AddArray_ptr"""
    return _utils.AddArray_word_ite(dd, _if, _then, _else)

def AddArray_word_bit_selection(dd, word, range):
    r"""AddArray_word_bit_selection(DdManager * dd, AddArray_ptr word, AddArray_ptr range) -> AddArray_ptr"""
    return _utils.AddArray_word_bit_selection(dd, word, range)

def AddArray_word_concatenation(dd, arg1, arg2):
    r"""AddArray_word_concatenation(DdManager * dd, AddArray_ptr arg1, AddArray_ptr arg2) -> AddArray_ptr"""
    return _utils.AddArray_word_concatenation(dd, arg1, arg2)

def OrdGroups_create():
    r"""OrdGroups_create() -> OrdGroups_ptr"""
    return _utils.OrdGroups_create()

def OrdGroups_copy(_self):
    r"""OrdGroups_copy(OrdGroups_ptr const _self) -> OrdGroups_ptr"""
    return _utils.OrdGroups_copy(_self)

def OrdGroups_destroy(_self):
    r"""OrdGroups_destroy(OrdGroups_ptr _self)"""
    return _utils.OrdGroups_destroy(_self)

def OrdGroups_create_group(_self):
    r"""OrdGroups_create_group(OrdGroups_ptr _self) -> int"""
    return _utils.OrdGroups_create_group(_self)

def OrdGroups_add_variable(_self, name, group):
    r"""OrdGroups_add_variable(OrdGroups_ptr _self, node_ptr name, int group)"""
    return _utils.OrdGroups_add_variable(_self, name, group)

def OrdGroups_add_variables(_self, vars, group):
    r"""OrdGroups_add_variables(OrdGroups_ptr _self, NodeList_ptr vars, int group)"""
    return _utils.OrdGroups_add_variables(_self, vars, group)

def OrdGroups_get_vars_in_group(_self, group):
    r"""OrdGroups_get_vars_in_group(OrdGroups_ptr const _self, int group) -> NodeList_ptr"""
    return _utils.OrdGroups_get_vars_in_group(_self, group)

def OrdGroups_get_var_group(_self, name):
    r"""OrdGroups_get_var_group(OrdGroups_ptr const _self, node_ptr name) -> int"""
    return _utils.OrdGroups_get_var_group(_self, name)

def OrdGroups_get_size(_self):
    r"""OrdGroups_get_size(OrdGroups_ptr const _self) -> int"""
    return _utils.OrdGroups_get_size(_self)

