# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _be
else:
    import _be

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _be.PRIuPTR

PRIdPTR = _be.PRIdPTR

LLU = _be.LLU

LLO = _be.LLO

LLX = _be.LLX

false = _be.false

true = _be.true

OUTCOME_GENERIC_ERROR = _be.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _be.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _be.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _be.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _be.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _be.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _be.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _be.Object_copy(_self)
BE_CURRENT_UNTIMED = _be.BE_CURRENT_UNTIMED

BE_VAR_TYPE_CURR = _be.BE_VAR_TYPE_CURR

BE_VAR_TYPE_FROZEN = _be.BE_VAR_TYPE_FROZEN

BE_VAR_TYPE_INPUT = _be.BE_VAR_TYPE_INPUT

BE_VAR_TYPE_NEXT = _be.BE_VAR_TYPE_NEXT

BE_VAR_TYPE_ALL = _be.BE_VAR_TYPE_ALL

BE_VAR_TYPE_ERROR = _be.BE_VAR_TYPE_ERROR


def BeEnc_create(symb_table, bool_enc):
    r"""BeEnc_create(SymbTable_ptr symb_table, BoolEnc_ptr bool_enc) -> BeEnc_ptr"""
    return _be.BeEnc_create(symb_table, bool_enc)

def BeEnc_destroy(_self):
    r"""BeEnc_destroy(BeEnc_ptr _self)"""
    return _be.BeEnc_destroy(_self)

def BeEnc_get_be_manager(_self):
    r"""BeEnc_get_be_manager(BeEnc_ptr const _self) -> Be_Manager_ptr"""
    return _be.BeEnc_get_be_manager(_self)

def BeEnc_get_state_vars_num(_self):
    r"""BeEnc_get_state_vars_num(BeEnc_ptr const _self) -> int"""
    return _be.BeEnc_get_state_vars_num(_self)

def BeEnc_get_frozen_vars_num(_self):
    r"""BeEnc_get_frozen_vars_num(BeEnc_ptr const _self) -> int"""
    return _be.BeEnc_get_frozen_vars_num(_self)

def BeEnc_get_input_vars_num(_self):
    r"""BeEnc_get_input_vars_num(BeEnc_ptr const _self) -> int"""
    return _be.BeEnc_get_input_vars_num(_self)

def BeEnc_get_vars_num(_self):
    r"""BeEnc_get_vars_num(BeEnc_ptr const _self) -> int"""
    return _be.BeEnc_get_vars_num(_self)

def BeEnc_get_max_time(_self):
    r"""BeEnc_get_max_time(BeEnc_ptr const _self) -> int"""
    return _be.BeEnc_get_max_time(_self)

def BeEnc_name_to_untimed(_self, var_name):
    r"""BeEnc_name_to_untimed(BeEnc_ptr const _self, node_ptr const var_name) -> be_ptr"""
    return _be.BeEnc_name_to_untimed(_self, var_name)

def BeEnc_name_to_index(_self, name):
    r"""BeEnc_name_to_index(BeEnc_ptr const _self, node_ptr const name) -> int"""
    return _be.BeEnc_name_to_index(_self, name)

def BeEnc_name_to_timed(_self, name, time):
    r"""BeEnc_name_to_timed(BeEnc_ptr const _self, node_ptr const name, int const time) -> be_ptr"""
    return _be.BeEnc_name_to_timed(_self, name, time)

def BeEnc_index_to_name(_self, index):
    r"""BeEnc_index_to_name(BeEnc_ptr const _self, int const index) -> node_ptr"""
    return _be.BeEnc_index_to_name(_self, index)

def BeEnc_index_to_var(_self, index):
    r"""BeEnc_index_to_var(BeEnc_ptr const _self, int const index) -> be_ptr"""
    return _be.BeEnc_index_to_var(_self, index)

def BeEnc_index_to_timed(_self, index, time):
    r"""BeEnc_index_to_timed(BeEnc_ptr const _self, int const index, int const time) -> be_ptr"""
    return _be.BeEnc_index_to_timed(_self, index, time)

def BeEnc_index_to_time(_self, index):
    r"""BeEnc_index_to_time(BeEnc_ptr const _self, int const index) -> int"""
    return _be.BeEnc_index_to_time(_self, index)

def BeEnc_index_to_untimed_index(_self, index):
    r"""BeEnc_index_to_untimed_index(BeEnc_ptr const _self, int const index) -> int"""
    return _be.BeEnc_index_to_untimed_index(_self, index)

def BeEnc_var_to_name(_self, be_var):
    r"""BeEnc_var_to_name(BeEnc_ptr const _self, be_ptr be_var) -> node_ptr"""
    return _be.BeEnc_var_to_name(_self, be_var)

def BeEnc_var_to_index(_self, var):
    r"""BeEnc_var_to_index(BeEnc_ptr const _self, be_ptr const var) -> int"""
    return _be.BeEnc_var_to_index(_self, var)

def BeEnc_var_to_timed(_self, var, time):
    r"""BeEnc_var_to_timed(BeEnc_ptr const _self, be_ptr const var, int const time) -> be_ptr"""
    return _be.BeEnc_var_to_timed(_self, var, time)

def BeEnc_var_to_untimed(_self, var):
    r"""BeEnc_var_to_untimed(BeEnc_ptr const _self, be_ptr const var) -> be_ptr"""
    return _be.BeEnc_var_to_untimed(_self, var)

def BeEnc_var_curr_to_next(_self, curr):
    r"""BeEnc_var_curr_to_next(BeEnc_ptr const _self, be_ptr const curr) -> be_ptr"""
    return _be.BeEnc_var_curr_to_next(_self, curr)

def BeEnc_var_next_to_curr(_self, next):
    r"""BeEnc_var_next_to_curr(BeEnc_ptr const _self, be_ptr const next) -> be_ptr"""
    return _be.BeEnc_var_next_to_curr(_self, next)

def BeEnc_shift_curr_to_next(_self, exp):
    r"""BeEnc_shift_curr_to_next(BeEnc_ptr _self, be_ptr const exp) -> be_ptr"""
    return _be.BeEnc_shift_curr_to_next(_self, exp)

def BeEnc_untimed_expr_to_timed(_self, exp, time):
    r"""BeEnc_untimed_expr_to_timed(BeEnc_ptr _self, be_ptr const exp, int const time) -> be_ptr"""
    return _be.BeEnc_untimed_expr_to_timed(_self, exp, time)

def BeEnc_untimed_expr_to_times(_self, exp, ctime, ftime, itime, ntime):
    r"""BeEnc_untimed_expr_to_times(BeEnc_ptr _self, be_ptr const exp, int const ctime, int const ftime, int const itime, int const ntime) -> be_ptr"""
    return _be.BeEnc_untimed_expr_to_times(_self, exp, ctime, ftime, itime, ntime)

def BeEnc_untimed_to_timed_and_interval(_self, exp, _from, to):
    r"""BeEnc_untimed_to_timed_and_interval(BeEnc_ptr _self, be_ptr const exp, int const _from, int const to) -> be_ptr"""
    return _be.BeEnc_untimed_to_timed_and_interval(_self, exp, _from, to)

def BeEnc_untimed_to_timed_or_interval(_self, exp, _from, to):
    r"""BeEnc_untimed_to_timed_or_interval(BeEnc_ptr _self, be_ptr const exp, int const _from, int const to) -> be_ptr"""
    return _be.BeEnc_untimed_to_timed_or_interval(_self, exp, _from, to)

def BeEnc_is_index_state_var(_self, index):
    r"""BeEnc_is_index_state_var(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_state_var(_self, index)

def BeEnc_is_index_frozen_var(_self, index):
    r"""BeEnc_is_index_frozen_var(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_frozen_var(_self, index)

def BeEnc_is_index_input_var(_self, index):
    r"""BeEnc_is_index_input_var(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_input_var(_self, index)

def BeEnc_is_index_untimed(_self, index):
    r"""BeEnc_is_index_untimed(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed(_self, index)

def BeEnc_is_index_untimed_curr(_self, index):
    r"""BeEnc_is_index_untimed_curr(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_curr(_self, index)

def BeEnc_is_index_untimed_frozen(_self, index):
    r"""BeEnc_is_index_untimed_frozen(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_frozen(_self, index)

def BeEnc_is_index_untimed_input(_self, index):
    r"""BeEnc_is_index_untimed_input(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_input(_self, index)

def BeEnc_is_index_untimed_curr_frozen_input(_self, index):
    r"""BeEnc_is_index_untimed_curr_frozen_input(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_curr_frozen_input(_self, index)

def BeEnc_is_index_untimed_next(_self, index):
    r"""BeEnc_is_index_untimed_next(BeEnc_ptr const _self, int const index) -> boolean"""
    return _be.BeEnc_is_index_untimed_next(_self, index)

def BeEnc_get_first_untimed_var_index(_self, type):
    r"""BeEnc_get_first_untimed_var_index(BeEnc_ptr const _self, BeVarType type) -> int"""
    return _be.BeEnc_get_first_untimed_var_index(_self, type)

def BeEnc_get_next_var_index(_self, var_index, type):
    r"""BeEnc_get_next_var_index(BeEnc_ptr const _self, int var_index, BeVarType type) -> int"""
    return _be.BeEnc_get_next_var_index(_self, var_index, type)

def BeEnc_get_var_index_with_offset(_self, from_index, offset, type):
    r"""BeEnc_get_var_index_with_offset(BeEnc_ptr const _self, int from_index, int offset, BeVarType type) -> int"""
    return _be.BeEnc_get_var_index_with_offset(_self, from_index, offset, type)

def BeEnc_is_var_index_valid(_self, var_index):
    r"""BeEnc_is_var_index_valid(BeEnc_ptr const _self, int var_index) -> boolean"""
    return _be.BeEnc_is_var_index_valid(_self, var_index)

def BeEnc_ptr_to_BaseEnc_ptr(_enc):
    r"""BeEnc_ptr_to_BaseEnc_ptr(BeEnc_ptr _enc) -> BaseEnc_ptr"""
    return _be.BeEnc_ptr_to_BaseEnc_ptr(_enc)

def BeEnc_ptr_to_BoolEncClient_ptr(_enc):
    r"""BeEnc_ptr_to_BoolEncClient_ptr(BeEnc_ptr _enc) -> BoolEncClient_ptr"""
    return _be.BeEnc_ptr_to_BoolEncClient_ptr(_enc)

def BeEnc_ptr_get_bool_enc(_enc):
    r"""BeEnc_ptr_get_bool_enc(BeEnc_ptr _enc) -> BoolEnc_ptr"""
    return _be.BeEnc_ptr_get_bool_enc(_enc)

def substitute_in_formula(be_enc, formula, subst_lst):
    r"""substitute_in_formula(BeEnc_ptr be_enc, be_ptr formula, PyObject * subst_lst) -> be_ptr"""
    return _be.substitute_in_formula(be_enc, formula, subst_lst)

