# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _clg
else:
    import _clg

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _clg.PRIuPTR

PRIdPTR = _clg.PRIdPTR

LLU = _clg.LLU

LLO = _clg.LLO

LLX = _clg.LLX

false = _clg.false

true = _clg.true

OUTCOME_GENERIC_ERROR = _clg.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _clg.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _clg.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _clg.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _clg.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _clg.OUTCOME_SUCCESS

CLG_DIMACS = _clg.CLG_DIMACS

CLG_ZCHAFF = _clg.CLG_ZCHAFF

CLG_NUSMV = _clg.CLG_NUSMV


def Clg_Lit(literal):
    r"""Clg_Lit(int literal) -> clause_graph"""
    return _clg.Clg_Lit(literal)

def Clg_Conj(left, right):
    r"""Clg_Conj(clause_graph left, clause_graph right) -> clause_graph"""
    return _clg.Clg_Conj(left, right)

def Clg_Disj(left, right):
    r"""Clg_Disj(clause_graph left, clause_graph right) -> clause_graph"""
    return _clg.Clg_Disj(left, right)

def Clg_Extract(head, type, commit, data):
    r"""Clg_Extract(clause_graph head, int type, Clg_Commit commit, void * data)"""
    return _clg.Clg_Extract(head, type, commit, data)

def Clg_Size(graph):
    r"""Clg_Size(clause_graph graph) -> int"""
    return _clg.Clg_Size(graph)

def Clg_Free(graph):
    r"""Clg_Free(clause_graph graph)"""
    return _clg.Clg_Free(graph)

