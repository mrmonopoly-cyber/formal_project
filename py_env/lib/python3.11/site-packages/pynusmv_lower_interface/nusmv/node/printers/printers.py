# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _printers
else:
    import _printers

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _printers.PRIuPTR

PRIdPTR = _printers.PRIdPTR

LLU = _printers.LLU

LLO = _printers.LLO

LLX = _printers.LLX

false = _printers.false

true = _printers.true

OUTCOME_GENERIC_ERROR = _printers.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _printers.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _printers.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _printers.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _printers.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _printers.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _printers.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _printers.Object_copy(_self)
STREAM_TYPE_DEFAULT = _printers.STREAM_TYPE_DEFAULT

STREAM_TYPE_STDOUT = _printers.STREAM_TYPE_STDOUT

STREAM_TYPE_STDERR = _printers.STREAM_TYPE_STDERR

STREAM_TYPE_STRING = _printers.STREAM_TYPE_STRING

STREAM_TYPE_FILE = _printers.STREAM_TYPE_FILE

STREAM_TYPE_FUNCTION = _printers.STREAM_TYPE_FUNCTION

class StreamTypeArg(object):
    r"""Proxy of C StreamTypeArg_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file = property(_printers.StreamTypeArg_file_get, _printers.StreamTypeArg_file_set, doc=r"""file : p.FILE""")
    function = property(_printers.StreamTypeArg_function_get, doc=r"""function : StreamTypeArg_TAG_function""")

    def __init__(self):
        r"""__init__(StreamTypeArg self) -> StreamTypeArg"""
        _printers.StreamTypeArg_swiginit(self, _printers.new_StreamTypeArg())
    __swig_destroy__ = _printers.delete_StreamTypeArg

# Register StreamTypeArg in _printers:
_printers.StreamTypeArg_swigregister(StreamTypeArg)
class StreamTypeArg_TAG_function(object):
    r"""Proxy of C StreamTypeArg_TAG_function struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    func_ptr = property(_printers.StreamTypeArg_TAG_function_func_ptr_get, _printers.StreamTypeArg_TAG_function_func_ptr_set, doc=r"""func_ptr : StreamTypeFunction_ptr""")
    argument = property(_printers.StreamTypeArg_TAG_function_argument_get, _printers.StreamTypeArg_TAG_function_argument_set, doc=r"""argument : p.void""")

    def __init__(self):
        r"""__init__(StreamTypeArg_TAG_function self) -> StreamTypeArg_TAG_function"""
        _printers.StreamTypeArg_TAG_function_swiginit(self, _printers.new_StreamTypeArg_TAG_function())
    __swig_destroy__ = _printers.delete_StreamTypeArg_TAG_function

# Register StreamTypeArg_TAG_function in _printers:
_printers.StreamTypeArg_TAG_function_swigregister(StreamTypeArg_TAG_function)

def MasterPrinter_create():
    r"""MasterPrinter_create() -> MasterPrinter_ptr"""
    return _printers.MasterPrinter_create()

def MasterPrinter_print_node(_self, n):
    r"""MasterPrinter_print_node(MasterPrinter_ptr _self, node_ptr n) -> int"""
    return _printers.MasterPrinter_print_node(_self, n)

def MasterPrinter_print_string(_self, str):
    r"""MasterPrinter_print_string(MasterPrinter_ptr _self, char const * str) -> int"""
    return _printers.MasterPrinter_print_string(_self, str)

def MasterPrinter_get_streamed_string(_self):
    r"""MasterPrinter_get_streamed_string(MasterPrinter_ptr const _self) -> char const *"""
    return _printers.MasterPrinter_get_streamed_string(_self)

def MasterPrinter_reset_stream(_self, offs):
    r"""MasterPrinter_reset_stream(MasterPrinter_ptr _self, int offs)"""
    return _printers.MasterPrinter_reset_stream(_self, offs)

def MasterPrinter_set_stream_type(_self, type, arg):
    r"""MasterPrinter_set_stream_type(MasterPrinter_ptr _self, StreamType type, StreamTypeArg arg)"""
    return _printers.MasterPrinter_set_stream_type(_self, type, arg)

def MasterPrinter_get_stream_type(_self):
    r"""MasterPrinter_get_stream_type(MasterPrinter_ptr const _self) -> StreamType"""
    return _printers.MasterPrinter_get_stream_type(_self)

def MasterPrinter_flush_stream(_self):
    r"""MasterPrinter_flush_stream(MasterPrinter_ptr _self) -> int"""
    return _printers.MasterPrinter_flush_stream(_self)

def MasterPrinter_close_stream(_self):
    r"""MasterPrinter_close_stream(MasterPrinter_ptr _self)"""
    return _printers.MasterPrinter_close_stream(_self)

def PrinterBase_print_node(_self, n, priority):
    r"""PrinterBase_print_node(PrinterBase_ptr _self, node_ptr n, int priority) -> int"""
    return _printers.PrinterBase_print_node(_self, n, priority)

def PrinterIWffCore_create(name):
    r"""PrinterIWffCore_create(char const * name) -> PrinterIWffCore_ptr"""
    return _printers.PrinterIWffCore_create(name)

def PrinterPsl_create(name):
    r"""PrinterPsl_create(char const * name) -> PrinterPsl_ptr"""
    return _printers.PrinterPsl_create(name)

def PrinterSexpCore_create(name):
    r"""PrinterSexpCore_create(char const * name) -> PrinterSexpCore_ptr"""
    return _printers.PrinterSexpCore_create(name)

def PrinterWffCore_create(name):
    r"""PrinterWffCore_create(char const * name) -> PrinterWffCore_ptr"""
    return _printers.PrinterWffCore_create(name)

