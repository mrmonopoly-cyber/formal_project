# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ord
else:
    import _ord

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _ord.PRIuPTR

PRIdPTR = _ord.PRIdPTR

LLU = _ord.LLU

LLO = _ord.LLO

LLX = _ord.LLX

false = _ord.false

true = _ord.true

OUTCOME_GENERIC_ERROR = _ord.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _ord.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _ord.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _ord.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _ord.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _ord.OUTCOME_SUCCESS

YYDEBUG = _ord.YYDEBUG

LB = _ord.LB

RB = _ord.RB

ATOM = _ord.ATOM

NUMBER = _ord.NUMBER

DOT = _ord.DOT

MINUS = _ord.MINUS

class YYSTYPE(object):
    r"""Proxy of C YYSTYPE struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_ord.YYSTYPE_node_get, _ord.YYSTYPE_node_set, doc=r"""node : node_ptr""")

    def __init__(self):
        r"""__init__(YYSTYPE self) -> YYSTYPE"""
        _ord.YYSTYPE_swiginit(self, _ord.new_YYSTYPE())
    __swig_destroy__ = _ord.delete_YYSTYPE

# Register YYSTYPE in _ord:
_ord.YYSTYPE_swigregister(YYSTYPE)
YYSTYPE_IS_TRIVIAL = _ord.YYSTYPE_IS_TRIVIAL

YYSTYPE_IS_DECLARED = _ord.YYSTYPE_IS_DECLARED


def parser_ord_parse():
    r"""parser_ord_parse() -> int"""
    return _ord.parser_ord_parse()

def ParserOrd_create():
    r"""ParserOrd_create() -> ParserOrd_ptr"""
    return _ord.ParserOrd_create()

def ParserOrd_destroy(_self):
    r"""ParserOrd_destroy(ParserOrd_ptr _self)"""
    return _ord.ParserOrd_destroy(_self)

def ParserOrd_parse_from_file(_self, f):
    r"""ParserOrd_parse_from_file(ParserOrd_ptr _self, FILE * f)"""
    return _ord.ParserOrd_parse_from_file(_self, f)

def ParserOrd_parse_from_string(_self, str):
    r"""ParserOrd_parse_from_string(ParserOrd_ptr _self, char const * str)"""
    return _ord.ParserOrd_parse_from_string(_self, str)

def ParserOrd_get_vars_list(_self):
    r"""ParserOrd_get_vars_list(ParserOrd_ptr const _self) -> NodeList_ptr"""
    return _ord.ParserOrd_get_vars_list(_self)

def ParserOrd_reset(_self):
    r"""ParserOrd_reset(ParserOrd_ptr _self)"""
    return _ord.ParserOrd_reset(_self)

cvar = _ord.cvar

