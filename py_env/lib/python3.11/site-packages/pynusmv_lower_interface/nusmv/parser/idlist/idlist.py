# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _idlist
else:
    import _idlist

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _idlist.PRIuPTR

PRIdPTR = _idlist.PRIdPTR

LLU = _idlist.LLU

LLO = _idlist.LLO

LLX = _idlist.LLX

false = _idlist.false

true = _idlist.true

OUTCOME_GENERIC_ERROR = _idlist.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _idlist.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _idlist.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _idlist.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _idlist.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _idlist.OUTCOME_SUCCESS

YYDEBUG = _idlist.YYDEBUG

LB = _idlist.LB

RB = _idlist.RB

ATOM = _idlist.ATOM

NUMBER = _idlist.NUMBER

DOT = _idlist.DOT

class YYSTYPE(object):
    r"""Proxy of C YYSTYPE struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_idlist.YYSTYPE_node_get, _idlist.YYSTYPE_node_set, doc=r"""node : node_ptr""")

    def __init__(self):
        r"""__init__(YYSTYPE self) -> YYSTYPE"""
        _idlist.YYSTYPE_swiginit(self, _idlist.new_YYSTYPE())
    __swig_destroy__ = _idlist.delete_YYSTYPE

# Register YYSTYPE in _idlist:
_idlist.YYSTYPE_swigregister(YYSTYPE)
YYSTYPE_IS_TRIVIAL = _idlist.YYSTYPE_IS_TRIVIAL

YYSTYPE_IS_DECLARED = _idlist.YYSTYPE_IS_DECLARED


def parser_idlist_parse():
    r"""parser_idlist_parse() -> int"""
    return _idlist.parser_idlist_parse()

def ParserIdList_create():
    r"""ParserIdList_create() -> ParserIdList_ptr"""
    return _idlist.ParserIdList_create()

def ParserIdList_destroy(_self):
    r"""ParserIdList_destroy(ParserIdList_ptr _self)"""
    return _idlist.ParserIdList_destroy(_self)

def ParserIdList_parse_from_file(_self, f):
    r"""ParserIdList_parse_from_file(ParserIdList_ptr _self, FILE * f)"""
    return _idlist.ParserIdList_parse_from_file(_self, f)

def ParserIdList_parse_from_string(_self, str):
    r"""ParserIdList_parse_from_string(ParserIdList_ptr _self, char const * str)"""
    return _idlist.ParserIdList_parse_from_string(_self, str)

def ParserIdList_get_id_list(_self):
    r"""ParserIdList_get_id_list(ParserIdList_ptr const _self) -> NodeList_ptr"""
    return _idlist.ParserIdList_get_id_list(_self)

def ParserIdList_reset(_self):
    r"""ParserIdList_reset(ParserIdList_ptr _self)"""
    return _idlist.ParserIdList_reset(_self)

cvar = _idlist.cvar

