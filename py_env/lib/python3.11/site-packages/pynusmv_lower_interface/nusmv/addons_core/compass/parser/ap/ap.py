# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ap
else:
    import _ap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _ap.PRIuPTR

PRIdPTR = _ap.PRIdPTR

LLU = _ap.LLU

LLO = _ap.LLO

LLX = _ap.LLX

false = _ap.false

true = _ap.true

OUTCOME_GENERIC_ERROR = _ap.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _ap.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _ap.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _ap.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _ap.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _ap.OUTCOME_SUCCESS

YYDEBUG = _ap.YYDEBUG

TOK_ATOM = _ap.TOK_ATOM

TOK_FALSEEXP = _ap.TOK_FALSEEXP

TOK_TRUEEXP = _ap.TOK_TRUEEXP

TOK_NUMBER = _ap.TOK_NUMBER

TOK_NUMBER_FRAC = _ap.TOK_NUMBER_FRAC

TOK_NUMBER_REAL = _ap.TOK_NUMBER_REAL

TOK_NUMBER_EXP = _ap.TOK_NUMBER_EXP

TOK_NUMBER_WORD = _ap.TOK_NUMBER_WORD

TOK_CONS = _ap.TOK_CONS

TOK_SEMI = _ap.TOK_SEMI

TOK_LP = _ap.TOK_LP

TOK_RP = _ap.TOK_RP

TOK_RB = _ap.TOK_RB

TOK_LCB = _ap.TOK_LCB

TOK_RCB = _ap.TOK_RCB

TOK_TWODOTS = _ap.TOK_TWODOTS

TOK_SELF = _ap.TOK_SELF

TOK_CASE = _ap.TOK_CASE

TOK_ESAC = _ap.TOK_ESAC

TOK_COLON = _ap.TOK_COLON

TOK_COMMA = _ap.TOK_COMMA

TOK_IMPLIES = _ap.TOK_IMPLIES

TOK_IFF = _ap.TOK_IFF

TOK_OR = _ap.TOK_OR

TOK_XOR = _ap.TOK_XOR

TOK_XNOR = _ap.TOK_XNOR

TOK_AND = _ap.TOK_AND

TOK_NOT = _ap.TOK_NOT

TOK_EX = _ap.TOK_EX

TOK_AX = _ap.TOK_AX

TOK_EF = _ap.TOK_EF

TOK_AF = _ap.TOK_AF

TOK_EG = _ap.TOK_EG

TOK_AG = _ap.TOK_AG

TOK_EE = _ap.TOK_EE

TOK_AA = _ap.TOK_AA

TOK_SINCE = _ap.TOK_SINCE

TOK_UNTIL = _ap.TOK_UNTIL

TOK_TRIGGERED = _ap.TOK_TRIGGERED

TOK_RELEASES = _ap.TOK_RELEASES

TOK_EBF = _ap.TOK_EBF

TOK_EBG = _ap.TOK_EBG

TOK_ABF = _ap.TOK_ABF

TOK_ABG = _ap.TOK_ABG

TOK_BUNTIL = _ap.TOK_BUNTIL

TOK_MMIN = _ap.TOK_MMIN

TOK_MMAX = _ap.TOK_MMAX

TOK_OP_NEXT = _ap.TOK_OP_NEXT

TOK_OP_GLOBAL = _ap.TOK_OP_GLOBAL

TOK_OP_FUTURE = _ap.TOK_OP_FUTURE

TOK_OP_PREC = _ap.TOK_OP_PREC

TOK_OP_NOTPRECNOT = _ap.TOK_OP_NOTPRECNOT

TOK_OP_HISTORICAL = _ap.TOK_OP_HISTORICAL

TOK_OP_ONCE = _ap.TOK_OP_ONCE

TOK_EQUAL = _ap.TOK_EQUAL

TOK_NOTEQUAL = _ap.TOK_NOTEQUAL

TOK_LT = _ap.TOK_LT

TOK_GT = _ap.TOK_GT

TOK_LE = _ap.TOK_LE

TOK_GE = _ap.TOK_GE

TOK_UNION = _ap.TOK_UNION

TOK_SETIN = _ap.TOK_SETIN

TOK_LSHIFT = _ap.TOK_LSHIFT

TOK_RSHIFT = _ap.TOK_RSHIFT

TOK_LROTATE = _ap.TOK_LROTATE

TOK_RROTATE = _ap.TOK_RROTATE

TOK_MOD = _ap.TOK_MOD

TOK_PLUS = _ap.TOK_PLUS

TOK_MINUS = _ap.TOK_MINUS

TOK_TIMES = _ap.TOK_TIMES

TOK_DIVIDE = _ap.TOK_DIVIDE

TOK_NEXT = _ap.TOK_NEXT

TOK_SMALLINIT = _ap.TOK_SMALLINIT

TOK_CONCATENATION = _ap.TOK_CONCATENATION

TOK_LB = _ap.TOK_LB

TOK_DOT = _ap.TOK_DOT

TOK_BIT = _ap.TOK_BIT

TOK_SIGNED = _ap.TOK_SIGNED

TOK_UNSIGNED = _ap.TOK_UNSIGNED

TOK_EXTEND = _ap.TOK_EXTEND

TOK_BOOL = _ap.TOK_BOOL

TOK_WORD1 = _ap.TOK_WORD1

class YYSTYPE(object):
    r"""Proxy of C YYSTYPE struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_ap.YYSTYPE_node_get, _ap.YYSTYPE_node_set, doc=r"""node : node_ptr""")

    def __init__(self):
        r"""__init__(YYSTYPE self) -> YYSTYPE"""
        _ap.YYSTYPE_swiginit(self, _ap.new_YYSTYPE())
    __swig_destroy__ = _ap.delete_YYSTYPE

# Register YYSTYPE in _ap:
_ap.YYSTYPE_swigregister(YYSTYPE)
YYSTYPE_IS_TRIVIAL = _ap.YYSTYPE_IS_TRIVIAL

YYSTYPE_IS_DECLARED = _ap.YYSTYPE_IS_DECLARED


def parser_ap_parse():
    r"""parser_ap_parse() -> int"""
    return _ap.parser_ap_parse()

def ParserAp_create():
    r"""ParserAp_create() -> ParserAp_ptr"""
    return _ap.ParserAp_create()

def ParserAp_destroy(_self):
    r"""ParserAp_destroy(ParserAp_ptr _self)"""
    return _ap.ParserAp_destroy(_self)

def ParserAp_parse_from_file(_self, f):
    r"""ParserAp_parse_from_file(ParserAp_ptr _self, FILE * f)"""
    return _ap.ParserAp_parse_from_file(_self, f)

def ParserAp_parse_from_string(_self, str):
    r"""ParserAp_parse_from_string(ParserAp_ptr _self, char const * str)"""
    return _ap.ParserAp_parse_from_string(_self, str)

def ParserAp_get_ap_list(_self):
    r"""ParserAp_get_ap_list(ParserAp_ptr const _self) -> NodeList_ptr"""
    return _ap.ParserAp_get_ap_list(_self)

def ParserAp_reset(_self):
    r"""ParserAp_reset(ParserAp_ptr _self)"""
    return _ap.ParserAp_reset(_self)

cvar = _ap.cvar

