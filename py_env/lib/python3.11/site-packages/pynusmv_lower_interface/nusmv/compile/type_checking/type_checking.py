# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _type_checking
else:
    import _type_checking

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _type_checking.PRIuPTR

PRIdPTR = _type_checking.PRIdPTR

LLU = _type_checking.LLU

LLO = _type_checking.LLO

LLX = _type_checking.LLX

false = _type_checking.false

true = _type_checking.true

OUTCOME_GENERIC_ERROR = _type_checking.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _type_checking.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _type_checking.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _type_checking.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _type_checking.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _type_checking.OUTCOME_SUCCESS


def TypeChecker_create(symbolTable):
    r"""TypeChecker_create(struct SymbTable_TAG * symbolTable) -> TypeChecker_ptr"""
    return _type_checking.TypeChecker_create(symbolTable)

def TypeChecker_create_with_default_checkers(symbolTable):
    r"""TypeChecker_create_with_default_checkers(struct SymbTable_TAG * symbolTable) -> TypeChecker_ptr"""
    return _type_checking.TypeChecker_create_with_default_checkers(symbolTable)

def TypeChecker_destroy(_self):
    r"""TypeChecker_destroy(TypeChecker_ptr _self)"""
    return _type_checking.TypeChecker_destroy(_self)

def TypeChecker_get_symb_table(_self):
    r"""TypeChecker_get_symb_table(TypeChecker_ptr _self) -> struct SymbTable_TAG *"""
    return _type_checking.TypeChecker_get_symb_table(_self)

def TypeChecker_check_layer(_self, layer):
    r"""TypeChecker_check_layer(TypeChecker_ptr _self, SymbLayer_ptr layer) -> boolean"""
    return _type_checking.TypeChecker_check_layer(_self, layer)

def TypeChecker_check_constrains(_self, init, trans, invar, assign, justice, compassion):
    r"""TypeChecker_check_constrains(TypeChecker_ptr _self, node_ptr init, node_ptr trans, node_ptr invar, node_ptr assign, node_ptr justice, node_ptr compassion) -> boolean"""
    return _type_checking.TypeChecker_check_constrains(_self, init, trans, invar, assign, justice, compassion)

def TypeChecker_check_property(_self, property):
    r"""TypeChecker_check_property(TypeChecker_ptr _self, struct Prop_TAG * property) -> boolean"""
    return _type_checking.TypeChecker_check_property(_self, property)

def TypeChecker_is_expression_wellformed(_self, expression, context):
    r"""TypeChecker_is_expression_wellformed(TypeChecker_ptr _self, node_ptr expression, node_ptr context) -> boolean"""
    return _type_checking.TypeChecker_is_expression_wellformed(_self, expression, context)

def TypeChecker_is_specification_wellformed(_self, expression):
    r"""TypeChecker_is_specification_wellformed(TypeChecker_ptr _self, node_ptr expression) -> boolean"""
    return _type_checking.TypeChecker_is_specification_wellformed(_self, expression)

def TypeChecker_is_type_wellformed(_self, type, varName):
    r"""TypeChecker_is_type_wellformed(TypeChecker_ptr _self, SymbType_ptr type, node_ptr varName) -> boolean"""
    return _type_checking.TypeChecker_is_type_wellformed(_self, type, varName)

def TypeChecker_get_expression_type(_self, expression, context):
    r"""TypeChecker_get_expression_type(TypeChecker_ptr _self, node_ptr expression, node_ptr context) -> SymbType_ptr"""
    return _type_checking.TypeChecker_get_expression_type(_self, expression, context)

def TypeChecker_is_expression_type_checked(_self, expression, context):
    r"""TypeChecker_is_expression_type_checked(TypeChecker_ptr _self, node_ptr expression, node_ptr context) -> boolean"""
    return _type_checking.TypeChecker_is_expression_type_checked(_self, expression, context)

