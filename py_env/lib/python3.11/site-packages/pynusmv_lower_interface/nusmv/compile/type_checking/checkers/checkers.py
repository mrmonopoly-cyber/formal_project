# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _checkers
else:
    import _checkers

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _checkers.PRIuPTR

PRIdPTR = _checkers.PRIdPTR

LLU = _checkers.LLU

LLO = _checkers.LLO

LLX = _checkers.LLX

false = _checkers.false

true = _checkers.true

OUTCOME_GENERIC_ERROR = _checkers.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _checkers.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _checkers.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _checkers.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _checkers.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _checkers.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _checkers.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _checkers.Object_copy(_self)

def CheckerBase_check_expr(_self, expr, context):
    r"""CheckerBase_check_expr(CheckerBase_ptr _self, node_ptr expr, node_ptr context) -> SymbType_ptr"""
    return _checkers.CheckerBase_check_expr(_self, expr, context)

def CheckerCore_create():
    r"""CheckerCore_create() -> CheckerCore_ptr"""
    return _checkers.CheckerCore_create()

def CheckerPsl_create():
    r"""CheckerPsl_create() -> CheckerPsl_ptr"""
    return _checkers.CheckerPsl_create()

def CheckerStatement_create():
    r"""CheckerStatement_create() -> CheckerStatement_ptr"""
    return _checkers.CheckerStatement_create()

