# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _symb_table
else:
    import _symb_table

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _symb_table.PRIuPTR

PRIdPTR = _symb_table.PRIdPTR

LLU = _symb_table.LLU

LLO = _symb_table.LLO

LLX = _symb_table.LLX

false = _symb_table.false

true = _symb_table.true

OUTCOME_GENERIC_ERROR = _symb_table.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _symb_table.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _symb_table.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _symb_table.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _symb_table.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _symb_table.OUTCOME_SUCCESS


def NFunction_create_uninterpreted(num_args, args, ret):
    r"""NFunction_create_uninterpreted(int num_args, SymbType_ptr * args, SymbType_ptr ret) -> NFunction_ptr"""
    return _symb_table.NFunction_create_uninterpreted(num_args, args, ret)

def NFunction_create_interpreted(num_args, args, ret, body):
    r"""NFunction_create_interpreted(int num_args, SymbType_ptr * args, SymbType_ptr ret, void * body) -> NFunction_ptr"""
    return _symb_table.NFunction_create_interpreted(num_args, args, ret, body)

def NFunction_destroy(_self):
    r"""NFunction_destroy(NFunction_ptr _self)"""
    return _symb_table.NFunction_destroy(_self)

def NFunction_get_args_number(_self):
    r"""NFunction_get_args_number(NFunction_ptr _self) -> int"""
    return _symb_table.NFunction_get_args_number(_self)

def NFunction_get_args(_self):
    r"""NFunction_get_args(NFunction_ptr _self) -> NodeList_ptr"""
    return _symb_table.NFunction_get_args(_self)

def NFunction_get_return_type(_self):
    r"""NFunction_get_return_type(NFunction_ptr _self) -> SymbType_ptr"""
    return _symb_table.NFunction_get_return_type(_self)

def NFunction_get_main_type(_self):
    r"""NFunction_get_main_type(NFunction_ptr _self) -> SymbType_ptr"""
    return _symb_table.NFunction_get_main_type(_self)

def NFunction_is_uninterpreted(_self):
    r"""NFunction_is_uninterpreted(NFunction_ptr _self) -> boolean"""
    return _symb_table.NFunction_is_uninterpreted(_self)

def NFunction_get_body(_self):
    r"""NFunction_get_body(NFunction_ptr _self) -> void *"""
    return _symb_table.NFunction_get_body(_self)

def ResolveSymbol_create():
    r"""ResolveSymbol_create() -> ResolveSymbol_ptr"""
    return _symb_table.ResolveSymbol_create()

def ResolveSymbol_destroy(_self):
    r"""ResolveSymbol_destroy(ResolveSymbol_ptr _self)"""
    return _symb_table.ResolveSymbol_destroy(_self)

def ResolveSymbol_is_undefined(_self):
    r"""ResolveSymbol_is_undefined(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_undefined(_self)

def ResolveSymbol_is_defined(_self):
    r"""ResolveSymbol_is_defined(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_defined(_self)

def ResolveSymbol_is_ambiguous(_self):
    r"""ResolveSymbol_is_ambiguous(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_ambiguous(_self)

def ResolveSymbol_is_var(_self):
    r"""ResolveSymbol_is_var(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_var(_self)

def ResolveSymbol_is_define(_self):
    r"""ResolveSymbol_is_define(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_define(_self)

def ResolveSymbol_is_function(_self):
    r"""ResolveSymbol_is_function(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_function(_self)

def ResolveSymbol_is_constant(_self):
    r"""ResolveSymbol_is_constant(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_constant(_self)

def ResolveSymbol_is_parameter(_self):
    r"""ResolveSymbol_is_parameter(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_parameter(_self)

def ResolveSymbol_is_array(_self):
    r"""ResolveSymbol_is_array(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_array(_self)

def ResolveSymbol_is_array_def(_self):
    r"""ResolveSymbol_is_array_def(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_array_def(_self)

def ResolveSymbol_is_error(_self):
    r"""ResolveSymbol_is_error(ResolveSymbol_ptr _self) -> boolean"""
    return _symb_table.ResolveSymbol_is_error(_self)

def ResolveSymbol_get_error_message(_self):
    r"""ResolveSymbol_get_error_message(ResolveSymbol_ptr _self) -> char *"""
    return _symb_table.ResolveSymbol_get_error_message(_self)

def ResolveSymbol_print_error_message(_self, stream):
    r"""ResolveSymbol_print_error_message(ResolveSymbol_ptr _self, FILE * stream)"""
    return _symb_table.ResolveSymbol_print_error_message(_self, stream)

def ResolveSymbol_throw_error(_self):
    r"""ResolveSymbol_throw_error(ResolveSymbol_ptr _self)"""
    return _symb_table.ResolveSymbol_throw_error(_self)

def ResolveSymbol_get_resolved_name(_self):
    r"""ResolveSymbol_get_resolved_name(ResolveSymbol_ptr _self) -> node_ptr"""
    return _symb_table.ResolveSymbol_get_resolved_name(_self)

def ResolveSymbol_resolve(_self, st, name, context):
    r"""ResolveSymbol_resolve(ResolveSymbol_ptr _self, struct SymbTable_TAG * st, node_ptr name, node_ptr context) -> node_ptr"""
    return _symb_table.ResolveSymbol_resolve(_self, st, name, context)

def SymbTablePkg_no_type():
    r"""SymbTablePkg_no_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_no_type()

def SymbTablePkg_statement_type():
    r"""SymbTablePkg_statement_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_statement_type()

def SymbTablePkg_boolean_type():
    r"""SymbTablePkg_boolean_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_boolean_type()

def SymbTablePkg_pure_symbolic_enum_type():
    r"""SymbTablePkg_pure_symbolic_enum_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_pure_symbolic_enum_type()

def SymbTablePkg_int_symbolic_enum_type():
    r"""SymbTablePkg_int_symbolic_enum_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_int_symbolic_enum_type()

def SymbTablePkg_pure_int_enum_type():
    r"""SymbTablePkg_pure_int_enum_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_pure_int_enum_type()

def SymbTablePkg_integer_type():
    r"""SymbTablePkg_integer_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_integer_type()

def SymbTablePkg_real_type():
    r"""SymbTablePkg_real_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_real_type()

def SymbTablePkg_unsigned_word_type(width):
    r"""SymbTablePkg_unsigned_word_type(int width) -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_unsigned_word_type(width)

def SymbTablePkg_signed_word_type(width):
    r"""SymbTablePkg_signed_word_type(int width) -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_signed_word_type(width)

def SymbTablePkg_wordarray_type(awidth, vwidth):
    r"""SymbTablePkg_wordarray_type(int awidth, int vwidth) -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_wordarray_type(awidth, vwidth)

def SymbTablePkg_array_type(subtype, lower_bound, upper_bound):
    r"""SymbTablePkg_array_type(SymbType_ptr subtype, int lower_bound, int upper_bound) -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_array_type(subtype, lower_bound, upper_bound)

def SymbTablePkg_string_type():
    r"""SymbTablePkg_string_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_string_type()

def SymbTablePkg_boolean_set_type():
    r"""SymbTablePkg_boolean_set_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_boolean_set_type()

def SymbTablePkg_integer_set_type():
    r"""SymbTablePkg_integer_set_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_integer_set_type()

def SymbTablePkg_symbolic_set_type():
    r"""SymbTablePkg_symbolic_set_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_symbolic_set_type()

def SymbTablePkg_integer_symbolic_set_type():
    r"""SymbTablePkg_integer_symbolic_set_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_integer_symbolic_set_type()

def SymbTablePkg_error_type():
    r"""SymbTablePkg_error_type() -> SymbType_ptr"""
    return _symb_table.SymbTablePkg_error_type()

def SymbCache_get_var_type(_self, name):
    r"""SymbCache_get_var_type(SymbCache_ptr const _self, node_ptr const name) -> SymbType_ptr"""
    return _symb_table.SymbCache_get_var_type(_self, name)

def SymbCache_get_define_body(_self, name):
    r"""SymbCache_get_define_body(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_define_body(_self, name)

def SymbCache_get_function(_self, name):
    r"""SymbCache_get_function(SymbCache_ptr const _self, node_ptr const name) -> NFunction_ptr"""
    return _symb_table.SymbCache_get_function(_self, name)

def SymbCache_get_actual_parameter(_self, name):
    r"""SymbCache_get_actual_parameter(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_actual_parameter(_self, name)

def SymbCache_get_array_define_body(_self, name):
    r"""SymbCache_get_array_define_body(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_array_define_body(_self, name)

def SymbCache_get_variable_array_type(_self, name):
    r"""SymbCache_get_variable_array_type(SymbCache_ptr const _self, node_ptr const name) -> SymbType_ptr"""
    return _symb_table.SymbCache_get_variable_array_type(_self, name)

def SymbCache_get_define_flatten_body(_self, name):
    r"""SymbCache_get_define_flatten_body(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_define_flatten_body(_self, name)

def SymbCache_get_flatten_actual_parameter(_self, name):
    r"""SymbCache_get_flatten_actual_parameter(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_flatten_actual_parameter(_self, name)

def SymbCache_get_define_context(_self, name):
    r"""SymbCache_get_define_context(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_define_context(_self, name)

def SymbCache_get_function_context(_self, name):
    r"""SymbCache_get_function_context(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_function_context(_self, name)

def SymbCache_get_actual_parameter_context(_self, name):
    r"""SymbCache_get_actual_parameter_context(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_actual_parameter_context(_self, name)

def SymbCache_get_array_define_context(_self, name):
    r"""SymbCache_get_array_define_context(SymbCache_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbCache_get_array_define_context(_self, name)

def SymbCache_is_symbol_state_var(_self, name):
    r"""SymbCache_is_symbol_state_var(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_state_var(_self, name)

def SymbCache_is_symbol_frozen_var(_self, name):
    r"""SymbCache_is_symbol_frozen_var(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_frozen_var(_self, name)

def SymbCache_is_symbol_state_frozen_var(_self, name):
    r"""SymbCache_is_symbol_state_frozen_var(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_state_frozen_var(_self, name)

def SymbCache_is_symbol_input_var(_self, name):
    r"""SymbCache_is_symbol_input_var(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_input_var(_self, name)

def SymbCache_is_symbol_var(_self, name):
    r"""SymbCache_is_symbol_var(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_var(_self, name)

def SymbCache_is_symbol_declared(_self, name):
    r"""SymbCache_is_symbol_declared(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_declared(_self, name)

def SymbCache_is_symbol_define(_self, name):
    r"""SymbCache_is_symbol_define(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_define(_self, name)

def SymbCache_is_symbol_function(_self, name):
    r"""SymbCache_is_symbol_function(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_function(_self, name)

def SymbCache_is_symbol_parameter(_self, name):
    r"""SymbCache_is_symbol_parameter(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_parameter(_self, name)

def SymbCache_is_symbol_array_define(_self, name):
    r"""SymbCache_is_symbol_array_define(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_array_define(_self, name)

def SymbCache_is_symbol_variable_array(_self, name):
    r"""SymbCache_is_symbol_variable_array(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_variable_array(_self, name)

def SymbCache_is_symbol_constant(_self, name):
    r"""SymbCache_is_symbol_constant(SymbCache_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbCache_is_symbol_constant(_self, name)

def SymbCache_list_contains_input_var(_self, var_list):
    r"""SymbCache_list_contains_input_var(SymbCache_ptr const _self, NodeList_ptr const var_list) -> boolean"""
    return _symb_table.SymbCache_list_contains_input_var(_self, var_list)

def SymbCache_list_contains_state_frozen_var(_self, var_list):
    r"""SymbCache_list_contains_state_frozen_var(SymbCache_ptr const _self, NodeList_ptr const var_list) -> boolean"""
    return _symb_table.SymbCache_list_contains_state_frozen_var(_self, var_list)

def SymbCache_list_contains_undef_var(_self, var_list):
    r"""SymbCache_list_contains_undef_var(SymbCache_ptr const _self, NodeList_ptr const var_list) -> boolean"""
    return _symb_table.SymbCache_list_contains_undef_var(_self, var_list)
SYMB_LAYER_POS_DEFAULT = _symb_table.SYMB_LAYER_POS_DEFAULT

SYMB_LAYER_POS_FORCE_TOP = _symb_table.SYMB_LAYER_POS_FORCE_TOP

SYMB_LAYER_POS_TOP = _symb_table.SYMB_LAYER_POS_TOP

SYMB_LAYER_POS_BOTTOM = _symb_table.SYMB_LAYER_POS_BOTTOM

SYMB_LAYER_POS_FORCE_BOTTOM = _symb_table.SYMB_LAYER_POS_FORCE_BOTTOM

class SymbLayerIter(object):
    r"""Proxy of C SymbLayerIter_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_symb_table.SymbLayerIter_index_get, _symb_table.SymbLayerIter_index_set, doc=r"""index : unsigned int""")
    mask = property(_symb_table.SymbLayerIter_mask_get, _symb_table.SymbLayerIter_mask_set, doc=r"""mask : unsigned int""")
    filter = property(_symb_table.SymbLayerIter_filter_get, _symb_table.SymbLayerIter_filter_set, doc=r"""filter : SymbLayerIterFilterFun""")
    arg = property(_symb_table.SymbLayerIter_arg_get, _symb_table.SymbLayerIter_arg_set, doc=r"""arg : p.void""")

    def __init__(self):
        r"""__init__(SymbLayerIter self) -> SymbLayerIter"""
        _symb_table.SymbLayerIter_swiginit(self, _symb_table.new_SymbLayerIter())
    __swig_destroy__ = _symb_table.delete_SymbLayerIter

# Register SymbLayerIter in _symb_table:
_symb_table.SymbLayerIter_swigregister(SymbLayerIter)

def SymbLayer_gen_iter(_self, iter, mask):
    r"""SymbLayer_gen_iter(SymbLayer_ptr const _self, SymbLayerIter iter, unsigned int mask)"""
    return _symb_table.SymbLayer_gen_iter(_self, iter, mask)

def SymbLayer_iter_next(_self, iter):
    r"""SymbLayer_iter_next(SymbLayer_ptr const _self, SymbLayerIter iter)"""
    return _symb_table.SymbLayer_iter_next(_self, iter)

def SymbLayer_iter_is_end(_self, iter):
    r"""SymbLayer_iter_is_end(SymbLayer_ptr const _self, SymbLayerIter iter) -> boolean"""
    return _symb_table.SymbLayer_iter_is_end(_self, iter)

def SymbLayer_iter_get_symbol(_self, iter):
    r"""SymbLayer_iter_get_symbol(SymbLayer_ptr const _self, SymbLayerIter iter) -> node_ptr"""
    return _symb_table.SymbLayer_iter_get_symbol(_self, iter)

def SymbLayer_iter_set_filter(layer, iter, fun, arg):
    r"""SymbLayer_iter_set_filter(SymbLayer_ptr const layer, SymbLayerIter iter, SymbLayerIterFilterFun fun, void * arg)"""
    return _symb_table.SymbLayer_iter_set_filter(layer, iter, fun, arg)

def SymbLayer_iter_filter_bool_vars(_self, sym, arg):
    r"""SymbLayer_iter_filter_bool_vars(SymbLayer_ptr const _self, node_ptr const sym, void * arg) -> boolean"""
    return _symb_table.SymbLayer_iter_filter_bool_vars(_self, sym, arg)

def SymbLayer_iter_to_set(_self, iter):
    r"""SymbLayer_iter_to_set(SymbLayer_ptr const _self, SymbLayerIter iter) -> Set_t"""
    return _symb_table.SymbLayer_iter_to_set(_self, iter)

def SymbLayer_iter_to_list(_self, iter):
    r"""SymbLayer_iter_to_list(SymbLayer_ptr const _self, SymbLayerIter iter) -> NodeList_ptr"""
    return _symb_table.SymbLayer_iter_to_list(_self, iter)

def SymbLayer_iter_count(_self, iter):
    r"""SymbLayer_iter_count(SymbLayer_ptr const _self, SymbLayerIter iter) -> unsigned int"""
    return _symb_table.SymbLayer_iter_count(_self, iter)

def SymbLayer_get_name(_self):
    r"""SymbLayer_get_name(SymbLayer_ptr const _self) -> char const *"""
    return _symb_table.SymbLayer_get_name(_self)

def SymbLayer_can_declare_constant(_self, name):
    r"""SymbLayer_can_declare_constant(SymbLayer_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbLayer_can_declare_constant(_self, name)

def SymbLayer_declare_constant(_self, name):
    r"""SymbLayer_declare_constant(SymbLayer_ptr _self, node_ptr name)"""
    return _symb_table.SymbLayer_declare_constant(_self, name)

def SymbLayer_can_declare_var(_self, name):
    r"""SymbLayer_can_declare_var(SymbLayer_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbLayer_can_declare_var(_self, name)

def SymbLayer_declare_input_var(_self, var, type):
    r"""SymbLayer_declare_input_var(SymbLayer_ptr _self, node_ptr var, SymbType_ptr type)"""
    return _symb_table.SymbLayer_declare_input_var(_self, var, type)

def SymbLayer_declare_state_var(_self, var, type):
    r"""SymbLayer_declare_state_var(SymbLayer_ptr _self, node_ptr var, SymbType_ptr type)"""
    return _symb_table.SymbLayer_declare_state_var(_self, var, type)

def SymbLayer_declare_frozen_var(_self, var, type):
    r"""SymbLayer_declare_frozen_var(SymbLayer_ptr _self, node_ptr var, SymbType_ptr type)"""
    return _symb_table.SymbLayer_declare_frozen_var(_self, var, type)

def SymbLayer_redeclare_state_as_frozen_var(_self, var):
    r"""SymbLayer_redeclare_state_as_frozen_var(SymbLayer_ptr _self, node_ptr var)"""
    return _symb_table.SymbLayer_redeclare_state_as_frozen_var(_self, var)

def SymbLayer_can_declare_define(_self, name):
    r"""SymbLayer_can_declare_define(SymbLayer_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbLayer_can_declare_define(_self, name)

def SymbLayer_can_declare_function(_self, name):
    r"""SymbLayer_can_declare_function(SymbLayer_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbLayer_can_declare_function(_self, name)

def SymbLayer_can_declare_parameter(_self, name):
    r"""SymbLayer_can_declare_parameter(SymbLayer_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbLayer_can_declare_parameter(_self, name)

def SymbLayer_can_declare_array_define(_self, name):
    r"""SymbLayer_can_declare_array_define(SymbLayer_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbLayer_can_declare_array_define(_self, name)

def SymbLayer_can_declare_variable_array(_self, name):
    r"""SymbLayer_can_declare_variable_array(SymbLayer_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbLayer_can_declare_variable_array(_self, name)

def SymbLayer_declare_define(_self, name, ctx, definition):
    r"""SymbLayer_declare_define(SymbLayer_ptr _self, node_ptr name, node_ptr ctx, node_ptr definition)"""
    return _symb_table.SymbLayer_declare_define(_self, name, ctx, definition)

def SymbLayer_declare_function(_self, name, ctx, fun):
    r"""SymbLayer_declare_function(SymbLayer_ptr _self, node_ptr name, node_ptr ctx, NFunction_ptr fun)"""
    return _symb_table.SymbLayer_declare_function(_self, name, ctx, fun)

def SymbLayer_declare_parameter(_self, formal, ctx, actual):
    r"""SymbLayer_declare_parameter(SymbLayer_ptr _self, node_ptr formal, node_ptr ctx, node_ptr actual)"""
    return _symb_table.SymbLayer_declare_parameter(_self, formal, ctx, actual)

def SymbLayer_declare_array_define(_self, name, ctx, definition):
    r"""SymbLayer_declare_array_define(SymbLayer_ptr _self, node_ptr name, node_ptr ctx, node_ptr definition)"""
    return _symb_table.SymbLayer_declare_array_define(_self, name, ctx, definition)

def SymbLayer_declare_variable_array(_self, var, type):
    r"""SymbLayer_declare_variable_array(SymbLayer_ptr _self, node_ptr var, SymbType_ptr type)"""
    return _symb_table.SymbLayer_declare_variable_array(_self, var, type)

def SymbLayer_remove_var(_self, name):
    r"""SymbLayer_remove_var(SymbLayer_ptr _self, node_ptr name)"""
    return _symb_table.SymbLayer_remove_var(_self, name)

def SymbLayer_remove_define(_self, name):
    r"""SymbLayer_remove_define(SymbLayer_ptr _self, node_ptr name)"""
    return _symb_table.SymbLayer_remove_define(_self, name)

def SymbLayer_remove_function(_self, name):
    r"""SymbLayer_remove_function(SymbLayer_ptr _self, node_ptr name)"""
    return _symb_table.SymbLayer_remove_function(_self, name)

def SymbLayer_get_symbols_num(_self):
    r"""SymbLayer_get_symbols_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_symbols_num(_self)

def SymbLayer_get_constants_num(_self):
    r"""SymbLayer_get_constants_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_constants_num(_self)

def SymbLayer_get_state_vars_num(_self):
    r"""SymbLayer_get_state_vars_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_state_vars_num(_self)

def SymbLayer_get_bool_state_vars_num(_self):
    r"""SymbLayer_get_bool_state_vars_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_bool_state_vars_num(_self)

def SymbLayer_get_frozen_vars_num(_self):
    r"""SymbLayer_get_frozen_vars_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_frozen_vars_num(_self)

def SymbLayer_get_bool_frozen_vars_num(_self):
    r"""SymbLayer_get_bool_frozen_vars_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_bool_frozen_vars_num(_self)

def SymbLayer_get_input_vars_num(_self):
    r"""SymbLayer_get_input_vars_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_input_vars_num(_self)

def SymbLayer_get_vars_num(_self):
    r"""SymbLayer_get_vars_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_vars_num(_self)

def SymbLayer_get_bool_input_vars_num(_self):
    r"""SymbLayer_get_bool_input_vars_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_bool_input_vars_num(_self)

def SymbLayer_get_defines_num(_self):
    r"""SymbLayer_get_defines_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_defines_num(_self)

def SymbLayer_get_functions_num(_self):
    r"""SymbLayer_get_functions_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_functions_num(_self)

def SymbLayer_get_parameters_num(_self):
    r"""SymbLayer_get_parameters_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_parameters_num(_self)

def SymbLayer_get_array_defines_num(_self):
    r"""SymbLayer_get_array_defines_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_array_defines_num(_self)

def SymbLayer_get_variable_arrays_num(_self):
    r"""SymbLayer_get_variable_arrays_num(SymbLayer_ptr const _self) -> int"""
    return _symb_table.SymbLayer_get_variable_arrays_num(_self)

def SymbLayer_must_insert_before(_self, other):
    r"""SymbLayer_must_insert_before(SymbLayer_ptr const _self, SymbLayer_ptr const other) -> boolean"""
    return _symb_table.SymbLayer_must_insert_before(_self, other)

def SymbLayer_is_variable_in_layer(_self, name):
    r"""SymbLayer_is_variable_in_layer(SymbLayer_ptr _self, node_ptr name) -> boolean"""
    return _symb_table.SymbLayer_is_variable_in_layer(_self, name)

def SymbLayer_is_symbol_in_layer(_self, name):
    r"""SymbLayer_is_symbol_in_layer(SymbLayer_ptr _self, node_ptr name) -> boolean"""
    return _symb_table.SymbLayer_is_symbol_in_layer(_self, name)

def SymbLayer_get_insert_policy(_self):
    r"""SymbLayer_get_insert_policy(SymbLayer_ptr const _self) -> LayerInsertPolicy"""
    return _symb_table.SymbLayer_get_insert_policy(_self)
VFT_CURRENT = _symb_table.VFT_CURRENT

VFT_NEXT = _symb_table.VFT_NEXT

VFT_STATE = _symb_table.VFT_STATE

VFT_INPUT = _symb_table.VFT_INPUT

VFT_CURR_INPUT = _symb_table.VFT_CURR_INPUT

VFT_FROZEN = _symb_table.VFT_FROZEN

VFT_CURR_FROZEN = _symb_table.VFT_CURR_FROZEN

VFT_ALL = _symb_table.VFT_ALL

VFT_DEFINE = _symb_table.VFT_DEFINE

VFT_ALL_DEFINE = _symb_table.VFT_ALL_DEFINE

SYMBOL_INVALID = _symb_table.SYMBOL_INVALID

SYMBOL_CONSTANT = _symb_table.SYMBOL_CONSTANT

SYMBOL_FROZEN_VAR = _symb_table.SYMBOL_FROZEN_VAR

SYMBOL_STATE_VAR = _symb_table.SYMBOL_STATE_VAR

SYMBOL_INPUT_VAR = _symb_table.SYMBOL_INPUT_VAR

SYMBOL_STATE_DEFINE = _symb_table.SYMBOL_STATE_DEFINE

SYMBOL_INPUT_DEFINE = _symb_table.SYMBOL_INPUT_DEFINE

SYMBOL_STATE_INPUT_DEFINE = _symb_table.SYMBOL_STATE_INPUT_DEFINE

SYMBOL_NEXT_DEFINE = _symb_table.SYMBOL_NEXT_DEFINE

SYMBOL_STATE_NEXT_DEFINE = _symb_table.SYMBOL_STATE_NEXT_DEFINE

SYMBOL_INPUT_NEXT_DEFINE = _symb_table.SYMBOL_INPUT_NEXT_DEFINE

SYMBOL_STATE_INPUT_NEXT_DEFINE = _symb_table.SYMBOL_STATE_INPUT_NEXT_DEFINE

SYMBOL_DEFINE = _symb_table.SYMBOL_DEFINE

SYMBOL_FUNCTION = _symb_table.SYMBOL_FUNCTION

SYMBOL_PARAMETER = _symb_table.SYMBOL_PARAMETER

SYMBOL_ARRAY_DEFINE = _symb_table.SYMBOL_ARRAY_DEFINE

SYMBOL_VARIABLE_ARRAY = _symb_table.SYMBOL_VARIABLE_ARRAY

STT_NONE = _symb_table.STT_NONE

STT_CONSTANT = _symb_table.STT_CONSTANT

STT_STATE_VAR = _symb_table.STT_STATE_VAR

STT_INPUT_VAR = _symb_table.STT_INPUT_VAR

STT_FROZEN_VAR = _symb_table.STT_FROZEN_VAR

STT_VAR = _symb_table.STT_VAR

STT_DEFINE = _symb_table.STT_DEFINE

STT_ARRAY_DEFINE = _symb_table.STT_ARRAY_DEFINE

STT_PARAMETER = _symb_table.STT_PARAMETER

STT_FUNCTION = _symb_table.STT_FUNCTION

STT_VARIABLE_ARRAY = _symb_table.STT_VARIABLE_ARRAY

STT_ALL = _symb_table.STT_ALL

ST_TRIGGER_SYMBOL_ADD = _symb_table.ST_TRIGGER_SYMBOL_ADD

ST_TRIGGER_SYMBOL_REMOVE = _symb_table.ST_TRIGGER_SYMBOL_REMOVE

ST_TRIGGER_SYMBOL_REDECLARE = _symb_table.ST_TRIGGER_SYMBOL_REDECLARE

class SymbTableIter(object):
    r"""Proxy of C SymbTableIter_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_symb_table.SymbTableIter_index_get, _symb_table.SymbTableIter_index_set, doc=r"""index : unsigned int""")
    mask = property(_symb_table.SymbTableIter_mask_get, _symb_table.SymbTableIter_mask_set, doc=r"""mask : unsigned int""")
    filter = property(_symb_table.SymbTableIter_filter_get, _symb_table.SymbTableIter_filter_set, doc=r"""filter : SymbTableIterFilterFun""")
    st = property(_symb_table.SymbTableIter_st_get, _symb_table.SymbTableIter_st_set, doc=r"""st : SymbTable_ptr""")
    arg = property(_symb_table.SymbTableIter_arg_get, _symb_table.SymbTableIter_arg_set, doc=r"""arg : p.void""")

    def __init__(self):
        r"""__init__(SymbTableIter self) -> SymbTableIter"""
        _symb_table.SymbTableIter_swiginit(self, _symb_table.new_SymbTableIter())
    __swig_destroy__ = _symb_table.delete_SymbTableIter

# Register SymbTableIter in _symb_table:
_symb_table.SymbTableIter_swigregister(SymbTableIter)

def SymbTable_create():
    r"""SymbTable_create() -> SymbTable_ptr"""
    return _symb_table.SymbTable_create()

def SymbTable_destroy(_self):
    r"""SymbTable_destroy(SymbTable_ptr _self)"""
    return _symb_table.SymbTable_destroy(_self)

def SymbTable_get_type_checker(_self):
    r"""SymbTable_get_type_checker(SymbTable_ptr const _self) -> TypeChecker_ptr"""
    return _symb_table.SymbTable_get_type_checker(_self)

def SymbTable_gen_iter(_self, iter, mask):
    r"""SymbTable_gen_iter(SymbTable_ptr const _self, SymbTableIter iter, unsigned int mask)"""
    return _symb_table.SymbTable_gen_iter(_self, iter, mask)

def SymbTable_iter_next(_self, iter):
    r"""SymbTable_iter_next(SymbTable_ptr const _self, SymbTableIter iter)"""
    return _symb_table.SymbTable_iter_next(_self, iter)

def SymbTable_iter_is_end(_self, iter):
    r"""SymbTable_iter_is_end(SymbTable_ptr const _self, SymbTableIter iter) -> boolean"""
    return _symb_table.SymbTable_iter_is_end(_self, iter)

def SymbTable_iter_get_symbol(_self, iter):
    r"""SymbTable_iter_get_symbol(SymbTable_ptr const _self, SymbTableIter iter) -> node_ptr"""
    return _symb_table.SymbTable_iter_get_symbol(_self, iter)

def SymbTable_iter_set_filter(_self, iter, fun, arg):
    r"""SymbTable_iter_set_filter(SymbTable_ptr const _self, SymbTableIter iter, SymbTableIterFilterFun fun, void * arg)"""
    return _symb_table.SymbTable_iter_set_filter(_self, iter, fun, arg)

def SymbTable_foreach(_self, mask, fun, arg):
    r"""SymbTable_foreach(SymbTable_ptr const _self, unsigned int mask, SymbTableForeachFun fun, void * arg)"""
    return _symb_table.SymbTable_foreach(_self, mask, fun, arg)

def SymbTable_iter_to_set(_self, iter):
    r"""SymbTable_iter_to_set(SymbTable_ptr const _self, SymbTableIter iter) -> Set_t"""
    return _symb_table.SymbTable_iter_to_set(_self, iter)

def SymbTable_iter_to_list(_self, iter):
    r"""SymbTable_iter_to_list(SymbTable_ptr const _self, SymbTableIter iter) -> NodeList_ptr"""
    return _symb_table.SymbTable_iter_to_list(_self, iter)

def SymbTable_iter_count(_self, iter):
    r"""SymbTable_iter_count(SymbTable_ptr const _self, SymbTableIter iter) -> unsigned int"""
    return _symb_table.SymbTable_iter_count(_self, iter)

def SymbTable_add_trigger(_self, trigger, action, arg):
    r"""SymbTable_add_trigger(SymbTable_ptr const _self, SymbTableTriggerFun trigger, SymbTableTriggerAction action, void * arg)"""
    return _symb_table.SymbTable_add_trigger(_self, trigger, action, arg)

def SymbTable_remove_trigger(_self, trigger, action):
    r"""SymbTable_remove_trigger(SymbTable_ptr const _self, SymbTableTriggerFun trigger, SymbTableTriggerAction action)"""
    return _symb_table.SymbTable_remove_trigger(_self, trigger, action)

def SymbTable_iter_filter_i_symbols(_self, sym, arg):
    r"""SymbTable_iter_filter_i_symbols(SymbTable_ptr const _self, node_ptr const sym, void * arg) -> boolean"""
    return _symb_table.SymbTable_iter_filter_i_symbols(_self, sym, arg)

def SymbTable_iter_filter_sf_i_symbols(_self, sym, arg):
    r"""SymbTable_iter_filter_sf_i_symbols(SymbTable_ptr const _self, node_ptr const sym, void * arg) -> boolean"""
    return _symb_table.SymbTable_iter_filter_sf_i_symbols(_self, sym, arg)

def SymbTable_iter_filter_sf_symbols(_self, sym, arg):
    r"""SymbTable_iter_filter_sf_symbols(SymbTable_ptr const _self, node_ptr const sym, void * arg) -> boolean"""
    return _symb_table.SymbTable_iter_filter_sf_symbols(_self, sym, arg)

def SymbTable_create_layer(_self, layer_name, ins_policy):
    r"""SymbTable_create_layer(SymbTable_ptr _self, char const * layer_name, LayerInsertPolicy const ins_policy) -> SymbLayer_ptr"""
    return _symb_table.SymbTable_create_layer(_self, layer_name, ins_policy)

def SymbTable_remove_layer(_self, layer):
    r"""SymbTable_remove_layer(SymbTable_ptr _self, SymbLayer_ptr layer)"""
    return _symb_table.SymbTable_remove_layer(_self, layer)

def SymbTable_get_layer(_self, layer_name):
    r"""SymbTable_get_layer(SymbTable_ptr const _self, char const * layer_name) -> SymbLayer_ptr"""
    return _symb_table.SymbTable_get_layer(_self, layer_name)

def SymbTable_rename_layer(_self, layer_name, new_name):
    r"""SymbTable_rename_layer(SymbTable_ptr const _self, char const * layer_name, char const * new_name)"""
    return _symb_table.SymbTable_rename_layer(_self, layer_name, new_name)

def SymbTable_get_layers(_self):
    r"""SymbTable_get_layers(SymbTable_ptr const _self) -> NodeList_ptr"""
    return _symb_table.SymbTable_get_layers(_self)

def SymbTable_get_layers_sf_symbols(_self, layer_names):
    r"""SymbTable_get_layers_sf_symbols(SymbTable_ptr _self, array_t const * layer_names) -> NodeList_ptr"""
    return _symb_table.SymbTable_get_layers_sf_symbols(_self, layer_names)

def SymbTable_get_layers_sf_vars(_self, layer_names):
    r"""SymbTable_get_layers_sf_vars(SymbTable_ptr _self, array_t const * layer_names) -> NodeList_ptr"""
    return _symb_table.SymbTable_get_layers_sf_vars(_self, layer_names)

def SymbTable_get_layers_i_symbols(_self, layer_names):
    r"""SymbTable_get_layers_i_symbols(SymbTable_ptr _self, array_t const * layer_names) -> NodeList_ptr"""
    return _symb_table.SymbTable_get_layers_i_symbols(_self, layer_names)

def SymbTable_get_layers_i_vars(_self, layer_names):
    r"""SymbTable_get_layers_i_vars(SymbTable_ptr _self, array_t const * layer_names) -> NodeList_ptr"""
    return _symb_table.SymbTable_get_layers_i_vars(_self, layer_names)

def SymbTable_get_layers_sf_i_symbols(_self, layer_names):
    r"""SymbTable_get_layers_sf_i_symbols(SymbTable_ptr _self, array_t const * layer_names) -> NodeList_ptr"""
    return _symb_table.SymbTable_get_layers_sf_i_symbols(_self, layer_names)

def SymbTable_get_layers_sf_i_vars(_self, layer_names):
    r"""SymbTable_get_layers_sf_i_vars(SymbTable_ptr _self, array_t const * layer_names) -> NodeList_ptr"""
    return _symb_table.SymbTable_get_layers_sf_i_vars(_self, layer_names)

def SymbTable_get_vars_num(_self):
    r"""SymbTable_get_vars_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_vars_num(_self)

def SymbTable_get_state_vars_num(_self):
    r"""SymbTable_get_state_vars_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_state_vars_num(_self)

def SymbTable_get_frozen_vars_num(_self):
    r"""SymbTable_get_frozen_vars_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_frozen_vars_num(_self)

def SymbTable_get_input_vars_num(_self):
    r"""SymbTable_get_input_vars_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_input_vars_num(_self)

def SymbTable_get_defines_num(_self):
    r"""SymbTable_get_defines_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_defines_num(_self)

def SymbTable_get_array_defines_num(_self):
    r"""SymbTable_get_array_defines_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_array_defines_num(_self)

def SymbTable_get_parameters_num(_self):
    r"""SymbTable_get_parameters_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_parameters_num(_self)

def SymbTable_get_constants_num(_self):
    r"""SymbTable_get_constants_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_constants_num(_self)

def SymbTable_get_functions_num(_self):
    r"""SymbTable_get_functions_num(SymbTable_ptr const _self) -> int"""
    return _symb_table.SymbTable_get_functions_num(_self)

def SymbTable_create_layer_class(_self, class_name):
    r"""SymbTable_create_layer_class(SymbTable_ptr _self, char const * class_name)"""
    return _symb_table.SymbTable_create_layer_class(_self, class_name)

def SymbTable_layer_class_exists(_self, class_name):
    r"""SymbTable_layer_class_exists(SymbTable_ptr _self, char const * class_name) -> boolean"""
    return _symb_table.SymbTable_layer_class_exists(_self, class_name)

def SymbTable_layer_add_to_class(_self, layer_name, class_name):
    r"""SymbTable_layer_add_to_class(SymbTable_ptr _self, char const * layer_name, char const * class_name)"""
    return _symb_table.SymbTable_layer_add_to_class(_self, layer_name, class_name)

def SymbTable_layer_remove_from_class(_self, layer_name, class_name):
    r"""SymbTable_layer_remove_from_class(SymbTable_ptr _self, char const * layer_name, char const * class_name)"""
    return _symb_table.SymbTable_layer_remove_from_class(_self, layer_name, class_name)

def SymbTable_get_class_layer_names(_self, class_name):
    r"""SymbTable_get_class_layer_names(SymbTable_ptr _self, char const * class_name) -> array_t *"""
    return _symb_table.SymbTable_get_class_layer_names(_self, class_name)

def SymbTable_is_layer_in_class(_self, layer_name, class_name):
    r"""SymbTable_is_layer_in_class(SymbTable_ptr _self, char const * layer_name, char const * class_name) -> boolean"""
    return _symb_table.SymbTable_is_layer_in_class(_self, layer_name, class_name)

def SymbTable_set_default_layers_class_name(_self, class_name):
    r"""SymbTable_set_default_layers_class_name(SymbTable_ptr _self, char const * class_name)"""
    return _symb_table.SymbTable_set_default_layers_class_name(_self, class_name)

def SymbTable_get_default_layers_class_name(_self):
    r"""SymbTable_get_default_layers_class_name(SymbTable_ptr const _self) -> char const *"""
    return _symb_table.SymbTable_get_default_layers_class_name(_self)

def SymbTable_get_var_type(_self, name):
    r"""SymbTable_get_var_type(SymbTable_ptr const _self, node_ptr const name) -> SymbType_ptr"""
    return _symb_table.SymbTable_get_var_type(_self, name)

def SymbTable_get_define_body(_self, name):
    r"""SymbTable_get_define_body(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_define_body(_self, name)

def SymbTable_get_function(_self, name):
    r"""SymbTable_get_function(SymbTable_ptr const _self, node_ptr const name) -> NFunction_ptr"""
    return _symb_table.SymbTable_get_function(_self, name)

def SymbTable_get_actual_parameter(_self, name):
    r"""SymbTable_get_actual_parameter(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_actual_parameter(_self, name)

def SymbTable_get_array_define_body(_self, name):
    r"""SymbTable_get_array_define_body(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_array_define_body(_self, name)

def SymbTable_get_variable_array_type(_self, name):
    r"""SymbTable_get_variable_array_type(SymbTable_ptr const _self, node_ptr const name) -> SymbType_ptr"""
    return _symb_table.SymbTable_get_variable_array_type(_self, name)

def SymbTable_get_define_flatten_body(_self, name):
    r"""SymbTable_get_define_flatten_body(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_define_flatten_body(_self, name)

def SymbTable_get_flatten_actual_parameter(_self, name):
    r"""SymbTable_get_flatten_actual_parameter(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_flatten_actual_parameter(_self, name)

def SymbTable_get_array_define_flatten_body(_self, name):
    r"""SymbTable_get_array_define_flatten_body(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_array_define_flatten_body(_self, name)

def SymbTable_get_define_context(_self, name):
    r"""SymbTable_get_define_context(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_define_context(_self, name)

def SymbTable_get_function_context(_self, name):
    r"""SymbTable_get_function_context(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_function_context(_self, name)

def SymbTable_get_actual_parameter_context(_self, name):
    r"""SymbTable_get_actual_parameter_context(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_actual_parameter_context(_self, name)

def SymbTable_get_array_define_context(_self, name):
    r"""SymbTable_get_array_define_context(SymbTable_ptr const _self, node_ptr const name) -> node_ptr"""
    return _symb_table.SymbTable_get_array_define_context(_self, name)

def SymbTable_get_symbol_category(_self, name):
    r"""SymbTable_get_symbol_category(SymbTable_ptr const _self, node_ptr const name) -> SymbCategory"""
    return _symb_table.SymbTable_get_symbol_category(_self, name)

def SymbTable_is_symbol_state_var(_self, name):
    r"""SymbTable_is_symbol_state_var(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_state_var(_self, name)

def SymbTable_is_symbol_frozen_var(_self, name):
    r"""SymbTable_is_symbol_frozen_var(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_frozen_var(_self, name)

def SymbTable_is_symbol_state_frozen_var(_self, name):
    r"""SymbTable_is_symbol_state_frozen_var(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_state_frozen_var(_self, name)

def SymbTable_is_symbol_input_var(_self, name):
    r"""SymbTable_is_symbol_input_var(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_input_var(_self, name)

def SymbTable_is_symbol_var(_self, name):
    r"""SymbTable_is_symbol_var(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_var(_self, name)

def SymbTable_is_symbol_bool_var(_self, name):
    r"""SymbTable_is_symbol_bool_var(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_bool_var(_self, name)

def SymbTable_is_symbol_declared(_self, name):
    r"""SymbTable_is_symbol_declared(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_declared(_self, name)

def SymbTable_is_symbol_define(_self, name):
    r"""SymbTable_is_symbol_define(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_define(_self, name)

def SymbTable_is_symbol_function(_self, name):
    r"""SymbTable_is_symbol_function(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_function(_self, name)

def SymbTable_is_symbol_parameter(_self, name):
    r"""SymbTable_is_symbol_parameter(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_parameter(_self, name)

def SymbTable_is_symbol_array_define(_self, name):
    r"""SymbTable_is_symbol_array_define(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_array_define(_self, name)

def SymbTable_is_symbol_variable_array(_self, name):
    r"""SymbTable_is_symbol_variable_array(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_variable_array(_self, name)

def SymbTable_is_symbol_constant(_self, name):
    r"""SymbTable_is_symbol_constant(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_symbol_constant(_self, name)

def SymbTable_is_var_finite(_self, name):
    r"""SymbTable_is_var_finite(SymbTable_ptr const _self, node_ptr const name) -> boolean"""
    return _symb_table.SymbTable_is_var_finite(_self, name)

def SymbTable_list_contains_input_var(_self, var_list):
    r"""SymbTable_list_contains_input_var(SymbTable_ptr const _self, NodeList_ptr const var_list) -> boolean"""
    return _symb_table.SymbTable_list_contains_input_var(_self, var_list)

def SymbTable_list_contains_state_frozen_var(_self, var_list):
    r"""SymbTable_list_contains_state_frozen_var(SymbTable_ptr const _self, NodeList_ptr const var_list) -> boolean"""
    return _symb_table.SymbTable_list_contains_state_frozen_var(_self, var_list)

def SymbTable_list_contains_undef_var(_self, var_list):
    r"""SymbTable_list_contains_undef_var(SymbTable_ptr const _self, NodeList_ptr const var_list) -> boolean"""
    return _symb_table.SymbTable_list_contains_undef_var(_self, var_list)

def SymbTable_contains_infinite_precision_variables(_self):
    r"""SymbTable_contains_infinite_precision_variables(SymbTable_ptr const _self) -> boolean"""
    return _symb_table.SymbTable_contains_infinite_precision_variables(_self)

def SymbTable_variable_get_layer(_self, name):
    r"""SymbTable_variable_get_layer(SymbTable_ptr _self, node_ptr name) -> SymbLayer_ptr"""
    return _symb_table.SymbTable_variable_get_layer(_self, name)

def SymbTable_define_get_layer(_self, name):
    r"""SymbTable_define_get_layer(SymbTable_ptr _self, node_ptr name) -> SymbLayer_ptr"""
    return _symb_table.SymbTable_define_get_layer(_self, name)

def SymbTable_symbol_get_layer(_self, name):
    r"""SymbTable_symbol_get_layer(SymbTable_ptr _self, node_ptr name) -> SymbLayer_ptr"""
    return _symb_table.SymbTable_symbol_get_layer(_self, name)

def SymbTable_function_get_layer(_self, name):
    r"""SymbTable_function_get_layer(SymbTable_ptr _self, node_ptr name) -> SymbLayer_ptr"""
    return _symb_table.SymbTable_function_get_layer(_self, name)

def SymbTable_get_determinization_var_name(_self):
    r"""SymbTable_get_determinization_var_name(SymbTable_ptr const _self) -> node_ptr"""
    return _symb_table.SymbTable_get_determinization_var_name(_self)

def SymbTable_get_fresh_symbol_name(_self, tplate):
    r"""SymbTable_get_fresh_symbol_name(SymbTable_ptr _self, char const * tplate) -> node_ptr"""
    return _symb_table.SymbTable_get_fresh_symbol_name(_self, tplate)

def SymbTable_get_simplification_hash(_self):
    r"""SymbTable_get_simplification_hash(SymbTable_ptr _self) -> hash_ptr"""
    return _symb_table.SymbTable_get_simplification_hash(_self)

def SymbTable_get_class_of_layer(_self, layer_name):
    r"""SymbTable_get_class_of_layer(SymbTable_ptr const _self, char const * layer_name) -> char const *"""
    return _symb_table.SymbTable_get_class_of_layer(_self, layer_name)

def SymbTable_resolve_symbol(_self, expr, context):
    r"""SymbTable_resolve_symbol(SymbTable_ptr _self, node_ptr expr, node_ptr context) -> ResolveSymbol_ptr"""
    return _symb_table.SymbTable_resolve_symbol(_self, expr, context)

def SymbTable_copy(_self, blacklist):
    r"""SymbTable_copy(SymbTable_ptr _self, Set_t blacklist) -> SymbTable_ptr"""
    return _symb_table.SymbTable_copy(_self, blacklist)
SYMB_TYPE_NONE = _symb_table.SYMB_TYPE_NONE

SYMB_TYPE_STATEMENT = _symb_table.SYMB_TYPE_STATEMENT

SYMB_TYPE_BOOLEAN = _symb_table.SYMB_TYPE_BOOLEAN

SYMB_TYPE_ENUM = _symb_table.SYMB_TYPE_ENUM

SYMB_TYPE_INTEGER = _symb_table.SYMB_TYPE_INTEGER

SYMB_TYPE_REAL = _symb_table.SYMB_TYPE_REAL

SYMB_TYPE_SIGNED_WORD = _symb_table.SYMB_TYPE_SIGNED_WORD

SYMB_TYPE_UNSIGNED_WORD = _symb_table.SYMB_TYPE_UNSIGNED_WORD

SYMB_TYPE_WORDARRAY = _symb_table.SYMB_TYPE_WORDARRAY

SYMB_TYPE_ARRAY = _symb_table.SYMB_TYPE_ARRAY

SYMB_TYPE_STRING = _symb_table.SYMB_TYPE_STRING

SYMB_TYPE_SET_BOOL = _symb_table.SYMB_TYPE_SET_BOOL

SYMB_TYPE_SET_INT = _symb_table.SYMB_TYPE_SET_INT

SYMB_TYPE_SET_SYMB = _symb_table.SYMB_TYPE_SET_SYMB

SYMB_TYPE_SET_INT_SYMB = _symb_table.SYMB_TYPE_SET_INT_SYMB

SYMB_TYPE_ERROR = _symb_table.SYMB_TYPE_ERROR

ENUM_TYPE_PURE_INT = _symb_table.ENUM_TYPE_PURE_INT

ENUM_TYPE_PURE_SYMBOLIC = _symb_table.ENUM_TYPE_PURE_SYMBOLIC

ENUM_TYPE_INT_SYMBOLIC = _symb_table.ENUM_TYPE_INT_SYMBOLIC


def SymbType_create(tag, body):
    r"""SymbType_create(SymbTypeTag tag, node_ptr body) -> SymbType_ptr"""
    return _symb_table.SymbType_create(tag, body)

def SymbType_create_array(subtype, lower_bound, upper_bound):
    r"""SymbType_create_array(SymbType_ptr subtype, int lower_bound, int upper_bound) -> SymbType_ptr"""
    return _symb_table.SymbType_create_array(subtype, lower_bound, upper_bound)

def SymbType_destroy(_self):
    r"""SymbType_destroy(SymbType_ptr _self)"""
    return _symb_table.SymbType_destroy(_self)

def SymbType_copy(_self):
    r"""SymbType_copy(SymbType_ptr const _self) -> SymbType_ptr"""
    return _symb_table.SymbType_copy(_self)

def SymbType_get_tag(_self):
    r"""SymbType_get_tag(SymbType_ptr const _self) -> SymbTypeTag"""
    return _symb_table.SymbType_get_tag(_self)

def SymbType_is_enum(_self):
    r"""SymbType_is_enum(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_enum(_self)

def SymbType_is_boolean(_self):
    r"""SymbType_is_boolean(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_boolean(_self)

def SymbType_is_integer(_self):
    r"""SymbType_is_integer(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_integer(_self)

def SymbType_is_real(_self):
    r"""SymbType_is_real(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_real(_self)

def SymbType_is_pure_int_enum(_self):
    r"""SymbType_is_pure_int_enum(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_pure_int_enum(_self)

def SymbType_is_pure_symbolic_enum(_self):
    r"""SymbType_is_pure_symbolic_enum(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_pure_symbolic_enum(_self)

def SymbType_is_int_symbolic_enum(_self):
    r"""SymbType_is_int_symbolic_enum(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_int_symbolic_enum(_self)

def SymbType_is_word_1(_self):
    r"""SymbType_is_word_1(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_word_1(_self)

def SymbType_is_unsigned_word(_self):
    r"""SymbType_is_unsigned_word(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_unsigned_word(_self)

def SymbType_is_signed_word(_self):
    r"""SymbType_is_signed_word(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_signed_word(_self)

def SymbType_is_word(_self):
    r"""SymbType_is_word(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_word(_self)

def SymbType_is_set(_self):
    r"""SymbType_is_set(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_set(_self)

def SymbType_is_string(_self):
    r"""SymbType_is_string(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_string(_self)

def SymbType_is_error(_self):
    r"""SymbType_is_error(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_error(_self)

def SymbType_is_statement(_self):
    r"""SymbType_is_statement(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_statement(_self)

def SymbType_is_infinite_precision(_self):
    r"""SymbType_is_infinite_precision(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_infinite_precision(_self)

def SymbType_is_array(_self):
    r"""SymbType_is_array(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_array(_self)

def SymbType_is_wordarray(_self):
    r"""SymbType_is_wordarray(SymbType_ptr const _self) -> boolean"""
    return _symb_table.SymbType_is_wordarray(_self)

def SymbType_calculate_type_size(_self):
    r"""SymbType_calculate_type_size(SymbType_ptr const _self) -> int"""
    return _symb_table.SymbType_calculate_type_size(_self)

def SymbType_generate_all_word_values(_self):
    r"""SymbType_generate_all_word_values(SymbType_ptr const _self) -> node_ptr"""
    return _symb_table.SymbType_generate_all_word_values(_self)

def SymbType_get_word_width(_self):
    r"""SymbType_get_word_width(SymbType_ptr const _self) -> int"""
    return _symb_table.SymbType_get_word_width(_self)

def SymbType_get_word_line_number(_self):
    r"""SymbType_get_word_line_number(SymbType_ptr const _self) -> int"""
    return _symb_table.SymbType_get_word_line_number(_self)

def SymbType_get_wordarray_awidth(_self):
    r"""SymbType_get_wordarray_awidth(SymbType_ptr const _self) -> int"""
    return _symb_table.SymbType_get_wordarray_awidth(_self)

def SymbType_get_wordarray_vwidth(_self):
    r"""SymbType_get_wordarray_vwidth(SymbType_ptr const _self) -> int"""
    return _symb_table.SymbType_get_wordarray_vwidth(_self)

def SymbType_get_enum_type_values(_self):
    r"""SymbType_get_enum_type_values(SymbType_ptr const _self) -> node_ptr"""
    return _symb_table.SymbType_get_enum_type_values(_self)

def SymbType_get_array_subtype(_self):
    r"""SymbType_get_array_subtype(SymbType_ptr const _self) -> SymbType_ptr"""
    return _symb_table.SymbType_get_array_subtype(_self)

def SymbType_get_array_lower_bound(_self):
    r"""SymbType_get_array_lower_bound(SymbType_ptr const _self) -> int"""
    return _symb_table.SymbType_get_array_lower_bound(_self)

def SymbType_get_array_upper_bound(_self):
    r"""SymbType_get_array_upper_bound(SymbType_ptr const _self) -> int"""
    return _symb_table.SymbType_get_array_upper_bound(_self)

def SymbType_print(_self, output_stream):
    r"""SymbType_print(SymbType_ptr const _self, FILE * output_stream)"""
    return _symb_table.SymbType_print(_self, output_stream)

def SymbType_sprint(_self):
    r"""SymbType_sprint(SymbType_ptr const _self) -> char *"""
    return _symb_table.SymbType_sprint(_self)

def SymbType_is_back_comp(type):
    r"""SymbType_is_back_comp(SymbType_ptr const type) -> boolean"""
    return _symb_table.SymbType_is_back_comp(type)

def SymbType_get_greater(type1, type2):
    r"""SymbType_get_greater(SymbType_ptr const type1, SymbType_ptr const type2) -> SymbType_ptr"""
    return _symb_table.SymbType_get_greater(type1, type2)

def SymbType_make_set_type(_self):
    r"""SymbType_make_set_type(SymbType_ptr const _self) -> SymbType_ptr"""
    return _symb_table.SymbType_make_set_type(_self)

def SymbType_make_from_set_type(_self):
    r"""SymbType_make_from_set_type(SymbType_ptr const _self) -> SymbType_ptr"""
    return _symb_table.SymbType_make_from_set_type(_self)

def SymbType_make_memory_shared(_self):
    r"""SymbType_make_memory_shared(SymbType_ptr const _self) -> SymbType_ptr"""
    return _symb_table.SymbType_make_memory_shared(_self)

def SymbType_convert_right_to_left(leftType, rightType):
    r"""SymbType_convert_right_to_left(SymbType_ptr leftType, SymbType_ptr rightType) -> SymbType_ptr"""
    return _symb_table.SymbType_convert_right_to_left(leftType, rightType)

def SymbType_get_minimal_common(type1, type2):
    r"""SymbType_get_minimal_common(SymbType_ptr type1, SymbType_ptr type2) -> SymbType_ptr"""
    return _symb_table.SymbType_get_minimal_common(type1, type2)

def SymbType_is_memory_shared(_self):
    r"""SymbType_is_memory_shared(SymbType_ptr _self) -> boolean"""
    return _symb_table.SymbType_is_memory_shared(_self)

def SymbType_equals(_self, oth):
    r"""SymbType_equals(SymbType_ptr _self, SymbType_ptr oth) -> boolean"""
    return _symb_table.SymbType_equals(_self, oth)

def gen_iter(_self, mask):
    r"""gen_iter(SymbLayer_ptr const _self, unsigned int mask) -> SymbLayerIter"""
    return _symb_table.gen_iter(_self, mask)

def node2layer(node):
    r"""node2layer(node_ptr node) -> SymbLayer_ptr"""
    return _symb_table.node2layer(node)

