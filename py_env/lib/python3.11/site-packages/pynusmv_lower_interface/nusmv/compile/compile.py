# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _compile
else:
    import _compile

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _compile.PRIuPTR

PRIdPTR = _compile.PRIdPTR

LLU = _compile.LLU

LLO = _compile.LLO

LLX = _compile.LLX

false = _compile.false

true = _compile.true

OUTCOME_GENERIC_ERROR = _compile.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _compile.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _compile.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _compile.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _compile.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _compile.OUTCOME_SUCCESS

State_Variables_Instantiation_Mode = _compile.State_Variables_Instantiation_Mode

Frozen_Variables_Instantiation_Mode = _compile.Frozen_Variables_Instantiation_Mode

Input_Variables_Instantiation_Mode = _compile.Input_Variables_Instantiation_Mode

ST_Notype = _compile.ST_Notype

ST_Ctl = _compile.ST_Ctl

ST_Ltl = _compile.ST_Ltl

ST_Invar = _compile.ST_Invar

ST_Compute = _compile.ST_Compute

SS_Nostatus = _compile.SS_Nostatus

SS_Unchecked = _compile.SS_Unchecked

SS_True = _compile.SS_True

SS_False = _compile.SS_False

SS_Wrong = _compile.SS_Wrong

SS_Number = _compile.SS_Number

MODEL_LAYER_NAME = _compile.MODEL_LAYER_NAME

DETERM_LAYER_NAME = _compile.DETERM_LAYER_NAME

INLINING_LAYER_NAME = _compile.INLINING_LAYER_NAME

PROCESS_SELECTOR_VAR_NAME = _compile.PROCESS_SELECTOR_VAR_NAME

RUNNING_SYMBOL = _compile.RUNNING_SYMBOL

MODEL_LAYERS_CLASS = _compile.MODEL_LAYERS_CLASS

ARTIFACTS_LAYERS_CLASS = _compile.ARTIFACTS_LAYERS_CLASS


def Compile_init():
    r"""Compile_init()"""
    return _compile.Compile_init()

def Compile_init_cmd():
    r"""Compile_init_cmd()"""
    return _compile.Compile_init_cmd()

def Compile_quit():
    r"""Compile_quit()"""
    return _compile.Compile_quit()

def CompileFlatten_init_flattener():
    r"""CompileFlatten_init_flattener()"""
    return _compile.CompileFlatten_init_flattener()

def CompileFlatten_quit_flattener():
    r"""CompileFlatten_quit_flattener()"""
    return _compile.CompileFlatten_quit_flattener()

def CompileFlatten_hash_module(parsed_module):
    r"""CompileFlatten_hash_module(node_ptr parsed_module)"""
    return _compile.CompileFlatten_hash_module(parsed_module)

def Compile_FlattenHierarchy(symb_table, layer, arg3, arg4, arg5, create_process_variable, calc_vars_constr, hrc_result):
    r"""Compile_FlattenHierarchy(SymbTable_ptr const symb_table, SymbLayer_ptr layer, node_ptr arg3, node_ptr arg4, node_ptr arg5, boolean create_process_variable, boolean calc_vars_constr, HrcNode_ptr hrc_result) -> FlatHierarchy_ptr"""
    return _compile.Compile_FlattenHierarchy(symb_table, layer, arg3, arg4, arg5, create_process_variable, calc_vars_constr, hrc_result)

def Compile_CheckAssigns(arg1, arg2):
    r"""Compile_CheckAssigns(SymbTable_ptr const arg1, node_ptr arg2)"""
    return _compile.Compile_CheckAssigns(arg1, arg2)

def Compile_check_case(expr):
    r"""Compile_check_case(node_ptr expr)"""
    return _compile.Compile_check_case(expr)

def Compile_check_next(st, expr, context, is_one_next_allowed):
    r"""Compile_check_next(SymbTable_ptr const st, node_ptr expr, node_ptr context, boolean is_one_next_allowed)"""
    return _compile.Compile_check_next(st, expr, context, is_one_next_allowed)

def Compile_check_input_next(st, expr, context):
    r"""Compile_check_input_next(SymbTable_ptr const st, node_ptr expr, node_ptr context)"""
    return _compile.Compile_check_input_next(st, expr, context)

def CompileFlatten_concat_contexts(ctx1, ctx2):
    r"""CompileFlatten_concat_contexts(node_ptr ctx1, node_ptr ctx2) -> node_ptr"""
    return _compile.CompileFlatten_concat_contexts(ctx1, ctx2)

def CompileFlatten_expand_range(a, b):
    r"""CompileFlatten_expand_range(int a, int b) -> node_ptr"""
    return _compile.CompileFlatten_expand_range(a, b)

def CompileFlatten_resolve_number(symb_table, n, context):
    r"""CompileFlatten_resolve_number(SymbTable_ptr symb_table, node_ptr n, node_ptr context) -> node_ptr"""
    return _compile.CompileFlatten_resolve_number(symb_table, n, context)

def CompileFlatten_resolve_define_chains(symb_table, expr, context):
    r"""CompileFlatten_resolve_define_chains(SymbTable_ptr const symb_table, node_ptr expr, node_ptr context) -> node_ptr"""
    return _compile.CompileFlatten_resolve_define_chains(symb_table, expr, context)

def sym_intern(arg1):
    r"""sym_intern(char * arg1) -> node_ptr"""
    return _compile.sym_intern(arg1)

def insert_module_hash(x, y):
    r"""insert_module_hash(node_ptr x, node_ptr y)"""
    return _compile.insert_module_hash(x, y)

def lookup_module_hash(x):
    r"""lookup_module_hash(node_ptr x) -> node_ptr"""
    return _compile.lookup_module_hash(x)

def compileCheckForInputVars(arg1, arg2, arg3, arg4, arg5, hierarchy):
    r"""compileCheckForInputVars(SymbTable_ptr arg1, node_ptr arg2, node_ptr arg3, node_ptr arg4, node_ptr arg5, FlatHierarchy_ptr hierarchy)"""
    return _compile.compileCheckForInputVars(arg1, arg2, arg3, arg4, arg5, hierarchy)

def cmp_struct_get_read_model(cmp):
    r"""cmp_struct_get_read_model(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_read_model(cmp)

def cmp_struct_set_read_model(cmp):
    r"""cmp_struct_set_read_model(cmp_struct cmp)"""
    return _compile.cmp_struct_set_read_model(cmp)

def cmp_struct_unset_read_model(cmp):
    r"""cmp_struct_unset_read_model(cmp_struct cmp)"""
    return _compile.cmp_struct_unset_read_model(cmp)

def cmp_struct_get_hrc_built(cmp):
    r"""cmp_struct_get_hrc_built(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_hrc_built(cmp)

def cmp_struct_set_hrc_built(cmp):
    r"""cmp_struct_set_hrc_built(cmp_struct cmp)"""
    return _compile.cmp_struct_set_hrc_built(cmp)

def cmp_struct_get_flatten_hrc(cmp):
    r"""cmp_struct_get_flatten_hrc(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_flatten_hrc(cmp)

def cmp_struct_set_flatten_hrc(cmp):
    r"""cmp_struct_set_flatten_hrc(cmp_struct cmp)"""
    return _compile.cmp_struct_set_flatten_hrc(cmp)

def cmp_struct_get_encode_variables(cmp):
    r"""cmp_struct_get_encode_variables(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_encode_variables(cmp)

def cmp_struct_set_encode_variables(cmp):
    r"""cmp_struct_set_encode_variables(cmp_struct cmp)"""
    return _compile.cmp_struct_set_encode_variables(cmp)

def cmp_struct_get_process_selector(cmp):
    r"""cmp_struct_get_process_selector(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_process_selector(cmp)

def cmp_struct_set_process_selector(cmp):
    r"""cmp_struct_set_process_selector(cmp_struct cmp)"""
    return _compile.cmp_struct_set_process_selector(cmp)

def cmp_struct_get_build_frames(cmp):
    r"""cmp_struct_get_build_frames(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_build_frames(cmp)

def cmp_struct_set_build_frames(cmp):
    r"""cmp_struct_set_build_frames(cmp_struct cmp)"""
    return _compile.cmp_struct_set_build_frames(cmp)

def cmp_struct_get_build_model(cmp):
    r"""cmp_struct_get_build_model(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_build_model(cmp)

def cmp_struct_set_build_model(cmp):
    r"""cmp_struct_set_build_model(cmp_struct cmp)"""
    return _compile.cmp_struct_set_build_model(cmp)

def cmp_struct_get_build_flat_model(cmp):
    r"""cmp_struct_get_build_flat_model(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_build_flat_model(cmp)

def cmp_struct_set_build_flat_model(cmp):
    r"""cmp_struct_set_build_flat_model(cmp_struct cmp)"""
    return _compile.cmp_struct_set_build_flat_model(cmp)

def cmp_struct_get_build_bool_model(cmp):
    r"""cmp_struct_get_build_bool_model(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_build_bool_model(cmp)

def cmp_struct_set_build_bool_model(cmp):
    r"""cmp_struct_set_build_bool_model(cmp_struct cmp)"""
    return _compile.cmp_struct_set_build_bool_model(cmp)

def cmp_struct_get_fairness(cmp):
    r"""cmp_struct_get_fairness(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_fairness(cmp)

def cmp_struct_set_fairness(cmp):
    r"""cmp_struct_set_fairness(cmp_struct cmp)"""
    return _compile.cmp_struct_set_fairness(cmp)

def cmp_struct_get_coi(cmp):
    r"""cmp_struct_get_coi(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_coi(cmp)

def cmp_struct_set_coi(cmp):
    r"""cmp_struct_set_coi(cmp_struct cmp)"""
    return _compile.cmp_struct_set_coi(cmp)

def cmp_struct_get_bmc_init(cmp):
    r"""cmp_struct_get_bmc_init(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_bmc_init(cmp)

def cmp_struct_set_bmc_init(cmp):
    r"""cmp_struct_set_bmc_init(cmp_struct cmp)"""
    return _compile.cmp_struct_set_bmc_init(cmp)

def cmp_struct_unset_bmc_init(cmp):
    r"""cmp_struct_unset_bmc_init(cmp_struct cmp)"""
    return _compile.cmp_struct_unset_bmc_init(cmp)

def cmp_struct_get_bmc_setup(cmp):
    r"""cmp_struct_get_bmc_setup(cmp_struct cmp) -> int"""
    return _compile.cmp_struct_get_bmc_setup(cmp)

def cmp_struct_set_bmc_setup(cmp):
    r"""cmp_struct_set_bmc_setup(cmp_struct cmp)"""
    return _compile.cmp_struct_set_bmc_setup(cmp)

def cmp_struct_unset_bmc_setup(cmp):
    r"""cmp_struct_unset_bmc_setup(cmp_struct cmp)"""
    return _compile.cmp_struct_unset_bmc_setup(cmp)

def Compile_FlattenSexp(symb_table, arg2, arg3):
    r"""Compile_FlattenSexp(SymbTable_ptr const symb_table, node_ptr arg2, node_ptr arg3) -> node_ptr"""
    return _compile.Compile_FlattenSexp(symb_table, arg2, arg3)

def Compile_FlattenSexpExpandDefine(symb_table, arg2, arg3):
    r"""Compile_FlattenSexpExpandDefine(SymbTable_ptr const symb_table, node_ptr arg2, node_ptr arg3) -> node_ptr"""
    return _compile.Compile_FlattenSexpExpandDefine(symb_table, arg2, arg3)

def Compile_WriteFlattenModel(out, st, layer_names, fsm_name, hierarchy, force_flattening):
    r"""Compile_WriteFlattenModel(FILE * out, SymbTable_ptr const st, array_t const * layer_names, char const * fsm_name, FlatHierarchy_ptr hierarchy, boolean force_flattening)"""
    return _compile.Compile_WriteFlattenModel(out, st, layer_names, fsm_name, hierarchy, force_flattening)

def Compile_WriteRestrictedFlattenModel(out, st, layer_names, fsm_name, hierarchy, force_flattening):
    r"""Compile_WriteRestrictedFlattenModel(FILE * out, SymbTable_ptr const st, array_t const * layer_names, char const * fsm_name, FlatHierarchy_ptr hierarchy, boolean force_flattening)"""
    return _compile.Compile_WriteRestrictedFlattenModel(out, st, layer_names, fsm_name, hierarchy, force_flattening)

def Compile_WriteObfuscatedFlattenModel(out, st, layer_names, fsm_name, hierarchy, print_map, force_flattening):
    r"""Compile_WriteObfuscatedFlattenModel(FILE * out, SymbTable_ptr const st, array_t const * layer_names, char const * fsm_name, FlatHierarchy_ptr hierarchy, boolean print_map, boolean force_flattening)"""
    return _compile.Compile_WriteObfuscatedFlattenModel(out, st, layer_names, fsm_name, hierarchy, print_map, force_flattening)

def Compile_WriteFlattenFsm(out, symb_table, layer_names, fsm_name, hierarchy, force_flattening):
    r"""Compile_WriteFlattenFsm(FILE * out, SymbTable_ptr const symb_table, array_t const * layer_names, char const * fsm_name, FlatHierarchy_ptr hierarchy, boolean force_flattening)"""
    return _compile.Compile_WriteFlattenFsm(out, symb_table, layer_names, fsm_name, hierarchy, force_flattening)

def Compile_WriteFlattenModel_udg(out, st, layer_names, fsm_name, hierarchy):
    r"""Compile_WriteFlattenModel_udg(FILE * out, SymbTable_ptr const st, array_t const * layer_names, char const * fsm_name, FlatHierarchy_ptr hierarchy)"""
    return _compile.Compile_WriteFlattenModel_udg(out, st, layer_names, fsm_name, hierarchy)

def Compile_WriteFlattenSpecs(out, st, hierarchy, force_flattening):
    r"""Compile_WriteFlattenSpecs(FILE * out, SymbTable_ptr const st, FlatHierarchy_ptr hierarchy, boolean force_flattening)"""
    return _compile.Compile_WriteFlattenSpecs(out, st, hierarchy, force_flattening)

def Compile_WriteBoolModel(out, enc, layers, fsm_name, bool_sexp_fsm, force_flattening):
    r"""Compile_WriteBoolModel(FILE * out, BddEnc_ptr enc, NodeList_ptr layers, char const * fsm_name, BoolSexpFsm_ptr bool_sexp_fsm, boolean force_flattening)"""
    return _compile.Compile_WriteBoolModel(out, enc, layers, fsm_name, bool_sexp_fsm, force_flattening)

def Compile_WriteBoolFsm(out, symb_table, layers, fsm_name, bool_sexp_fsm, force_flattening):
    r"""Compile_WriteBoolFsm(FILE * out, SymbTable_ptr const symb_table, NodeList_ptr layers, char const * fsm_name, BoolSexpFsm_ptr bool_sexp_fsm, boolean force_flattening)"""
    return _compile.Compile_WriteBoolFsm(out, symb_table, layers, fsm_name, bool_sexp_fsm, force_flattening)

def Compile_WriteBoolSpecs(out, enc, hierarchy):
    r"""Compile_WriteBoolSpecs(FILE * out, BddEnc_ptr enc, FlatHierarchy_ptr hierarchy)"""
    return _compile.Compile_WriteBoolSpecs(out, enc, hierarchy)

def Compile_is_expr_booleanizable(st, expr, word_booleanizable, cache):
    r"""Compile_is_expr_booleanizable(SymbTable_ptr const st, node_ptr expr, boolean word_booleanizable, hash_ptr cache) -> boolean"""
    return _compile.Compile_is_expr_booleanizable(st, expr, word_booleanizable, cache)

def Compile_expr2bexpr(enc, det_layer, expr):
    r"""Compile_expr2bexpr(BddEnc_ptr enc, SymbLayer_ptr det_layer, Expr_ptr expr) -> Expr_ptr"""
    return _compile.Compile_expr2bexpr(enc, det_layer, expr)

def Compile_detexpr2bexpr(enc, expr):
    r"""Compile_detexpr2bexpr(BddEnc_ptr enc, Expr_ptr expr) -> Expr_ptr"""
    return _compile.Compile_detexpr2bexpr(enc, expr)

def Compile_detexpr2bexpr_list(enc, expr):
    r"""Compile_detexpr2bexpr_list(BddEnc_ptr enc, Expr_ptr expr) -> Expr_ptr"""
    return _compile.Compile_detexpr2bexpr_list(enc, expr)

def Compile_cleanup_booleanizer_cache_about(st, symbs):
    r"""Compile_cleanup_booleanizer_cache_about(SymbTable_ptr st, NodeList_ptr symbs)"""
    return _compile.Compile_cleanup_booleanizer_cache_about(st, symbs)

def Formula_GetDependencies(arg1, arg2, arg3):
    r"""Formula_GetDependencies(SymbTable_ptr const arg1, node_ptr arg2, node_ptr arg3) -> Set_t"""
    return _compile.Formula_GetDependencies(arg1, arg2, arg3)

def Formula_GetDependenciesByType(arg1, arg2, arg3, arg4, arg5):
    r"""Formula_GetDependenciesByType(SymbTable_ptr const arg1, node_ptr arg2, node_ptr arg3, SymbFilterType arg4, boolean arg5) -> Set_t"""
    return _compile.Formula_GetDependenciesByType(arg1, arg2, arg3, arg4, arg5)

def Formula_GetConstants(symb_table, formula, context):
    r"""Formula_GetConstants(SymbTable_ptr const symb_table, node_ptr formula, node_ptr context) -> Set_t"""
    return _compile.Formula_GetConstants(symb_table, formula, context)

def Formulae_GetDependencies(arg1, arg2, arg3, arg4):
    r"""Formulae_GetDependencies(SymbTable_ptr const arg1, node_ptr arg2, node_ptr arg3, node_ptr arg4) -> Set_t"""
    return _compile.Formulae_GetDependencies(arg1, arg2, arg3, arg4)

def ComputeCOIFixpoint(symb_table, hierarchy, expression, steps, reached_fixpoint):
    r"""ComputeCOIFixpoint(SymbTable_ptr const symb_table, FlatHierarchy_ptr const hierarchy, Expr_ptr const expression, int const steps, boolean * reached_fixpoint) -> Set_t"""
    return _compile.ComputeCOIFixpoint(symb_table, hierarchy, expression, steps, reached_fixpoint)

def ComputeCOI(arg1, arg2):
    r"""ComputeCOI(SymbTable_ptr const arg1, Set_t arg2) -> Set_t"""
    return _compile.ComputeCOI(arg1, arg2)

def set_definition_mode_to_get():
    r"""set_definition_mode_to_get()"""
    return _compile.set_definition_mode_to_get()

def set_definition_mode_to_expand():
    r"""set_definition_mode_to_expand()"""
    return _compile.set_definition_mode_to_expand()

def definition_mode_is_expand():
    r"""definition_mode_is_expand() -> int"""
    return _compile.definition_mode_is_expand()

def Flatten_GetDefinition(symb_table, atom):
    r"""Flatten_GetDefinition(SymbTable_ptr const symb_table, node_ptr atom) -> node_ptr"""
    return _compile.Flatten_GetDefinition(symb_table, atom)

def Flatten_remove_symbol_info(name):
    r"""Flatten_remove_symbol_info(node_ptr name)"""
    return _compile.Flatten_remove_symbol_info(name)

def Compile_get_global_symb_table():
    r"""Compile_get_global_symb_table() -> SymbTable_ptr"""
    return _compile.Compile_get_global_symb_table()

def Compile_get_global_predicate_normaliser():
    r"""Compile_get_global_predicate_normaliser() -> PredicateNormaliser_ptr"""
    return _compile.Compile_get_global_predicate_normaliser()

def CompileFlatten_normalise_value_list(old_value_list):
    r"""CompileFlatten_normalise_value_list(node_ptr old_value_list) -> node_ptr"""
    return _compile.CompileFlatten_normalise_value_list(old_value_list)

def Compile_get_global_fsm_builder():
    r"""Compile_get_global_fsm_builder() -> FsmBuilder_ptr"""
    return _compile.Compile_get_global_fsm_builder()

def Compile_pop_distrib_ops(prop):
    r"""Compile_pop_distrib_ops(node_ptr prop) -> node_ptr"""
    return _compile.Compile_pop_distrib_ops(prop)

def Compile_make_sorted_vars_list_from_order(st, vars, vars_order):
    r"""Compile_make_sorted_vars_list_from_order(SymbTable_ptr const st, NodeList_ptr const vars, NodeList_ptr const vars_order) -> Set_t"""
    return _compile.Compile_make_sorted_vars_list_from_order(st, vars, vars_order)

def Compile_check_if_flattening_was_built(err):
    r"""Compile_check_if_flattening_was_built(FILE * err) -> int"""
    return _compile.Compile_check_if_flattening_was_built(err)

def Compile_check_if_encoding_was_built(err):
    r"""Compile_check_if_encoding_was_built(FILE * err) -> int"""
    return _compile.Compile_check_if_encoding_was_built(err)

def Compile_check_if_flat_model_was_built(err, forced):
    r"""Compile_check_if_flat_model_was_built(FILE * err, boolean forced) -> int"""
    return _compile.Compile_check_if_flat_model_was_built(err, forced)

def Compile_check_if_bool_model_was_built(err, forced):
    r"""Compile_check_if_bool_model_was_built(FILE * err, boolean forced) -> int"""
    return _compile.Compile_check_if_bool_model_was_built(err, forced)

def Compile_check_if_model_was_built(err, forced):
    r"""Compile_check_if_model_was_built(FILE * err, boolean forced) -> int"""
    return _compile.Compile_check_if_model_was_built(err, forced)

def Compile_InstantiateType(st, layer, name, type, context):
    r"""Compile_InstantiateType(SymbTable_ptr st, SymbLayer_ptr layer, node_ptr name, node_ptr type, node_ptr context) -> SymbType_ptr"""
    return _compile.Compile_InstantiateType(st, layer, name, type, context)

def Compile_DeclareVariable(symb_table, layer, name, type, context, mode):
    r"""Compile_DeclareVariable(SymbTable_ptr symb_table, SymbLayer_ptr layer, node_ptr name, SymbType_ptr type, node_ptr context, Instantiation_Variables_Mode_Type mode) -> boolean"""
    return _compile.Compile_DeclareVariable(symb_table, layer, name, type, context, mode)

def Compile_make_dag_info(expr, hash):
    r"""Compile_make_dag_info(node_ptr expr, hash_ptr hash) -> node_ptr"""
    return _compile.Compile_make_dag_info(expr, hash)

def Compile_convert_to_dag(symb_table, expr, hash, defines):
    r"""Compile_convert_to_dag(SymbTable_ptr symb_table, node_ptr expr, hash_ptr hash, hash_ptr defines) -> node_ptr"""
    return _compile.Compile_convert_to_dag(symb_table, expr, hash, defines)

def Compile_write_dag_defines(out, defines):
    r"""Compile_write_dag_defines(FILE * out, hash_ptr defines)"""
    return _compile.Compile_write_dag_defines(out, defines)

def Compile_destroy_dag_info(dag_info, defines):
    r"""Compile_destroy_dag_info(hash_ptr dag_info, hash_ptr defines)"""
    return _compile.Compile_destroy_dag_info(dag_info, defines)

def Compile_print_array_define(out, n):
    r"""Compile_print_array_define(FILE * out, node_ptr const n)"""
    return _compile.Compile_print_array_define(out, n)

def Compile_get_obfuscation_map(symb_table):
    r"""Compile_get_obfuscation_map(SymbTable_ptr const symb_table) -> hash_ptr"""
    return _compile.Compile_get_obfuscation_map(symb_table)

def Compile_obfuscate_expression(symb_table, expr, obfuscation_map):
    r"""Compile_obfuscate_expression(SymbTable_ptr const symb_table, node_ptr expr, hash_ptr const obfuscation_map) -> node_ptr"""
    return _compile.Compile_obfuscate_expression(symb_table, expr, obfuscation_map)

def FlatHierarchy_create(st):
    r"""FlatHierarchy_create(SymbTable_ptr st) -> FlatHierarchy_ptr"""
    return _compile.FlatHierarchy_create(st)

def FlatHierarchy_create_from_members(st, init, invar, trans, input, justice, compassion):
    r"""FlatHierarchy_create_from_members(SymbTable_ptr st, node_ptr init, node_ptr invar, node_ptr trans, node_ptr input, node_ptr justice, node_ptr compassion) -> FlatHierarchy_ptr"""
    return _compile.FlatHierarchy_create_from_members(st, init, invar, trans, input, justice, compassion)

def FlatHierarchy_destroy(_self):
    r"""FlatHierarchy_destroy(FlatHierarchy_ptr _self)"""
    return _compile.FlatHierarchy_destroy(_self)

def FlatHierarchy_copy(_self):
    r"""FlatHierarchy_copy(FlatHierarchy_ptr const _self) -> FlatHierarchy_ptr"""
    return _compile.FlatHierarchy_copy(_self)

def FlatHierarchy_mergeinto(_self, other):
    r"""FlatHierarchy_mergeinto(FlatHierarchy_ptr _self, FlatHierarchy_ptr const other)"""
    return _compile.FlatHierarchy_mergeinto(_self, other)

def FlatHierarchy_get_symb_table(_self):
    r"""FlatHierarchy_get_symb_table(FlatHierarchy_ptr const _self) -> SymbTable_ptr"""
    return _compile.FlatHierarchy_get_symb_table(_self)

def FlatHierarchy_get_init(cmp):
    r"""FlatHierarchy_get_init(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_init(cmp)

def FlatHierarchy_set_init(cmp, n):
    r"""FlatHierarchy_set_init(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_init(cmp, n)

def FlatHierarchy_get_invar(cmp):
    r"""FlatHierarchy_get_invar(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_invar(cmp)

def FlatHierarchy_set_invar(cmp, n):
    r"""FlatHierarchy_set_invar(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_invar(cmp, n)

def FlatHierarchy_get_trans(cmp):
    r"""FlatHierarchy_get_trans(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_trans(cmp)

def FlatHierarchy_set_trans(cmp, n):
    r"""FlatHierarchy_set_trans(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_trans(cmp, n)

def FlatHierarchy_get_input(cmp):
    r"""FlatHierarchy_get_input(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_input(cmp)

def FlatHierarchy_set_input(cmp, n):
    r"""FlatHierarchy_set_input(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_input(cmp, n)

def FlatHierarchy_get_assign(cmp):
    r"""FlatHierarchy_get_assign(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_assign(cmp)

def FlatHierarchy_set_assign(cmp, n):
    r"""FlatHierarchy_set_assign(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_assign(cmp, n)

def FlatHierarchy_get_justice(cmp):
    r"""FlatHierarchy_get_justice(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_justice(cmp)

def FlatHierarchy_set_justice(cmp, n):
    r"""FlatHierarchy_set_justice(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_justice(cmp, n)

def FlatHierarchy_get_compassion(cmp):
    r"""FlatHierarchy_get_compassion(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_compassion(cmp)

def FlatHierarchy_set_compassion(cmp, n):
    r"""FlatHierarchy_set_compassion(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_compassion(cmp, n)

def FlatHierarchy_add_property_name(cmp, name):
    r"""FlatHierarchy_add_property_name(FlatHierarchy_ptr cmp, node_ptr name) -> boolean"""
    return _compile.FlatHierarchy_add_property_name(cmp, name)

def FlatHierarchy_get_spec(cmp):
    r"""FlatHierarchy_get_spec(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_spec(cmp)

def FlatHierarchy_set_spec(cmp, n):
    r"""FlatHierarchy_set_spec(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_spec(cmp, n)

def FlatHierarchy_get_ltlspec(cmp):
    r"""FlatHierarchy_get_ltlspec(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_ltlspec(cmp)

def FlatHierarchy_set_ltlspec(cmp, n):
    r"""FlatHierarchy_set_ltlspec(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_ltlspec(cmp, n)

def FlatHierarchy_get_invarspec(cmp):
    r"""FlatHierarchy_get_invarspec(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_invarspec(cmp)

def FlatHierarchy_set_invarspec(cmp, n):
    r"""FlatHierarchy_set_invarspec(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_invarspec(cmp, n)

def FlatHierarchy_get_pslspec(cmp):
    r"""FlatHierarchy_get_pslspec(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_pslspec(cmp)

def FlatHierarchy_set_pslspec(cmp, n):
    r"""FlatHierarchy_set_pslspec(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_pslspec(cmp, n)

def FlatHierarchy_get_compute(cmp):
    r"""FlatHierarchy_get_compute(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_compute(cmp)

def FlatHierarchy_set_compute(cmp, n):
    r"""FlatHierarchy_set_compute(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_compute(cmp, n)

def FlatHierarchy_get_vars(cmp):
    r"""FlatHierarchy_get_vars(FlatHierarchy_ptr cmp) -> Set_t"""
    return _compile.FlatHierarchy_get_vars(cmp)

def FlatHierarchy_add_var(cmp, n):
    r"""FlatHierarchy_add_var(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_add_var(cmp, n)

def FlatHierarchy_remove_var(_self, n):
    r"""FlatHierarchy_remove_var(FlatHierarchy_ptr _self, node_ptr n)"""
    return _compile.FlatHierarchy_remove_var(_self, n)

def FlatHierarchy_get_ordered_vars(_self, outbound_edges):
    r"""FlatHierarchy_get_ordered_vars(FlatHierarchy_ptr const _self, hash_ptr * outbound_edges) -> NodeList_ptr"""
    return _compile.FlatHierarchy_get_ordered_vars(_self, outbound_edges)

def FlatHierarchy_get_preds(cmp):
    r"""FlatHierarchy_get_preds(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_preds(cmp)

def FlatHierarchy_add_pred(cmp, n):
    r"""FlatHierarchy_add_pred(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_add_pred(cmp, n)

def FlatHierarchy_set_pred(cmp, n):
    r"""FlatHierarchy_set_pred(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_pred(cmp, n)

def FlatHierarchy_get_mirrors(cmp):
    r"""FlatHierarchy_get_mirrors(FlatHierarchy_ptr cmp) -> node_ptr"""
    return _compile.FlatHierarchy_get_mirrors(cmp)

def FlatHierarchy_add_mirror(cmp, n):
    r"""FlatHierarchy_add_mirror(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_add_mirror(cmp, n)

def FlatHierarchy_set_mirror(cmp, n):
    r"""FlatHierarchy_set_mirror(FlatHierarchy_ptr cmp, node_ptr n)"""
    return _compile.FlatHierarchy_set_mirror(cmp, n)

def FlatHierarchy_self_check(_self):
    r"""FlatHierarchy_self_check(FlatHierarchy_ptr const _self)"""
    return _compile.FlatHierarchy_self_check(_self)

def FlatHierarchy_lookup_assign(_self, name):
    r"""FlatHierarchy_lookup_assign(FlatHierarchy_ptr _self, node_ptr name) -> node_ptr"""
    return _compile.FlatHierarchy_lookup_assign(_self, name)

def FlatHierarchy_insert_assign(_self, name, assign):
    r"""FlatHierarchy_insert_assign(FlatHierarchy_ptr _self, node_ptr name, node_ptr assign)"""
    return _compile.FlatHierarchy_insert_assign(_self, name, assign)

def FlatHierarchy_lookup_constrains(_self, name):
    r"""FlatHierarchy_lookup_constrains(FlatHierarchy_ptr _self, node_ptr name) -> node_ptr"""
    return _compile.FlatHierarchy_lookup_constrains(_self, name)

def FlatHierarchy_add_constrains(_self, name, expr):
    r"""FlatHierarchy_add_constrains(FlatHierarchy_ptr _self, node_ptr name, node_ptr expr)"""
    return _compile.FlatHierarchy_add_constrains(_self, name, expr)

def FlatHierarchy_lookup_constant_constrains(_self, type):
    r"""FlatHierarchy_lookup_constant_constrains(FlatHierarchy_ptr _self, int type) -> node_ptr"""
    return _compile.FlatHierarchy_lookup_constant_constrains(_self, type)

def FlatHierarchy_add_constant_constrains(_self, expr, type):
    r"""FlatHierarchy_add_constant_constrains(FlatHierarchy_ptr _self, node_ptr expr, int type)"""
    return _compile.FlatHierarchy_add_constant_constrains(_self, expr, type)

def FlatHierarchy_calculate_vars_constrains(_self):
    r"""FlatHierarchy_calculate_vars_constrains(FlatHierarchy_ptr _self)"""
    return _compile.FlatHierarchy_calculate_vars_constrains(_self)

def FlatHierarchy_get_var_expr_associations(_self):
    r"""FlatHierarchy_get_var_expr_associations(FlatHierarchy_ptr _self) -> hash_ptr"""
    return _compile.FlatHierarchy_get_var_expr_associations(_self)

def FlatHierarchy_set_var_expr_associations(_self, h):
    r"""FlatHierarchy_set_var_expr_associations(FlatHierarchy_ptr _self, hash_ptr h)"""
    return _compile.FlatHierarchy_set_var_expr_associations(_self, h)

def FlatHierarchy_clear_var_expr_associations(_self):
    r"""FlatHierarchy_clear_var_expr_associations(FlatHierarchy_ptr _self)"""
    return _compile.FlatHierarchy_clear_var_expr_associations(_self)

def FlatHierarchy_get_constants_associations(_self):
    r"""FlatHierarchy_get_constants_associations(FlatHierarchy_ptr _self) -> hash_ptr"""
    return _compile.FlatHierarchy_get_constants_associations(_self)

def FlatHierarchy_set_constants_associations(_self, h):
    r"""FlatHierarchy_set_constants_associations(FlatHierarchy_ptr _self, hash_ptr h)"""
    return _compile.FlatHierarchy_set_constants_associations(_self, h)

def FlatHierarchy_clear_constants_associations(_self):
    r"""FlatHierarchy_clear_constants_associations(FlatHierarchy_ptr _self)"""
    return _compile.FlatHierarchy_clear_constants_associations(_self)

def FlatHierarchy_set_symb_table(_self, symb_table):
    r"""FlatHierarchy_set_symb_table(FlatHierarchy_ptr const _self, SymbTable_ptr symb_table)"""
    return _compile.FlatHierarchy_set_symb_table(_self, symb_table)

def PredicateExtractor_create(st, use_approx):
    r"""PredicateExtractor_create(SymbTable_ptr st, boolean use_approx) -> PredicateExtractor_ptr"""
    return _compile.PredicateExtractor_create(st, use_approx)

def PredicateExtractor_destroy(_self):
    r"""PredicateExtractor_destroy(PredicateExtractor_ptr _self)"""
    return _compile.PredicateExtractor_destroy(_self)

def PredicateExtractor_compute_preds(_self, expr):
    r"""PredicateExtractor_compute_preds(PredicateExtractor_ptr _self, node_ptr expr)"""
    return _compile.PredicateExtractor_compute_preds(_self, expr)

def PredicateExtractor_compute_preds_from_hierarchy(_self, fh):
    r"""PredicateExtractor_compute_preds_from_hierarchy(PredicateExtractor_ptr _self, FlatHierarchy_ptr fh)"""
    return _compile.PredicateExtractor_compute_preds_from_hierarchy(_self, fh)

def PredicateExtractor_get_all_preds(_self):
    r"""PredicateExtractor_get_all_preds(PredicateExtractor_ptr const _self) -> Set_t"""
    return _compile.PredicateExtractor_get_all_preds(_self)

def PredicateExtractor_get_all_clusters(_self):
    r"""PredicateExtractor_get_all_clusters(PredicateExtractor_ptr const _self) -> Set_t"""
    return _compile.PredicateExtractor_get_all_clusters(_self)

def PredicateExtractor_get_var_cluster(_self, var):
    r"""PredicateExtractor_get_var_cluster(PredicateExtractor_ptr const _self, node_ptr var) -> Set_t"""
    return _compile.PredicateExtractor_get_var_cluster(_self, var)

def PredicateExtractor_get_preds_of_a_cluster(_self, cluster):
    r"""PredicateExtractor_get_preds_of_a_cluster(PredicateExtractor_ptr const _self, Set_t cluster) -> Set_t"""
    return _compile.PredicateExtractor_get_preds_of_a_cluster(_self, cluster)

def PredicateExtractor_print(_self, stream, printPredicates, printClusters):
    r"""PredicateExtractor_print(PredicateExtractor_ptr const _self, FILE * stream, boolean printPredicates, boolean printClusters)"""
    return _compile.PredicateExtractor_print(_self, stream, printPredicates, printClusters)

def PredicateNormaliser_create(st):
    r"""PredicateNormaliser_create(SymbTable_ptr st) -> PredicateNormaliser_ptr"""
    return _compile.PredicateNormaliser_create(st)

def PredicateNormaliser_destroy(_self):
    r"""PredicateNormaliser_destroy(PredicateNormaliser_ptr _self)"""
    return _compile.PredicateNormaliser_destroy(_self)

def PredicateNormaliser_normalise_expr(_self, expr):
    r"""PredicateNormaliser_normalise_expr(PredicateNormaliser_ptr _self, node_ptr expr) -> node_ptr"""
    return _compile.PredicateNormaliser_normalise_expr(_self, expr)

def PredicateNormaliser_normalise_specification(_self, expr):
    r"""PredicateNormaliser_normalise_specification(PredicateNormaliser_ptr _self, node_ptr expr) -> node_ptr"""
    return _compile.PredicateNormaliser_normalise_specification(_self, expr)

def PredicateNormaliser_get_predicates_only(_self, preds, expr):
    r"""PredicateNormaliser_get_predicates_only(PredicateNormaliser_ptr const _self, Set_t * preds, node_ptr expr)"""
    return _compile.PredicateNormaliser_get_predicates_only(_self, preds, expr)

def PredicateNormaliser_print_predicates_only(_self, stream, expr):
    r"""PredicateNormaliser_print_predicates_only(PredicateNormaliser_ptr const _self, FILE * stream, node_ptr expr)"""
    return _compile.PredicateNormaliser_print_predicates_only(_self, stream, expr)

def compile_flatten_smv(calc_vars_constrains):
    r"""compile_flatten_smv(boolean calc_vars_constrains) -> int"""
    return _compile.compile_flatten_smv(calc_vars_constrains)

def flatten_hierarchy():
    r"""flatten_hierarchy() -> int"""
    return _compile.flatten_hierarchy()

def Compile_ConstructHierarchy(symb_table, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    r"""Compile_ConstructHierarchy(SymbTable_ptr symb_table, SymbLayer_ptr arg2, node_ptr arg3, node_ptr arg4, node_ptr arg5, FlatHierarchy_ptr arg6, HrcNode_ptr arg7, hash_ptr arg8)"""
    return _compile.Compile_ConstructHierarchy(symb_table, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def Compile_ProcessHierarchy(symb_table, layer, hierachy, name, create_process_variables, calc_vars_constr):
    r"""Compile_ProcessHierarchy(SymbTable_ptr symb_table, SymbLayer_ptr layer, FlatHierarchy_ptr hierachy, node_ptr name, boolean create_process_variables, boolean calc_vars_constr)"""
    return _compile.Compile_ProcessHierarchy(symb_table, layer, hierachy, name, create_process_variables, calc_vars_constr)
class cmp_struct(object):
    r"""Proxy of C cmp_struct struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    read_model = property(_compile.cmp_struct_read_model_get, _compile.cmp_struct_read_model_set, doc=r"""read_model : int""")
    hrc_built = property(_compile.cmp_struct_hrc_built_get, _compile.cmp_struct_hrc_built_set, doc=r"""hrc_built : int""")
    flatten_hierarchy = property(_compile.cmp_struct_flatten_hierarchy_get, _compile.cmp_struct_flatten_hierarchy_set, doc=r"""flatten_hierarchy : int""")
    encode_variables = property(_compile.cmp_struct_encode_variables_get, _compile.cmp_struct_encode_variables_set, doc=r"""encode_variables : int""")
    process_selector = property(_compile.cmp_struct_process_selector_get, _compile.cmp_struct_process_selector_set, doc=r"""process_selector : int""")
    build_frames = property(_compile.cmp_struct_build_frames_get, _compile.cmp_struct_build_frames_set, doc=r"""build_frames : int""")
    build_model = property(_compile.cmp_struct_build_model_get, _compile.cmp_struct_build_model_set, doc=r"""build_model : int""")
    build_flat_model = property(_compile.cmp_struct_build_flat_model_get, _compile.cmp_struct_build_flat_model_set, doc=r"""build_flat_model : int""")
    build_bool_model = property(_compile.cmp_struct_build_bool_model_get, _compile.cmp_struct_build_bool_model_set, doc=r"""build_bool_model : int""")
    bmc_init = property(_compile.cmp_struct_bmc_init_get, _compile.cmp_struct_bmc_init_set, doc=r"""bmc_init : int""")
    bmc_setup = property(_compile.cmp_struct_bmc_setup_get, _compile.cmp_struct_bmc_setup_set, doc=r"""bmc_setup : int""")
    fairness_constraints = property(_compile.cmp_struct_fairness_constraints_get, _compile.cmp_struct_fairness_constraints_set, doc=r"""fairness_constraints : int""")
    coi = property(_compile.cmp_struct_coi_get, _compile.cmp_struct_coi_set, doc=r"""coi : int""")

    def __init__(self):
        r"""__init__(cmp_struct self) -> cmp_struct"""
        _compile.cmp_struct_swiginit(self, _compile.new_cmp_struct())
    __swig_destroy__ = _compile.delete_cmp_struct

# Register cmp_struct in _compile:
_compile.cmp_struct_swigregister(cmp_struct)
cvar = _compile.cvar


def cmp_struct_reset(cmp):
    r"""cmp_struct_reset(cmp_struct cmp)"""
    return _compile.cmp_struct_reset(cmp)

def FlattenSexp(symb_table, sexp, context):
    r"""FlattenSexp(SymbTable_ptr const symb_table, node_ptr sexp, node_ptr context) -> node_ptr"""
    return _compile.FlattenSexp(symb_table, sexp, context)

