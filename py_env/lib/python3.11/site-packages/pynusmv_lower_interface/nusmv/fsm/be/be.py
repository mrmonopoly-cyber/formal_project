# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _be
else:
    import _be

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _be.PRIuPTR

PRIdPTR = _be.PRIdPTR

LLU = _be.LLU

LLO = _be.LLO

LLX = _be.LLX

false = _be.false

true = _be.true

OUTCOME_GENERIC_ERROR = _be.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _be.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _be.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _be.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _be.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _be.OUTCOME_SUCCESS


def BeFsm_create(be_enc, init, invar, trans, list_of_be_fairness):
    r"""BeFsm_create(BeEnc_ptr be_enc, be_ptr const init, be_ptr const invar, be_ptr const trans, node_ptr const list_of_be_fairness) -> BeFsm_ptr"""
    return _be.BeFsm_create(be_enc, init, invar, trans, list_of_be_fairness)

def BeFsm_create_from_sexp_fsm(be_enc, bfsm):
    r"""BeFsm_create_from_sexp_fsm(BeEnc_ptr be_enc, BoolSexpFsm_ptr const bfsm) -> BeFsm_ptr"""
    return _be.BeFsm_create_from_sexp_fsm(be_enc, bfsm)

def BeFsm_destroy(_self):
    r"""BeFsm_destroy(BeFsm_ptr _self)"""
    return _be.BeFsm_destroy(_self)

def BeFsm_copy(_self):
    r"""BeFsm_copy(BeFsm_ptr _self) -> BeFsm_ptr"""
    return _be.BeFsm_copy(_self)

def BeFsm_get_be_encoding(_self):
    r"""BeFsm_get_be_encoding(BeFsm_ptr const _self) -> BeEnc_ptr"""
    return _be.BeFsm_get_be_encoding(_self)

def BeFsm_get_init(_self):
    r"""BeFsm_get_init(BeFsm_ptr const _self) -> be_ptr"""
    return _be.BeFsm_get_init(_self)

def BeFsm_get_invar(_self):
    r"""BeFsm_get_invar(BeFsm_ptr const _self) -> be_ptr"""
    return _be.BeFsm_get_invar(_self)

def BeFsm_get_trans(_self):
    r"""BeFsm_get_trans(BeFsm_ptr const _self) -> be_ptr"""
    return _be.BeFsm_get_trans(_self)

def BeFsm_get_fairness_list(_self):
    r"""BeFsm_get_fairness_list(BeFsm_ptr const _self) -> node_ptr"""
    return _be.BeFsm_get_fairness_list(_self)

def BeFsm_apply_synchronous_product(_self, other):
    r"""BeFsm_apply_synchronous_product(BeFsm_ptr _self, BeFsm_ptr const other)"""
    return _be.BeFsm_apply_synchronous_product(_self, other)

def node_ptr_to_be_ptr(node):
    r"""node_ptr_to_be_ptr(node_ptr node) -> be_ptr"""
    return _be.node_ptr_to_be_ptr(node)

