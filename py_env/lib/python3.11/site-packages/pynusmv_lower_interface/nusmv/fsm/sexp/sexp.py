# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sexp
else:
    import _sexp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _sexp.PRIuPTR

PRIdPTR = _sexp.PRIdPTR

LLU = _sexp.LLU

LLO = _sexp.LLO

LLX = _sexp.LLX

false = _sexp.false

true = _sexp.true

OUTCOME_GENERIC_ERROR = _sexp.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _sexp.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _sexp.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _sexp.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _sexp.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _sexp.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _sexp.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _sexp.Object_copy(_self)

def BoolSexpFsm_create(hierarchy, vars_set, benc, det_layer):
    r"""BoolSexpFsm_create(FlatHierarchy_ptr const hierarchy, Set_t const vars_set, BddEnc_ptr benc, SymbLayer_ptr det_layer) -> BoolSexpFsm_ptr"""
    return _sexp.BoolSexpFsm_create(hierarchy, vars_set, benc, det_layer)

def BoolSexpFsm_create_from_scalar_fsm(scalar_fsm, benc, det_layer):
    r"""BoolSexpFsm_create_from_scalar_fsm(SexpFsm_ptr const scalar_fsm, BddEnc_ptr benc, SymbLayer_ptr det_layer) -> BoolSexpFsm_ptr"""
    return _sexp.BoolSexpFsm_create_from_scalar_fsm(scalar_fsm, benc, det_layer)

def BoolSexpFsm_destroy(_self):
    r"""BoolSexpFsm_destroy(BoolSexpFsm_ptr _self)"""
    return _sexp.BoolSexpFsm_destroy(_self)

def BoolSexpFsm_get_bool_enc(_self):
    r"""BoolSexpFsm_get_bool_enc(BoolSexpFsm_ptr const _self) -> BoolEnc_ptr"""
    return _sexp.BoolSexpFsm_get_bool_enc(_self)

def BoolSexpFsm_copy(_self):
    r"""BoolSexpFsm_copy(BoolSexpFsm_ptr _self) -> BoolSexpFsm_ptr"""
    return _sexp.BoolSexpFsm_copy(_self)

def Expr_true():
    r"""Expr_true() -> Expr_ptr"""
    return _sexp.Expr_true()

def Expr_false():
    r"""Expr_false() -> Expr_ptr"""
    return _sexp.Expr_false()

def Expr_is_true(expr):
    r"""Expr_is_true(Expr_ptr const expr) -> boolean"""
    return _sexp.Expr_is_true(expr)

def Expr_is_false(expr):
    r"""Expr_is_false(Expr_ptr const expr) -> boolean"""
    return _sexp.Expr_is_false(expr)

def Expr_next(a, st):
    r"""Expr_next(Expr_ptr const a, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_next(a, st)

def Expr_ite(cond, t, e, st):
    r"""Expr_ite(Expr_ptr const cond, Expr_ptr const t, Expr_ptr const e, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_ite(cond, t, e, st)

def Expr_equal(a, b, st):
    r"""Expr_equal(Expr_ptr const a, Expr_ptr const b, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_equal(a, b, st)

def Expr_notequal(a, b, st):
    r"""Expr_notequal(Expr_ptr const a, Expr_ptr const b, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_notequal(a, b, st)

def Expr_le(a, b, st):
    r"""Expr_le(Expr_ptr const a, Expr_ptr const b, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_le(a, b, st)

def Expr_ge(a, b, st):
    r"""Expr_ge(Expr_ptr const a, Expr_ptr const b, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_ge(a, b, st)

def Expr_simplify_word_extend(st, w, i):
    r"""Expr_simplify_word_extend(SymbTable_ptr const st, Expr_ptr w, Expr_ptr i) -> Expr_ptr"""
    return _sexp.Expr_simplify_word_extend(st, w, i)

def Expr_attime(e, time, st):
    r"""Expr_attime(Expr_ptr e, int time, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_attime(e, time, st)

def Expr_word_constant(st, type, w, i):
    r"""Expr_word_constant(SymbTable_ptr const st, int type, Expr_ptr w, Expr_ptr i) -> Expr_ptr"""
    return _sexp.Expr_word_constant(st, type, w, i)

def Expr_and_from_list(list, st):
    r"""Expr_and_from_list(node_ptr list, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_and_from_list(list, st)

def Expr_and(a, b):
    r"""Expr_and(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_and(a, b)

def Expr_and_nil(a, b):
    r"""Expr_and_nil(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_and_nil(a, b)

def Expr_not(expr):
    r"""Expr_not(Expr_ptr const expr) -> Expr_ptr"""
    return _sexp.Expr_not(expr)

def Expr_or(a, b):
    r"""Expr_or(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_or(a, b)

def Expr_xor(a, b):
    r"""Expr_xor(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_xor(a, b)

def Expr_xnor(a, b):
    r"""Expr_xnor(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_xnor(a, b)

def Expr_iff(a, b):
    r"""Expr_iff(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_iff(a, b)

def Expr_implies(a, b):
    r"""Expr_implies(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_implies(a, b)

def Expr_lt(a, b):
    r"""Expr_lt(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_lt(a, b)

def Expr_simplify_lt(st, a, b):
    r"""Expr_simplify_lt(SymbTable_ptr const st, Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_simplify_lt(st, a, b)

def Expr_gt(a, b):
    r"""Expr_gt(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_gt(a, b)

def Expr_simplify_gt(st, a, b):
    r"""Expr_simplify_gt(SymbTable_ptr const st, Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_simplify_gt(st, a, b)

def Expr_plus(a, b):
    r"""Expr_plus(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_plus(a, b)

def Expr_minus(a, b):
    r"""Expr_minus(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_minus(a, b)

def Expr_times(a, b):
    r"""Expr_times(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_times(a, b)

def Expr_divide(a, b):
    r"""Expr_divide(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_divide(a, b)

def Expr_mod(a, b):
    r"""Expr_mod(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_mod(a, b)

def Expr_unary_minus(a):
    r"""Expr_unary_minus(Expr_ptr const a) -> Expr_ptr"""
    return _sexp.Expr_unary_minus(a)

def Expr_word_left_shift(a, b):
    r"""Expr_word_left_shift(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_word_left_shift(a, b)

def Expr_word_right_shift(a, b):
    r"""Expr_word_right_shift(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_word_right_shift(a, b)

def Expr_word_left_rotate(a, b):
    r"""Expr_word_left_rotate(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_word_left_rotate(a, b)

def Expr_word_right_rotate(a, b):
    r"""Expr_word_right_rotate(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_word_right_rotate(a, b)

def Expr_word_bit_select(w, r):
    r"""Expr_word_bit_select(Expr_ptr const w, Expr_ptr const r) -> Expr_ptr"""
    return _sexp.Expr_word_bit_select(w, r)

def Expr_simplify_word_bit_select(st, w, r):
    r"""Expr_simplify_word_bit_select(SymbTable_ptr const st, Expr_ptr const w, Expr_ptr const r) -> Expr_ptr"""
    return _sexp.Expr_simplify_word_bit_select(st, w, r)

def Expr_word_concatenate(a, b):
    r"""Expr_word_concatenate(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_word_concatenate(a, b)

def Expr_word1_to_bool(w):
    r"""Expr_word1_to_bool(Expr_ptr w) -> Expr_ptr"""
    return _sexp.Expr_word1_to_bool(w)

def Expr_bool_to_word1(a):
    r"""Expr_bool_to_word1(Expr_ptr a) -> Expr_ptr"""
    return _sexp.Expr_bool_to_word1(a)

def Expr_signed_word_to_unsigned(w):
    r"""Expr_signed_word_to_unsigned(Expr_ptr w) -> Expr_ptr"""
    return _sexp.Expr_signed_word_to_unsigned(w)

def Expr_unsigned_word_to_signed(w):
    r"""Expr_unsigned_word_to_signed(Expr_ptr w) -> Expr_ptr"""
    return _sexp.Expr_unsigned_word_to_signed(w)

def Expr_word_extend(w, i, st):
    r"""Expr_word_extend(Expr_ptr w, Expr_ptr i, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_word_extend(w, i, st)

def Expr_attime_get_time(e):
    r"""Expr_attime_get_time(Expr_ptr e) -> int"""
    return _sexp.Expr_attime_get_time(e)

def Expr_attime_get_untimed(e):
    r"""Expr_attime_get_untimed(Expr_ptr e) -> Expr_ptr"""
    return _sexp.Expr_attime_get_untimed(e)

def Expr_union(a, b):
    r"""Expr_union(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_union(a, b)

def Expr_setin(a, b, st):
    r"""Expr_setin(Expr_ptr const a, Expr_ptr const b, SymbTable_ptr const st) -> Expr_ptr"""
    return _sexp.Expr_setin(a, b, st)

def Expr_range(a, b):
    r"""Expr_range(Expr_ptr const a, Expr_ptr const b) -> Expr_ptr"""
    return _sexp.Expr_range(a, b)

def Expr_function(name, params):
    r"""Expr_function(Expr_ptr const name, Expr_ptr const params) -> Expr_ptr"""
    return _sexp.Expr_function(name, params)

def Expr_resolve(st, type, left, right):
    r"""Expr_resolve(SymbTable_ptr st, int type, Expr_ptr left, Expr_ptr right) -> Expr_ptr"""
    return _sexp.Expr_resolve(st, type, left, right)

def Expr_simplify(st, expr):
    r"""Expr_simplify(SymbTable_ptr st, Expr_ptr expr) -> Expr_ptr"""
    return _sexp.Expr_simplify(st, expr)

def Expr_is_timed(expr, cache):
    r"""Expr_is_timed(Expr_ptr expr, hash_ptr cache) -> boolean"""
    return _sexp.Expr_is_timed(expr, cache)

def Expr_get_time(st, expr):
    r"""Expr_get_time(SymbTable_ptr st, Expr_ptr expr) -> int"""
    return _sexp.Expr_get_time(st, expr)

def Expr_untimed(st, expr):
    r"""Expr_untimed(SymbTable_ptr st, Expr_ptr expr) -> Expr_ptr"""
    return _sexp.Expr_untimed(st, expr)

def Expr_untimed_explicit_time(st, expr, time):
    r"""Expr_untimed_explicit_time(SymbTable_ptr st, Expr_ptr expr, int time) -> Expr_ptr"""
    return _sexp.Expr_untimed_explicit_time(st, expr, time)

def Expr_wsizeof(l, r):
    r"""Expr_wsizeof(Expr_ptr l, Expr_ptr r) -> Expr_ptr"""
    return _sexp.Expr_wsizeof(l, r)

def Expr_cast_toint(l, r):
    r"""Expr_cast_toint(Expr_ptr l, Expr_ptr r) -> Expr_ptr"""
    return _sexp.Expr_cast_toint(l, r)

def SexpFsm_create(hierarchy, vars_set):
    r"""SexpFsm_create(FlatHierarchy_ptr const hierarchy, Set_t const vars_set) -> SexpFsm_ptr"""
    return _sexp.SexpFsm_create(hierarchy, vars_set)

def SexpFsm_copy(_self):
    r"""SexpFsm_copy(SexpFsm_ptr const _self) -> SexpFsm_ptr"""
    return _sexp.SexpFsm_copy(_self)

def SexpFsm_create_predicate_normalised_copy(_self, normaliser):
    r"""SexpFsm_create_predicate_normalised_copy(SexpFsm_ptr const _self, PredicateNormaliser_ptr normaliser) -> SexpFsm_ptr"""
    return _sexp.SexpFsm_create_predicate_normalised_copy(_self, normaliser)

def SexpFsm_destroy(_self):
    r"""SexpFsm_destroy(SexpFsm_ptr _self)"""
    return _sexp.SexpFsm_destroy(_self)

def SexpFsm_get_symb_table(_self):
    r"""SexpFsm_get_symb_table(SexpFsm_ptr const _self) -> SymbTable_ptr"""
    return _sexp.SexpFsm_get_symb_table(_self)

def SexpFsm_is_boolean(_self):
    r"""SexpFsm_is_boolean(SexpFsm_ptr const _self) -> boolean"""
    return _sexp.SexpFsm_is_boolean(_self)

def SexpFsm_get_hierarchy(_self):
    r"""SexpFsm_get_hierarchy(SexpFsm_ptr const _self) -> FlatHierarchy_ptr"""
    return _sexp.SexpFsm_get_hierarchy(_self)

def SexpFsm_get_init(_self):
    r"""SexpFsm_get_init(SexpFsm_ptr const _self) -> Expr_ptr"""
    return _sexp.SexpFsm_get_init(_self)

def SexpFsm_get_invar(_self):
    r"""SexpFsm_get_invar(SexpFsm_ptr const _self) -> Expr_ptr"""
    return _sexp.SexpFsm_get_invar(_self)

def SexpFsm_get_trans(_self):
    r"""SexpFsm_get_trans(SexpFsm_ptr const _self) -> Expr_ptr"""
    return _sexp.SexpFsm_get_trans(_self)

def SexpFsm_get_input(_self):
    r"""SexpFsm_get_input(SexpFsm_ptr const _self) -> Expr_ptr"""
    return _sexp.SexpFsm_get_input(_self)

def SexpFsm_get_justice(_self):
    r"""SexpFsm_get_justice(SexpFsm_ptr const _self) -> node_ptr"""
    return _sexp.SexpFsm_get_justice(_self)

def SexpFsm_get_compassion(_self):
    r"""SexpFsm_get_compassion(SexpFsm_ptr const _self) -> node_ptr"""
    return _sexp.SexpFsm_get_compassion(_self)

def SexpFsm_get_vars_list(_self):
    r"""SexpFsm_get_vars_list(SexpFsm_ptr const _self) -> NodeList_ptr"""
    return _sexp.SexpFsm_get_vars_list(_self)

def SexpFsm_get_symbols_list(_self):
    r"""SexpFsm_get_symbols_list(SexpFsm_ptr const _self) -> NodeList_ptr"""
    return _sexp.SexpFsm_get_symbols_list(_self)

def SexpFsm_get_vars(_self):
    r"""SexpFsm_get_vars(SexpFsm_ptr const _self) -> Set_t"""
    return _sexp.SexpFsm_get_vars(_self)

def SexpFsm_apply_synchronous_product(_self, other):
    r"""SexpFsm_apply_synchronous_product(SexpFsm_ptr _self, SexpFsm_ptr other)"""
    return _sexp.SexpFsm_apply_synchronous_product(_self, other)

def SexpFsm_is_syntactically_universal(_self):
    r"""SexpFsm_is_syntactically_universal(SexpFsm_ptr _self) -> boolean"""
    return _sexp.SexpFsm_is_syntactically_universal(_self)

def SexpFsm_get_var_init(_self, v):
    r"""SexpFsm_get_var_init(SexpFsm_ptr const _self, node_ptr v) -> Expr_ptr"""
    return _sexp.SexpFsm_get_var_init(_self, v)

def SexpFsm_get_var_invar(_self, v):
    r"""SexpFsm_get_var_invar(SexpFsm_ptr const _self, node_ptr v) -> Expr_ptr"""
    return _sexp.SexpFsm_get_var_invar(_self, v)

def SexpFsm_get_var_trans(_self, v):
    r"""SexpFsm_get_var_trans(SexpFsm_ptr const _self, node_ptr v) -> Expr_ptr"""
    return _sexp.SexpFsm_get_var_trans(_self, v)

def SexpFsm_get_var_input(_self, v):
    r"""SexpFsm_get_var_input(SexpFsm_ptr const _self, node_ptr v) -> Expr_ptr"""
    return _sexp.SexpFsm_get_var_input(_self, v)

def SexpFsm_self_check(_self):
    r"""SexpFsm_self_check(SexpFsm_ptr const _self)"""
    return _sexp.SexpFsm_self_check(_self)

def boolsexpfsm_to_sexpfsm(ptr):
    r"""boolsexpfsm_to_sexpfsm(BoolSexpFsm_ptr ptr) -> SexpFsm_ptr"""
    return _sexp.boolsexpfsm_to_sexpfsm(ptr)

