# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fsm
else:
    import _fsm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _fsm.PRIuPTR

PRIdPTR = _fsm.PRIdPTR

LLU = _fsm.LLU

LLO = _fsm.LLO

LLX = _fsm.LLX

false = _fsm.false

true = _fsm.true

OUTCOME_GENERIC_ERROR = _fsm.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _fsm.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _fsm.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _fsm.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _fsm.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _fsm.OUTCOME_SUCCESS


def Fsm_init():
    r"""Fsm_init()"""
    return _fsm.Fsm_init()

def Fsm_quit():
    r"""Fsm_quit()"""
    return _fsm.Fsm_quit()

def FsmBuilder_create(dd):
    r"""FsmBuilder_create(DdManager * dd) -> FsmBuilder_ptr"""
    return _fsm.FsmBuilder_create(dd)

def FsmBuilder_destroy(_self):
    r"""FsmBuilder_destroy(FsmBuilder_ptr _self)"""
    return _fsm.FsmBuilder_destroy(_self)

def FsmBuilder_create_scalar_sexp_fsm(_self, flat_hierarchy, vars_list):
    r"""FsmBuilder_create_scalar_sexp_fsm(FsmBuilder_ptr const _self, FlatHierarchy_ptr flat_hierarchy, Set_t const vars_list) -> SexpFsm_ptr"""
    return _fsm.FsmBuilder_create_scalar_sexp_fsm(_self, flat_hierarchy, vars_list)

def FsmBuilder_create_boolean_sexp_fsm(_self, flat_hierarchy, vars, bdd_enc, det_layer):
    r"""FsmBuilder_create_boolean_sexp_fsm(FsmBuilder_ptr const _self, FlatHierarchy_ptr flat_hierarchy, Set_t const vars, BddEnc_ptr bdd_enc, SymbLayer_ptr det_layer) -> BoolSexpFsm_ptr"""
    return _fsm.FsmBuilder_create_boolean_sexp_fsm(_self, flat_hierarchy, vars, bdd_enc, det_layer)

def FsmBuilder_create_bdd_fsm(_self, enc, sexp_fsm, trans_type):
    r"""FsmBuilder_create_bdd_fsm(FsmBuilder_ptr const _self, BddEnc_ptr enc, SexpFsm_ptr const sexp_fsm, TransType const trans_type) -> BddFsm_ptr"""
    return _fsm.FsmBuilder_create_bdd_fsm(_self, enc, sexp_fsm, trans_type)

def FsmBuilder_create_bdd_fsm_of_vars(_self, sexp_fsm, trans_type, enc, state_vars_cube, input_vars_cube, next_state_vars_cube):
    r"""FsmBuilder_create_bdd_fsm_of_vars(FsmBuilder_ptr const _self, SexpFsm_ptr const sexp_fsm, TransType const trans_type, BddEnc_ptr enc, BddVarSet_ptr state_vars_cube, BddVarSet_ptr input_vars_cube, BddVarSet_ptr next_state_vars_cube) -> BddFsm_ptr"""
    return _fsm.FsmBuilder_create_bdd_fsm_of_vars(_self, sexp_fsm, trans_type, enc, state_vars_cube, input_vars_cube, next_state_vars_cube)

def FsmBuilder_clusterize_expr(_self, enc, expr):
    r"""FsmBuilder_clusterize_expr(FsmBuilder_ptr _self, BddEnc_ptr enc, Expr_ptr expr) -> ClusterList_ptr"""
    return _fsm.FsmBuilder_clusterize_expr(_self, enc, expr)

