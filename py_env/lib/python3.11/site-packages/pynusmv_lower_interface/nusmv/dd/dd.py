# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dd
else:
    import _dd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


CUDD_REORDER_SAME = _dd.CUDD_REORDER_SAME

CUDD_REORDER_NONE = _dd.CUDD_REORDER_NONE

CUDD_REORDER_RANDOM = _dd.CUDD_REORDER_RANDOM

CUDD_REORDER_RANDOM_PIVOT = _dd.CUDD_REORDER_RANDOM_PIVOT

CUDD_REORDER_SIFT = _dd.CUDD_REORDER_SIFT

CUDD_REORDER_SIFT_CONVERGE = _dd.CUDD_REORDER_SIFT_CONVERGE

CUDD_REORDER_SYMM_SIFT = _dd.CUDD_REORDER_SYMM_SIFT

CUDD_REORDER_SYMM_SIFT_CONV = _dd.CUDD_REORDER_SYMM_SIFT_CONV

CUDD_REORDER_WINDOW2 = _dd.CUDD_REORDER_WINDOW2

CUDD_REORDER_WINDOW3 = _dd.CUDD_REORDER_WINDOW3

CUDD_REORDER_WINDOW4 = _dd.CUDD_REORDER_WINDOW4

CUDD_REORDER_WINDOW2_CONV = _dd.CUDD_REORDER_WINDOW2_CONV

CUDD_REORDER_WINDOW3_CONV = _dd.CUDD_REORDER_WINDOW3_CONV

CUDD_REORDER_WINDOW4_CONV = _dd.CUDD_REORDER_WINDOW4_CONV

CUDD_REORDER_GROUP_SIFT = _dd.CUDD_REORDER_GROUP_SIFT

CUDD_REORDER_GROUP_SIFT_CONV = _dd.CUDD_REORDER_GROUP_SIFT_CONV

CUDD_REORDER_ANNEALING = _dd.CUDD_REORDER_ANNEALING

CUDD_REORDER_GENETIC = _dd.CUDD_REORDER_GENETIC

CUDD_REORDER_LINEAR = _dd.CUDD_REORDER_LINEAR

CUDD_REORDER_LINEAR_CONVERGE = _dd.CUDD_REORDER_LINEAR_CONVERGE

CUDD_REORDER_LAZY_SIFT = _dd.CUDD_REORDER_LAZY_SIFT

CUDD_REORDER_EXACT = _dd.CUDD_REORDER_EXACT


def reordering_status(dd):
    r"""reordering_status(DdManager * dd) -> int"""
    return _dd.reordering_status(dd)

def bdd_equal(a, b):
    r"""bdd_equal(bdd_ptr a, bdd_ptr b) -> int"""
    return _dd.bdd_equal(a, b)
class reordering_status_result(object):
    r"""Proxy of C reordering_status_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    status = property(_dd.reordering_status_result_status_get, _dd.reordering_status_result_status_set, doc=r"""status : int""")
    method = property(_dd.reordering_status_result_method_get, _dd.reordering_status_result_method_set, doc=r"""method : dd_reorderingtype""")

    def __init__(self):
        r"""__init__(reordering_status_result self) -> reordering_status_result"""
        _dd.reordering_status_result_swiginit(self, _dd.new_reordering_status_result())
    __swig_destroy__ = _dd.delete_reordering_status_result

# Register reordering_status_result in _dd:
_dd.reordering_status_result_swigregister(reordering_status_result)

def wrap_dd_reordering_status(dd):
    r"""wrap_dd_reordering_status(DdManager * dd) -> reordering_status_result"""
    return _dd.wrap_dd_reordering_status(dd)
PRIuPTR = _dd.PRIuPTR

PRIdPTR = _dd.PRIdPTR

LLU = _dd.LLU

LLO = _dd.LLO

LLX = _dd.LLX

false = _dd.false

true = _dd.true

OUTCOME_GENERIC_ERROR = _dd.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _dd.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _dd.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _dd.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _dd.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _dd.OUTCOME_SUCCESS

DEFAULT_MINSIZE = _dd.DEFAULT_MINSIZE


def init_dd_package():
    r"""init_dd_package() -> DdManager *"""
    return _dd.init_dd_package()

def quit_dd_package(arg1):
    r"""quit_dd_package(DdManager * arg1)"""
    return _dd.quit_dd_package(arg1)

def add_true(arg1):
    r"""add_true(DdManager * arg1) -> add_ptr"""
    return _dd.add_true(arg1)

def add_then(arg1, arg2):
    r"""add_then(DdManager * arg1, add_ptr arg2) -> add_ptr"""
    return _dd.add_then(arg1, arg2)

def add_else(arg1, arg2):
    r"""add_else(DdManager * arg1, add_ptr arg2) -> add_ptr"""
    return _dd.add_else(arg1, arg2)

def add_index(arg1, arg2):
    r"""add_index(DdManager * arg1, add_ptr arg2) -> int"""
    return _dd.add_index(arg1, arg2)

def add_false(arg1):
    r"""add_false(DdManager * arg1) -> add_ptr"""
    return _dd.add_false(arg1)

def add_is_true(arg1, arg2):
    r"""add_is_true(DdManager * arg1, add_ptr arg2) -> int"""
    return _dd.add_is_true(arg1, arg2)

def add_is_false(arg1, arg2):
    r"""add_is_false(DdManager * arg1, add_ptr arg2) -> int"""
    return _dd.add_is_false(arg1, arg2)

def add_one(arg1):
    r"""add_one(DdManager * arg1) -> add_ptr"""
    return _dd.add_one(arg1)

def add_zero(arg1):
    r"""add_zero(DdManager * arg1) -> add_ptr"""
    return _dd.add_zero(arg1)

def add_is_one(arg1, arg2):
    r"""add_is_one(DdManager * arg1, add_ptr arg2) -> int"""
    return _dd.add_is_one(arg1, arg2)

def add_is_zero(arg1, arg2):
    r"""add_is_zero(DdManager * arg1, add_ptr arg2) -> int"""
    return _dd.add_is_zero(arg1, arg2)

def add_ref(arg1):
    r"""add_ref(add_ptr arg1)"""
    return _dd.add_ref(arg1)

def add_deref(arg1):
    r"""add_deref(add_ptr arg1)"""
    return _dd.add_deref(arg1)

def add_dup(arg1):
    r"""add_dup(add_ptr arg1) -> add_ptr"""
    return _dd.add_dup(arg1)

def add_free(arg1, arg2):
    r"""add_free(DdManager * arg1, add_ptr arg2)"""
    return _dd.add_free(arg1, arg2)

def add_new_var_with_index(arg1, arg2):
    r"""add_new_var_with_index(DdManager * arg1, int arg2) -> add_ptr"""
    return _dd.add_new_var_with_index(arg1, arg2)

def add_build(arg1, arg2, arg3, arg4):
    r"""add_build(DdManager * arg1, int arg2, add_ptr arg3, add_ptr arg4) -> add_ptr"""
    return _dd.add_build(arg1, arg2, arg3, arg4)

def add_new_var_at_level(arg1, arg2):
    r"""add_new_var_at_level(DdManager * arg1, int arg2) -> add_ptr"""
    return _dd.add_new_var_at_level(arg1, arg2)

def add_isleaf(arg1):
    r"""add_isleaf(add_ptr arg1) -> int"""
    return _dd.add_isleaf(arg1)

def bdd_isleaf(arg1):
    r"""bdd_isleaf(add_ptr arg1) -> int"""
    return _dd.bdd_isleaf(arg1)

def add_leaf(arg1, arg2):
    r"""add_leaf(DdManager * arg1, node_ptr arg2) -> add_ptr"""
    return _dd.add_leaf(arg1, arg2)

def add_get_leaf(arg1, arg2):
    r"""add_get_leaf(DdManager * arg1, add_ptr arg2) -> node_ptr"""
    return _dd.add_get_leaf(arg1, arg2)

def add_to_bdd(arg1, arg2):
    r"""add_to_bdd(DdManager * arg1, add_ptr arg2) -> bdd_ptr"""
    return _dd.add_to_bdd(arg1, arg2)

def add_to_bdd_strict_threshold(arg1, arg2, arg3):
    r"""add_to_bdd_strict_threshold(DdManager * arg1, add_ptr arg2, int arg3) -> bdd_ptr"""
    return _dd.add_to_bdd_strict_threshold(arg1, arg2, arg3)

def bdd_to_add(arg1, arg2):
    r"""bdd_to_add(DdManager * arg1, bdd_ptr arg2) -> add_ptr"""
    return _dd.bdd_to_add(arg1, arg2)

def bdd_to_01_add(arg1, arg2):
    r"""bdd_to_01_add(DdManager * arg1, bdd_ptr arg2) -> add_ptr"""
    return _dd.bdd_to_01_add(arg1, arg2)

def add_and(arg1, arg2, arg3):
    r"""add_and(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_and(arg1, arg2, arg3)

def add_and_accumulate(arg1, arg2, arg3):
    r"""add_and_accumulate(DdManager * arg1, add_ptr * arg2, add_ptr arg3)"""
    return _dd.add_and_accumulate(arg1, arg2, arg3)

def add_or(arg1, arg2, arg3):
    r"""add_or(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_or(arg1, arg2, arg3)

def add_or_accumulate(arg1, arg2, arg3):
    r"""add_or_accumulate(DdManager * arg1, add_ptr * arg2, add_ptr arg3)"""
    return _dd.add_or_accumulate(arg1, arg2, arg3)

def add_not(arg1, arg2):
    r"""add_not(DdManager * arg1, add_ptr arg2) -> add_ptr"""
    return _dd.add_not(arg1, arg2)

def add_implies(arg1, arg2, arg3):
    r"""add_implies(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_implies(arg1, arg2, arg3)

def add_iff(arg1, arg2, arg3):
    r"""add_iff(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_iff(arg1, arg2, arg3)

def add_xor(arg1, arg2, arg3):
    r"""add_xor(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_xor(arg1, arg2, arg3)

def add_xnor(arg1, arg2, arg3):
    r"""add_xnor(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_xnor(arg1, arg2, arg3)

def add_apply(arg1, arg2, arg3, arg4):
    r"""add_apply(DdManager * arg1, NPFNN arg2, add_ptr arg3, add_ptr arg4) -> add_ptr"""
    return _dd.add_apply(arg1, arg2, arg3, arg4)

def add_monadic_apply(arg1, arg2, arg3):
    r"""add_monadic_apply(DdManager * arg1, NPFNN arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_monadic_apply(arg1, arg2, arg3)

def add_exist_abstract(dd, a, b):
    r"""add_exist_abstract(DdManager * dd, add_ptr a, bdd_ptr b) -> add_ptr"""
    return _dd.add_exist_abstract(dd, a, b)

def add_ifthenelse(arg1, arg2, arg3, arg4):
    r"""add_ifthenelse(DdManager * arg1, add_ptr arg2, add_ptr arg3, add_ptr arg4) -> add_ptr"""
    return _dd.add_ifthenelse(arg1, arg2, arg3, arg4)

def add_cube_diff(arg1, arg2, arg3):
    r"""add_cube_diff(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_cube_diff(arg1, arg2, arg3)

def add_simplify_assuming(arg1, arg2, arg3):
    r"""add_simplify_assuming(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_simplify_assuming(arg1, arg2, arg3)

def add_permute(arg1, arg2, arg3):
    r"""add_permute(DdManager * arg1, add_ptr arg2, int * arg3) -> add_ptr"""
    return _dd.add_permute(arg1, arg2, arg3)

def add_support(arg1, arg2):
    r"""add_support(DdManager * arg1, add_ptr arg2) -> add_ptr"""
    return _dd.add_support(arg1, arg2)

def add_walkleaves(arg1, arg2):
    r"""add_walkleaves(VPFCVT arg1, add_ptr arg2)"""
    return _dd.add_walkleaves(arg1, arg2)

def add_size(arg1, arg2):
    r"""add_size(DdManager * arg1, add_ptr arg2) -> int"""
    return _dd.add_size(arg1, arg2)

def add_count_minterm(arg1, arg2, arg3):
    r"""add_count_minterm(DdManager * arg1, add_ptr arg2, int arg3) -> double"""
    return _dd.add_count_minterm(arg1, arg2, arg3)

def get_dd_nodes_allocated(arg1):
    r"""get_dd_nodes_allocated(DdManager * arg1) -> int"""
    return _dd.get_dd_nodes_allocated(arg1)

def add_value(arg1, arg2):
    r"""add_value(DdManager * arg1, add_ptr arg2) -> node_ptr"""
    return _dd.add_value(arg1, arg2)

def add_if_then(arg1, arg2, arg3):
    r"""add_if_then(DdManager * arg1, add_ptr arg2, add_ptr arg3) -> add_ptr"""
    return _dd.add_if_then(arg1, arg2, arg3)

def map_dd(arg1, arg2, arg3):
    r"""map_dd(DdManager * arg1, NPFDD arg2, node_ptr arg3) -> node_ptr"""
    return _dd.map_dd(arg1, arg2, arg3)

def walk_dd(arg1, arg2, arg3):
    r"""walk_dd(DdManager * arg1, VPFDD arg2, node_ptr arg3)"""
    return _dd.walk_dd(arg1, arg2, arg3)

def dd_new_var_block(arg1, arg2, arg3):
    r"""dd_new_var_block(DdManager * arg1, int arg2, int arg3) -> dd_block *"""
    return _dd.dd_new_var_block(arg1, arg2, arg3)

def dd_free_var_block(arg1, arg2):
    r"""dd_free_var_block(DdManager * arg1, dd_block * arg2) -> int"""
    return _dd.dd_free_var_block(arg1, arg2)

def dd_get_index_at_level(arg1, arg2):
    r"""dd_get_index_at_level(DdManager * arg1, int arg2) -> int"""
    return _dd.dd_get_index_at_level(arg1, arg2)

def dd_get_level_at_index(arg1, arg2):
    r"""dd_get_level_at_index(DdManager * arg1, int arg2) -> int"""
    return _dd.dd_get_level_at_index(arg1, arg2)

def dd_get_size(arg1):
    r"""dd_get_size(DdManager * arg1) -> int"""
    return _dd.dd_get_size(arg1)

def dd_set_order(arg1, permutation):
    r"""dd_set_order(DdManager * arg1, int * permutation) -> int"""
    return _dd.dd_set_order(arg1, permutation)

def dd_autodyn_enable(arg1, arg2):
    r"""dd_autodyn_enable(DdManager * arg1, dd_reorderingtype arg2)"""
    return _dd.dd_autodyn_enable(arg1, arg2)

def dd_autodyn_disable(arg1):
    r"""dd_autodyn_disable(DdManager * arg1)"""
    return _dd.dd_autodyn_disable(arg1)

def dd_reordering_status(arg1, arg2):
    r"""dd_reordering_status(DdManager * arg1, dd_reorderingtype * arg2) -> int"""
    return _dd.dd_reordering_status(arg1, arg2)

def dd_reorder(arg1, arg2, arg3):
    r"""dd_reorder(DdManager * arg1, int arg2, int arg3) -> int"""
    return _dd.dd_reorder(arg1, arg2, arg3)

def dd_get_reorderings(arg1):
    r"""dd_get_reorderings(DdManager * arg1) -> int"""
    return _dd.dd_get_reorderings(arg1)

def dd_get_ordering_method(arg1):
    r"""dd_get_ordering_method(DdManager * arg1) -> dd_reorderingtype"""
    return _dd.dd_get_ordering_method(arg1)

def StringConvertToDynOrderType(string):
    r"""StringConvertToDynOrderType(char * string) -> int"""
    return _dd.StringConvertToDynOrderType(string)

def DynOrderTypeConvertToString(method):
    r"""DynOrderTypeConvertToString(int method) -> char *"""
    return _dd.DynOrderTypeConvertToString(method)

def dd_checkzeroref(arg1):
    r"""dd_checkzeroref(DdManager * arg1) -> int"""
    return _dd.dd_checkzeroref(arg1)

def bdd_ref(arg1):
    r"""bdd_ref(bdd_ptr arg1)"""
    return _dd.bdd_ref(arg1)

def bdd_deref(arg1):
    r"""bdd_deref(bdd_ptr arg1)"""
    return _dd.bdd_deref(arg1)

def bdd_dup(arg1):
    r"""bdd_dup(bdd_ptr arg1) -> bdd_ptr"""
    return _dd.bdd_dup(arg1)

def bdd_true(arg1):
    r"""bdd_true(DdManager * arg1) -> bdd_ptr"""
    return _dd.bdd_true(arg1)

def bdd_false(arg1):
    r"""bdd_false(DdManager * arg1) -> bdd_ptr"""
    return _dd.bdd_false(arg1)

def bdd_is_true(arg1, arg2):
    r"""bdd_is_true(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_is_true(arg1, arg2)

def bdd_is_false(arg1, arg2):
    r"""bdd_is_false(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_is_false(arg1, arg2)

def bdd_isnot_true(arg1, arg2):
    r"""bdd_isnot_true(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_isnot_true(arg1, arg2)

def bdd_isnot_false(arg1, arg2):
    r"""bdd_isnot_false(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_isnot_false(arg1, arg2)

def bdd_free(arg1, arg2):
    r"""bdd_free(DdManager * arg1, bdd_ptr arg2)"""
    return _dd.bdd_free(arg1, arg2)

def bdd_not(arg1, arg2):
    r"""bdd_not(DdManager * arg1, bdd_ptr arg2) -> bdd_ptr"""
    return _dd.bdd_not(arg1, arg2)

def bdd_and(arg1, arg2, arg3):
    r"""bdd_and(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_and(arg1, arg2, arg3)

def bdd_and_accumulate(arg1, arg2, arg3):
    r"""bdd_and_accumulate(DdManager * arg1, bdd_ptr * arg2, bdd_ptr arg3)"""
    return _dd.bdd_and_accumulate(arg1, arg2, arg3)

def bdd_or(arg1, arg2, arg3):
    r"""bdd_or(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_or(arg1, arg2, arg3)

def bdd_or_accumulate(arg1, arg2, arg3):
    r"""bdd_or_accumulate(DdManager * arg1, bdd_ptr * arg2, bdd_ptr arg3)"""
    return _dd.bdd_or_accumulate(arg1, arg2, arg3)

def bdd_xor(arg1, arg2, arg3):
    r"""bdd_xor(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_xor(arg1, arg2, arg3)

def bdd_iff(arg1, arg2, arg3):
    r"""bdd_iff(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_iff(arg1, arg2, arg3)

def bdd_imply(arg1, arg2, arg3):
    r"""bdd_imply(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_imply(arg1, arg2, arg3)

def bdd_forsome(arg1, arg2, arg3):
    r"""bdd_forsome(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_forsome(arg1, arg2, arg3)

def bdd_forall(arg1, arg2, arg3):
    r"""bdd_forall(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_forall(arg1, arg2, arg3)

def bdd_permute(arg1, arg2, arg3):
    r"""bdd_permute(DdManager * arg1, bdd_ptr arg2, int * arg3) -> bdd_ptr"""
    return _dd.bdd_permute(arg1, arg2, arg3)

def bdd_and_abstract(arg1, arg2, arg3, arg4):
    r"""bdd_and_abstract(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3, bdd_ptr arg4) -> bdd_ptr"""
    return _dd.bdd_and_abstract(arg1, arg2, arg3, arg4)

def bdd_simplify_assuming(arg1, arg2, arg3):
    r"""bdd_simplify_assuming(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_simplify_assuming(arg1, arg2, arg3)

def bdd_minimize(arg1, arg2, arg3):
    r"""bdd_minimize(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_minimize(arg1, arg2, arg3)

def bdd_cofactor(arg1, arg2, arg3):
    r"""bdd_cofactor(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_cofactor(arg1, arg2, arg3)

def bdd_between(arg1, arg2, arg3):
    r"""bdd_between(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_between(arg1, arg2, arg3)

def bdd_entailed(dd, f, g):
    r"""bdd_entailed(DdManager * dd, bdd_ptr f, bdd_ptr g) -> int"""
    return _dd.bdd_entailed(dd, f, g)

def bdd_intersected(dd, f, g):
    r"""bdd_intersected(DdManager * dd, bdd_ptr f, bdd_ptr g) -> int"""
    return _dd.bdd_intersected(dd, f, g)

def bdd_then(arg1, arg2):
    r"""bdd_then(DdManager * arg1, bdd_ptr arg2) -> bdd_ptr"""
    return _dd.bdd_then(arg1, arg2)

def bdd_else(arg1, arg2):
    r"""bdd_else(DdManager * arg1, bdd_ptr arg2) -> bdd_ptr"""
    return _dd.bdd_else(arg1, arg2)

def bdd_ite(arg1, arg2, arg3, arg4):
    r"""bdd_ite(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3, bdd_ptr arg4) -> bdd_ptr"""
    return _dd.bdd_ite(arg1, arg2, arg3, arg4)

def bdd_iscomplement(arg1, arg2):
    r"""bdd_iscomplement(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_iscomplement(arg1, arg2)

def bdd_readperm(arg1, arg2):
    r"""bdd_readperm(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_readperm(arg1, arg2)

def bdd_index(arg1, arg2):
    r"""bdd_index(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_index(arg1, arg2)

def bdd_pick_one_minterm(arg1, arg2, arg3, arg4):
    r"""bdd_pick_one_minterm(DdManager * arg1, bdd_ptr arg2, bdd_ptr * arg3, int arg4) -> bdd_ptr"""
    return _dd.bdd_pick_one_minterm(arg1, arg2, arg3, arg4)

def bdd_pick_one_minterm_rand(arg1, arg2, arg3, arg4):
    r"""bdd_pick_one_minterm_rand(DdManager * arg1, bdd_ptr arg2, bdd_ptr * arg3, int arg4) -> bdd_ptr"""
    return _dd.bdd_pick_one_minterm_rand(arg1, arg2, arg3, arg4)

def bdd_pick_all_terms(arg1, arg2, arg3, arg4, arg5, arg6):
    r"""bdd_pick_all_terms(DdManager * arg1, bdd_ptr arg2, bdd_ptr * arg3, int arg4, bdd_ptr * arg5, int arg6) -> int"""
    return _dd.bdd_pick_all_terms(arg1, arg2, arg3, arg4, arg5, arg6)

def bdd_support(arg1, arg2):
    r"""bdd_support(DdManager * arg1, bdd_ptr arg2) -> bdd_ptr"""
    return _dd.bdd_support(arg1, arg2)

def bdd_size(arg1, arg2):
    r"""bdd_size(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_size(arg1, arg2)

def bdd_count_minterm(arg1, arg2, arg3):
    r"""bdd_count_minterm(DdManager * arg1, bdd_ptr arg2, int arg3) -> double"""
    return _dd.bdd_count_minterm(arg1, arg2, arg3)

def bdd_new_var_with_index(arg1, arg2):
    r"""bdd_new_var_with_index(DdManager * arg1, int arg2) -> bdd_ptr"""
    return _dd.bdd_new_var_with_index(arg1, arg2)

def bdd_get_one_sparse_sat(arg1, arg2):
    r"""bdd_get_one_sparse_sat(DdManager * arg1, bdd_ptr arg2) -> bdd_ptr"""
    return _dd.bdd_get_one_sparse_sat(arg1, arg2)

def dd_set_parameters(arg1, arg2, arg3):
    r"""dd_set_parameters(DdManager * arg1, OptsHandler_ptr arg2, FILE * arg3) -> int"""
    return _dd.dd_set_parameters(arg1, arg2, arg3)

def dd_print_stats(arg1, arg2):
    r"""dd_print_stats(DdManager * arg1, FILE * arg2)"""
    return _dd.dd_print_stats(arg1, arg2)

def bdd_cube_diff(arg1, arg2, arg3):
    r"""bdd_cube_diff(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_cube_diff(arg1, arg2, arg3)

def bdd_cube_union(arg1, arg2, arg3):
    r"""bdd_cube_union(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_cube_union(arg1, arg2, arg3)

def bdd_cube_intersection(arg1, arg2, arg3):
    r"""bdd_cube_intersection(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_cube_intersection(arg1, arg2, arg3)

def bdd_get_lowest_index(arg1, arg2):
    r"""bdd_get_lowest_index(DdManager * arg1, bdd_ptr arg2) -> int"""
    return _dd.bdd_get_lowest_index(arg1, arg2)

def dd_printminterm(arg1, arg2):
    r"""dd_printminterm(DdManager * arg1, dd_ptr arg2) -> int"""
    return _dd.dd_printminterm(arg1, arg2)

def dd_dump_dot(arg1, arg2, arg3, arg4, arg5, arg6):
    r"""dd_dump_dot(DdManager * arg1, int arg2, dd_ptr * arg3, char const ** arg4, char const ** arg5, FILE * arg6) -> int"""
    return _dd.dd_dump_dot(arg1, arg2, arg3, arg4, arg5, arg6)

def dd_dump_davinci(arg1, arg2, arg3, arg4, arg5, arg6):
    r"""dd_dump_davinci(DdManager * arg1, int arg2, dd_ptr * arg3, char const ** arg4, char const ** arg5, FILE * arg6) -> int"""
    return _dd.dd_dump_davinci(arg1, arg2, arg3, arg4, arg5, arg6)

def dd_AddCmd():
    r"""dd_AddCmd()"""
    return _dd.dd_AddCmd()

def bdd_largest_cube(arg1, arg2, arg3):
    r"""bdd_largest_cube(DdManager * arg1, bdd_ptr arg2, int * arg3) -> bdd_ptr"""
    return _dd.bdd_largest_cube(arg1, arg2, arg3)

def bdd_compute_prime_low(arg1, arg2, arg3):
    r"""bdd_compute_prime_low(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> bdd_ptr"""
    return _dd.bdd_compute_prime_low(arg1, arg2, arg3)

def bdd_compute_primes_low(arg1, arg2, arg3):
    r"""bdd_compute_primes_low(DdManager * arg1, bdd_ptr arg2, bdd_ptr arg3) -> array_t *"""
    return _dd.bdd_compute_primes_low(arg1, arg2, arg3)

def bdd_compute_primes(dd, b):
    r"""bdd_compute_primes(DdManager * dd, bdd_ptr b) -> array_t *"""
    return _dd.bdd_compute_primes(dd, b)

def bdd_make_prime(dd, cube, b):
    r"""bdd_make_prime(DdManager * dd, bdd_ptr cube, bdd_ptr b) -> bdd_ptr"""
    return _dd.bdd_make_prime(dd, cube, b)

def bdd_compute_essentials(dd, b):
    r"""bdd_compute_essentials(DdManager * dd, bdd_ptr b) -> bdd_ptr"""
    return _dd.bdd_compute_essentials(dd, b)

def bdd_DumpBlif(dd, n, f, inames, onames, mname, fp):
    r"""bdd_DumpBlif(DdManager * dd, int n, bdd_ptr * f, char ** inames, char ** onames, char * mname, FILE * fp) -> int"""
    return _dd.bdd_DumpBlif(dd, n, f, inames, onames, mname, fp)

def bdd_DumpBlifBody(dd, n, f, inames, onames, fp):
    r"""bdd_DumpBlifBody(DdManager * dd, int n, bdd_ptr * f, char ** inames, char ** onames, FILE * fp) -> int"""
    return _dd.bdd_DumpBlifBody(dd, n, f, inames, onames, fp)

def bdd_leq(dd, f, g):
    r"""bdd_leq(DdManager * dd, bdd_ptr f, bdd_ptr g) -> int"""
    return _dd.bdd_leq(dd, f, g)

def bdd_swap_variables(dd, f, x_varlist, y_varlist, n):
    r"""bdd_swap_variables(DdManager * dd, bdd_ptr f, bdd_ptr * x_varlist, bdd_ptr * y_varlist, int n) -> bdd_ptr"""
    return _dd.bdd_swap_variables(dd, f, x_varlist, y_varlist, n)

def bdd_compose(dd, f, g, v):
    r"""bdd_compose(DdManager * dd, bdd_ptr f, bdd_ptr g, int v) -> bdd_ptr"""
    return _dd.bdd_compose(dd, f, g, v)

def bdd_ref_count(n):
    r"""bdd_ref_count(bdd_ptr n) -> int"""
    return _dd.bdd_ref_count(n)

def calculate_bdd_value(mgr, f, values):
    r"""calculate_bdd_value(DdManager * mgr, bdd_ptr f, int * values) -> int"""
    return _dd.calculate_bdd_value(mgr, f, values)

def VarsHandler_create(dd):
    r"""VarsHandler_create(DdManager * dd) -> VarsHandler_ptr"""
    return _dd.VarsHandler_create(dd)

def VarsHandler_destroy(_self):
    r"""VarsHandler_destroy(VarsHandler_ptr _self)"""
    return _dd.VarsHandler_destroy(_self)

def VarsHandler_get_dd_manager(_self):
    r"""VarsHandler_get_dd_manager(VarsHandler_ptr const _self) -> DdManager *"""
    return _dd.VarsHandler_get_dd_manager(_self)

def VarsHandler_reserve_group(_self, from_lev, size, chunk, can_share, lev_low):
    r"""VarsHandler_reserve_group(VarsHandler_ptr _self, int from_lev, int size, int chunk, boolean can_share, int * lev_low) -> GroupInfo_ptr"""
    return _dd.VarsHandler_reserve_group(_self, from_lev, size, chunk, can_share, lev_low)

def VarsHandler_can_group(_self, from_lev, size, chunk):
    r"""VarsHandler_can_group(VarsHandler_ptr const _self, int from_lev, int size, int chunk) -> boolean"""
    return _dd.VarsHandler_can_group(_self, from_lev, size, chunk)

def VarsHandler_release_group(_self, bid):
    r"""VarsHandler_release_group(VarsHandler_ptr _self, GroupInfo_ptr bid) -> boolean"""
    return _dd.VarsHandler_release_group(_self, bid)

def VarsHandler_dissolve_group(_self, bid):
    r"""VarsHandler_dissolve_group(VarsHandler_ptr _self, GroupInfo_ptr bid)"""
    return _dd.VarsHandler_dissolve_group(_self, bid)

def VarsHandler_update_levels(_self):
    r"""VarsHandler_update_levels(VarsHandler_ptr _self)"""
    return _dd.VarsHandler_update_levels(_self)

