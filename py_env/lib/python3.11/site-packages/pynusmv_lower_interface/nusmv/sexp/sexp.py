# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sexp
else:
    import _sexp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _sexp.PRIuPTR

PRIdPTR = _sexp.PRIdPTR

LLU = _sexp.LLU

LLO = _sexp.LLO

LLX = _sexp.LLX

false = _sexp.false

true = _sexp.true

OUTCOME_GENERIC_ERROR = _sexp.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _sexp.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _sexp.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _sexp.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _sexp.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _sexp.OUTCOME_SUCCESS


def SexpInliner_create(st, fixpoint_limit):
    r"""SexpInliner_create(SymbTable_ptr st, size_t const fixpoint_limit) -> SexpInliner_ptr"""
    return _sexp.SexpInliner_create(st, fixpoint_limit)

def SexpInliner_copy(_self):
    r"""SexpInliner_copy(SexpInliner_ptr const _self) -> SexpInliner_ptr"""
    return _sexp.SexpInliner_copy(_self)

def SexpInliner_destroy(_self):
    r"""SexpInliner_destroy(SexpInliner_ptr _self)"""
    return _sexp.SexpInliner_destroy(_self)

def SexpInliner_get_symb_table(_self):
    r"""SexpInliner_get_symb_table(SexpInliner_ptr const _self) -> SymbTable_ptr"""
    return _sexp.SexpInliner_get_symb_table(_self)

def SexpInliner_force_equivalence(_self, var, expr):
    r"""SexpInliner_force_equivalence(SexpInliner_ptr _self, node_ptr var, Expr_ptr expr) -> boolean"""
    return _sexp.SexpInliner_force_equivalence(_self, var, expr)

def SexpInliner_force_equivalences(_self, equivs):
    r"""SexpInliner_force_equivalences(SexpInliner_ptr _self, Set_t equivs) -> boolean"""
    return _sexp.SexpInliner_force_equivalences(_self, equivs)

def SexpInliner_force_invariant(_self, var, expr):
    r"""SexpInliner_force_invariant(SexpInliner_ptr _self, node_ptr var, Expr_ptr expr) -> boolean"""
    return _sexp.SexpInliner_force_invariant(_self, var, expr)

def SexpInliner_force_invariants(_self, invars):
    r"""SexpInliner_force_invariants(SexpInliner_ptr _self, Set_t invars) -> boolean"""
    return _sexp.SexpInliner_force_invariants(_self, invars)

def SexpInliner_blacklist_name(_self, var):
    r"""SexpInliner_blacklist_name(SexpInliner_ptr _self, node_ptr var)"""
    return _sexp.SexpInliner_blacklist_name(_self, var)

def SexpInliner_clear_equivalences(_self):
    r"""SexpInliner_clear_equivalences(SexpInliner_ptr _self)"""
    return _sexp.SexpInliner_clear_equivalences(_self)

def SexpInliner_clear_invariants(_self):
    r"""SexpInliner_clear_invariants(SexpInliner_ptr _self)"""
    return _sexp.SexpInliner_clear_invariants(_self)

def SexpInliner_clear_blacklist(_self):
    r"""SexpInliner_clear_blacklist(SexpInliner_ptr _self)"""
    return _sexp.SexpInliner_clear_blacklist(_self)

def SexpInliner_inline(_self, expr, changed):
    r"""SexpInliner_inline(SexpInliner_ptr _self, Expr_ptr expr, boolean * changed) -> InlineRes_ptr"""
    return _sexp.SexpInliner_inline(_self, expr, changed)

def SexpInliner_inline_no_learning(_self, expr, changed):
    r"""SexpInliner_inline_no_learning(SexpInliner_ptr _self, Expr_ptr expr, boolean * changed) -> Expr_ptr"""
    return _sexp.SexpInliner_inline_no_learning(_self, expr, changed)

def SexpInliner_get_var2expr_hash(_self):
    r"""SexpInliner_get_var2expr_hash(SexpInliner_ptr _self) -> hash_ptr"""
    return _sexp.SexpInliner_get_var2expr_hash(_self)

def SexpInliner_get_var2invar_hash(_self):
    r"""SexpInliner_get_var2invar_hash(SexpInliner_ptr _self) -> hash_ptr"""
    return _sexp.SexpInliner_get_var2invar_hash(_self)

def InlineRes_destroy(_self):
    r"""InlineRes_destroy(InlineRes_ptr _self)"""
    return _sexp.InlineRes_destroy(_self)

def InlineRes_get_original_expr(_self):
    r"""InlineRes_get_original_expr(InlineRes_ptr const _self) -> Expr_ptr"""
    return _sexp.InlineRes_get_original_expr(_self)

def InlineRes_get_result(_self):
    r"""InlineRes_get_result(InlineRes_ptr const _self) -> Expr_ptr"""
    return _sexp.InlineRes_get_result(_self)

def InlineRes_get_result_unique(_self):
    r"""InlineRes_get_result_unique(InlineRes_ptr const _self) -> Expr_ptr"""
    return _sexp.InlineRes_get_result_unique(_self)

def InlineRes_get_inlined_expr(_self):
    r"""InlineRes_get_inlined_expr(InlineRes_ptr const _self) -> Expr_ptr"""
    return _sexp.InlineRes_get_inlined_expr(_self)

def InlineRes_get_equivalences_expr(_self):
    r"""InlineRes_get_equivalences_expr(InlineRes_ptr const _self) -> Expr_ptr"""
    return _sexp.InlineRes_get_equivalences_expr(_self)

def InlineRes_get_equivalences(_self):
    r"""InlineRes_get_equivalences(InlineRes_ptr const _self) -> Set_t"""
    return _sexp.InlineRes_get_equivalences(_self)

def InlineRes_get_invariant_expr(_self):
    r"""InlineRes_get_invariant_expr(InlineRes_ptr const _self) -> Expr_ptr"""
    return _sexp.InlineRes_get_invariant_expr(_self)

def InlineRes_get_invariants(_self):
    r"""InlineRes_get_invariants(InlineRes_ptr const _self) -> Set_t"""
    return _sexp.InlineRes_get_invariants(_self)

