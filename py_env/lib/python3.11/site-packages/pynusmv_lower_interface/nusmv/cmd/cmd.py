# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cmd
else:
    import _cmd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _cmd.PRIuPTR

PRIdPTR = _cmd.PRIdPTR

LLU = _cmd.LLU

LLO = _cmd.LLO

LLX = _cmd.LLX

false = _cmd.false

true = _cmd.true

OUTCOME_GENERIC_ERROR = _cmd.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _cmd.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _cmd.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _cmd.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _cmd.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _cmd.OUTCOME_SUCCESS


def Cmd_CommandAdd(name, funcFp, changes, reentrant):
    r"""Cmd_CommandAdd(char * name, PFI funcFp, int changes, boolean reentrant)"""
    return _cmd.Cmd_CommandAdd(name, funcFp, changes, reentrant)

def Cmd_CommandRemove(name):
    r"""Cmd_CommandRemove(char const * name) -> boolean"""
    return _cmd.Cmd_CommandRemove(name)

def Cmd_CommandExecute(command):
    r"""Cmd_CommandExecute(char * command) -> int"""
    return _cmd.Cmd_CommandExecute(command)

def Cmd_SecureCommandExecute(command):
    r"""Cmd_SecureCommandExecute(char * command) -> int"""
    return _cmd.Cmd_SecureCommandExecute(command)

def Cmd_FileOpen(fileName, mode, realFileName_p, silent):
    r"""Cmd_FileOpen(char * fileName, char * mode, char ** realFileName_p, int silent) -> FILE *"""
    return _cmd.Cmd_FileOpen(fileName, mode, realFileName_p, silent)

def Cmd_Init():
    r"""Cmd_Init()"""
    return _cmd.Cmd_Init()

def Cmd_End():
    r"""Cmd_End()"""
    return _cmd.Cmd_End()

def CmdOpenPipe(useMore):
    r"""CmdOpenPipe(int useMore) -> FILE *"""
    return _cmd.CmdOpenPipe(useMore)

def CmdClosePipe(file):
    r"""CmdClosePipe(FILE * file)"""
    return _cmd.CmdClosePipe(file)

def CmdOpenFile(filename):
    r"""CmdOpenFile(char const * filename) -> FILE *"""
    return _cmd.CmdOpenFile(filename)

def CmdCloseFile(file):
    r"""CmdCloseFile(FILE * file)"""
    return _cmd.CmdCloseFile(file)

