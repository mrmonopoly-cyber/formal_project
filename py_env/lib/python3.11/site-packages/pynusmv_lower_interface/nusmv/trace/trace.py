# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _trace
else:
    import _trace

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _trace.PRIuPTR

PRIdPTR = _trace.PRIdPTR

LLU = _trace.LLU

LLO = _trace.LLO

LLX = _trace.LLX

false = _trace.false

true = _trace.true

OUTCOME_GENERIC_ERROR = _trace.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _trace.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _trace.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _trace.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _trace.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _trace.OUTCOME_SUCCESS


def TracePkg_init():
    r"""TracePkg_init()"""
    return _trace.TracePkg_init()

def TracePkg_quit():
    r"""TracePkg_quit()"""
    return _trace.TracePkg_quit()

def traceCmd_init():
    r"""traceCmd_init()"""
    return _trace.traceCmd_init()

def CommandShowTraces(argc, argv):
    r"""CommandShowTraces(int argc, char ** argv) -> int"""
    return _trace.CommandShowTraces(argc, argv)

def CommandShowPlugins(argc, argv):
    r"""CommandShowPlugins(int argc, char ** argv) -> int"""
    return _trace.CommandShowPlugins(argc, argv)

def CommandReadTrace(argc, argv):
    r"""CommandReadTrace(int argc, char ** argv) -> int"""
    return _trace.CommandReadTrace(argc, argv)

def CommandExecuteTraces(argc, argv):
    r"""CommandExecuteTraces(int argc, char ** argv) -> int"""
    return _trace.CommandExecuteTraces(argc, argv)

def CommandExecutePartialTraces(argc, argv):
    r"""CommandExecutePartialTraces(int argc, char ** argv) -> int"""
    return _trace.CommandExecutePartialTraces(argc, argv)

def TracePkg_get_filtered_symbols(symbols):
    r"""TracePkg_get_filtered_symbols(NodeList_ptr const symbols) -> NodeList_ptr"""
    return _trace.TracePkg_get_filtered_symbols(symbols)

def TracePkg_get_global_trace_manager():
    r"""TracePkg_get_global_trace_manager() -> TraceManager_ptr"""
    return _trace.TracePkg_get_global_trace_manager()

def TracePkg_get_default_trace_plugin():
    r"""TracePkg_get_default_trace_plugin() -> int"""
    return _trace.TracePkg_get_default_trace_plugin()

def TracePkg_set_default_trace_plugin(dp):
    r"""TracePkg_set_default_trace_plugin(int dp) -> boolean"""
    return _trace.TracePkg_set_default_trace_plugin(dp)

def Trace_execute_trace(trace, exec_info):
    r"""Trace_execute_trace(Trace_ptr trace, CompleteTraceExecutor_ptr exec_info) -> int"""
    return _trace.Trace_execute_trace(trace, exec_info)

def Trace_execute_partial_trace(trace, exec_info, language):
    r"""Trace_execute_partial_trace(Trace_ptr trace, PartialTraceExecutor_ptr exec_info, NodeList_ptr language) -> int"""
    return _trace.Trace_execute_partial_trace(trace, exec_info, language)

def TraceUtils_fetch_as_bdd(trace, step, iter_type, bdd_enc):
    r"""TraceUtils_fetch_as_bdd(Trace_ptr trace, TraceIter step, TraceIteratorType iter_type, BddEnc_ptr bdd_enc) -> bdd_ptr"""
    return _trace.TraceUtils_fetch_as_bdd(trace, step, iter_type, bdd_enc)

def TraceUtils_fetch_as_be(trace, step, iter_type, be_enc, bdd_enc):
    r"""TraceUtils_fetch_as_be(Trace_ptr trace, TraceIter step, TraceIteratorType iter_type, BeEnc_ptr be_enc, BddEnc_ptr bdd_enc) -> be_ptr"""
    return _trace.TraceUtils_fetch_as_be(trace, step, iter_type, be_enc, bdd_enc)

def TraceUtils_fetch_as_sexp(trace, step, iter_type):
    r"""TraceUtils_fetch_as_sexp(Trace_ptr trace, TraceIter step, TraceIteratorType iter_type) -> Expr_ptr"""
    return _trace.TraceUtils_fetch_as_sexp(trace, step, iter_type)

def TraceUtils_fetch_as_big_and(trace, step, iter_type):
    r"""TraceUtils_fetch_as_big_and(Trace_ptr trace, TraceIter step, TraceIteratorType iter_type) -> Expr_ptr"""
    return _trace.TraceUtils_fetch_as_big_and(trace, step, iter_type)
TRACE_TYPE_UNSPECIFIED = _trace.TRACE_TYPE_UNSPECIFIED

TRACE_TYPE_CNTEXAMPLE = _trace.TRACE_TYPE_CNTEXAMPLE

TRACE_TYPE_SIMULATION = _trace.TRACE_TYPE_SIMULATION

TRACE_TYPE_EXECUTION = _trace.TRACE_TYPE_EXECUTION

TRACE_TYPE_END = _trace.TRACE_TYPE_END

TRACE_ITER_NONE = _trace.TRACE_ITER_NONE

TRACE_ITER_F_VARS = _trace.TRACE_ITER_F_VARS

TRACE_ITER_S_VARS = _trace.TRACE_ITER_S_VARS

TRACE_ITER_I_VARS = _trace.TRACE_ITER_I_VARS

TRACE_ITER_SF_VARS = _trace.TRACE_ITER_SF_VARS

TRACE_ITER_ALL_VARS = _trace.TRACE_ITER_ALL_VARS

TRACE_ITER_S_DEFINES = _trace.TRACE_ITER_S_DEFINES

TRACE_ITER_I_DEFINES = _trace.TRACE_ITER_I_DEFINES

TRACE_ITER_SI_DEFINES = _trace.TRACE_ITER_SI_DEFINES

TRACE_ITER_N_DEFINES = _trace.TRACE_ITER_N_DEFINES

TRACE_ITER_SN_DEFINES = _trace.TRACE_ITER_SN_DEFINES

TRACE_ITER_IN_DEFINES = _trace.TRACE_ITER_IN_DEFINES

TRACE_ITER_SIN_DEFINES = _trace.TRACE_ITER_SIN_DEFINES

TRACE_ITER_SF_SYMBOLS = _trace.TRACE_ITER_SF_SYMBOLS

TRACE_ITER_S_SYMBOLS = _trace.TRACE_ITER_S_SYMBOLS

TRACE_ITER_I_SYMBOLS = _trace.TRACE_ITER_I_SYMBOLS

TRACE_ITER_COMBINATORIAL = _trace.TRACE_ITER_COMBINATORIAL

TRACE_ITER_TRANSITIONAL = _trace.TRACE_ITER_TRANSITIONAL

class TraceStepIter(object):
    r"""Proxy of C TraceStepIter_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    trace = property(_trace.TraceStepIter_trace_get, _trace.TraceStepIter_trace_set, doc=r"""trace : Trace_ptr""")
    step = property(_trace.TraceStepIter_step_get, _trace.TraceStepIter_step_set, doc=r"""step : TraceIter""")
    type = property(_trace.TraceStepIter_type_get, _trace.TraceStepIter_type_set, doc=r"""type : TraceIteratorType""")
    section = property(_trace.TraceStepIter_section_get, _trace.TraceStepIter_section_set, doc=r"""section : unsigned int""")
    cursor = property(_trace.TraceStepIter_cursor_get, _trace.TraceStepIter_cursor_set, doc=r"""cursor : unsigned int""")

    def __init__(self):
        r"""__init__(TraceStepIter self) -> TraceStepIter"""
        _trace.TraceStepIter_swiginit(self, _trace.new_TraceStepIter())
    __swig_destroy__ = _trace.delete_TraceStepIter

# Register TraceStepIter in _trace:
_trace.TraceStepIter_swigregister(TraceStepIter)
class TraceSymbolsIter(object):
    r"""Proxy of C TraceSymbolsIter_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    trace = property(_trace.TraceSymbolsIter_trace_get, _trace.TraceSymbolsIter_trace_set, doc=r"""trace : Trace_ptr""")
    type = property(_trace.TraceSymbolsIter_type_get, _trace.TraceSymbolsIter_type_set, doc=r"""type : TraceIteratorType""")
    section = property(_trace.TraceSymbolsIter_section_get, _trace.TraceSymbolsIter_section_set, doc=r"""section : unsigned int""")
    cursor = property(_trace.TraceSymbolsIter_cursor_get, _trace.TraceSymbolsIter_cursor_set, doc=r"""cursor : unsigned int""")

    def __init__(self):
        r"""__init__(TraceSymbolsIter self) -> TraceSymbolsIter"""
        _trace.TraceSymbolsIter_swiginit(self, _trace.new_TraceSymbolsIter())
    __swig_destroy__ = _trace.delete_TraceSymbolsIter

# Register TraceSymbolsIter in _trace:
_trace.TraceSymbolsIter_swigregister(TraceSymbolsIter)
TRACE_UNREGISTERED = _trace.TRACE_UNREGISTERED


def Trace_create(st, desc, type, symbols, is_volatile):
    r"""Trace_create(SymbTable_ptr st, char const * desc, TraceType const type, NodeList_ptr symbols, boolean is_volatile) -> Trace_ptr"""
    return _trace.Trace_create(st, desc, type, symbols, is_volatile)

def Trace_copy(_self, until_here, is_volatile):
    r"""Trace_copy(Trace_ptr const _self, TraceIter const until_here, boolean is_volatile) -> Trace_ptr"""
    return _trace.Trace_copy(_self, until_here, is_volatile)

def Trace_concat(_self, other):
    r"""Trace_concat(Trace_ptr _self, Trace_ptr * other) -> Trace_ptr"""
    return _trace.Trace_concat(_self, other)

def Trace_destroy(_self):
    r"""Trace_destroy(Trace_ptr _self)"""
    return _trace.Trace_destroy(_self)

def Trace_get_desc(_self):
    r"""Trace_get_desc(Trace_ptr const _self) -> char const *"""
    return _trace.Trace_get_desc(_self)

def Trace_set_desc(_self, desc):
    r"""Trace_set_desc(Trace_ptr const _self, char const * desc)"""
    return _trace.Trace_set_desc(_self, desc)

def Trace_is_volatile(_self):
    r"""Trace_is_volatile(Trace_ptr const _self) -> boolean"""
    return _trace.Trace_is_volatile(_self)

def Trace_get_id(_self):
    r"""Trace_get_id(Trace_ptr const _self) -> int"""
    return _trace.Trace_get_id(_self)

def Trace_is_registered(_self):
    r"""Trace_is_registered(Trace_ptr const _self) -> boolean"""
    return _trace.Trace_is_registered(_self)

def Trace_register(_self, id):
    r"""Trace_register(Trace_ptr const _self, int id)"""
    return _trace.Trace_register(_self, id)

def Trace_unregister(_self):
    r"""Trace_unregister(Trace_ptr const _self)"""
    return _trace.Trace_unregister(_self)

def Trace_get_type(_self):
    r"""Trace_get_type(Trace_ptr const _self) -> TraceType"""
    return _trace.Trace_get_type(_self)

def Trace_set_type(_self, trace_type):
    r"""Trace_set_type(Trace_ptr _self, TraceType trace_type)"""
    return _trace.Trace_set_type(_self, trace_type)

def Trace_get_length(_self):
    r"""Trace_get_length(Trace_ptr const _self) -> unsigned int"""
    return _trace.Trace_get_length(_self)

def Trace_is_empty(_self):
    r"""Trace_is_empty(Trace_ptr const _self) -> boolean"""
    return _trace.Trace_is_empty(_self)

def Trace_is_frozen(_self):
    r"""Trace_is_frozen(Trace_ptr const _self) -> boolean"""
    return _trace.Trace_is_frozen(_self)

def Trace_is_thawed(_self):
    r"""Trace_is_thawed(Trace_ptr const _self) -> boolean"""
    return _trace.Trace_is_thawed(_self)

def Trace_freeze(_self):
    r"""Trace_freeze(Trace_ptr _self)"""
    return _trace.Trace_freeze(_self)

def Trace_thaw(_self):
    r"""Trace_thaw(Trace_ptr _self)"""
    return _trace.Trace_thaw(_self)

def Trace_equals(_self, other):
    r"""Trace_equals(Trace_ptr const _self, Trace_ptr const other) -> boolean"""
    return _trace.Trace_equals(_self, other)

def Trace_append_step(_self):
    r"""Trace_append_step(Trace_ptr _self) -> TraceIter"""
    return _trace.Trace_append_step(_self)

def Trace_step_is_loopback(_self, step):
    r"""Trace_step_is_loopback(Trace_ptr const _self, TraceIter step) -> boolean"""
    return _trace.Trace_step_is_loopback(_self, step)

def Trace_step_force_loopback(_self, step):
    r"""Trace_step_force_loopback(Trace_ptr const _self, TraceIter step)"""
    return _trace.Trace_step_force_loopback(_self, step)

def Trace_step_put_value(_self, step, symb, value):
    r"""Trace_step_put_value(Trace_ptr _self, TraceIter step, node_ptr symb, node_ptr value) -> boolean"""
    return _trace.Trace_step_put_value(_self, step, symb, value)

def Trace_step_get_value(_self, step, symb):
    r"""Trace_step_get_value(Trace_ptr const _self, TraceIter step, node_ptr symb) -> node_ptr"""
    return _trace.Trace_step_get_value(_self, step, symb)

def Trace_first_iter(_self):
    r"""Trace_first_iter(Trace_ptr const _self) -> TraceIter"""
    return _trace.Trace_first_iter(_self)

def Trace_ith_iter(_self, i):
    r"""Trace_ith_iter(Trace_ptr const _self, unsigned int i) -> TraceIter"""
    return _trace.Trace_ith_iter(_self, i)

def Trace_last_iter(_self):
    r"""Trace_last_iter(Trace_ptr const _self) -> TraceIter"""
    return _trace.Trace_last_iter(_self)

def TraceIter_get_next(iter):
    r"""TraceIter_get_next(TraceIter const iter) -> TraceIter"""
    return _trace.TraceIter_get_next(iter)

def TraceIter_get_prev(iter):
    r"""TraceIter_get_prev(TraceIter const iter) -> TraceIter"""
    return _trace.TraceIter_get_prev(iter)

def TraceIter_is_end(iter):
    r"""TraceIter_is_end(TraceIter const iter) -> boolean"""
    return _trace.TraceIter_is_end(iter)

def Trace_step_iter(_self, step, iter_type):
    r"""Trace_step_iter(Trace_ptr const _self, TraceIter const step, TraceIteratorType const iter_type) -> TraceStepIter"""
    return _trace.Trace_step_iter(_self, step, iter_type)

def Trace_step_iter_fetch(step_iter, symb, value):
    r"""Trace_step_iter_fetch(TraceStepIter step_iter, node_ptr * symb, node_ptr * value) -> boolean"""
    return _trace.Trace_step_iter_fetch(step_iter, symb, value)

def Trace_symbols_iter(_self, iter_type):
    r"""Trace_symbols_iter(Trace_ptr const _self, TraceIteratorType const iter_type) -> TraceSymbolsIter"""
    return _trace.Trace_symbols_iter(_self, iter_type)

def Trace_symbols_iter_fetch(symbols_iter, symb):
    r"""Trace_symbols_iter_fetch(TraceSymbolsIter symbols_iter, node_ptr * symb) -> boolean"""
    return _trace.Trace_symbols_iter_fetch(symbols_iter, symb)

def Trace_get_symb_table(_self):
    r"""Trace_get_symb_table(Trace_ptr _self) -> SymbTable_ptr"""
    return _trace.Trace_get_symb_table(_self)

def Trace_get_symbols(_self):
    r"""Trace_get_symbols(Trace_ptr const _self) -> NodeList_ptr"""
    return _trace.Trace_get_symbols(_self)

def Trace_get_s_vars(_self):
    r"""Trace_get_s_vars(Trace_ptr const _self) -> NodeList_ptr"""
    return _trace.Trace_get_s_vars(_self)

def Trace_get_sf_vars(_self):
    r"""Trace_get_sf_vars(Trace_ptr const _self) -> NodeList_ptr"""
    return _trace.Trace_get_sf_vars(_self)

def Trace_get_i_vars(_self):
    r"""Trace_get_i_vars(Trace_ptr const _self) -> NodeList_ptr"""
    return _trace.Trace_get_i_vars(_self)

def Trace_symbol_in_language(_self, symb):
    r"""Trace_symbol_in_language(Trace_ptr const _self, node_ptr symb) -> boolean"""
    return _trace.Trace_symbol_in_language(_self, symb)

def Trace_is_complete(_self, vars, report):
    r"""Trace_is_complete(Trace_ptr _self, NodeList_ptr vars, boolean report) -> boolean"""
    return _trace.Trace_is_complete(_self, vars, report)

def TraceType_to_string(_self):
    r"""TraceType_to_string(TraceType const _self) -> char const *"""
    return _trace.TraceType_to_string(_self)

def TraceLabel_create(trace_id, state_id):
    r"""TraceLabel_create(int trace_id, int state_id) -> TraceLabel"""
    return _trace.TraceLabel_create(trace_id, state_id)

def TraceLabel_create_from_string(label_str):
    r"""TraceLabel_create_from_string(char const * label_str) -> TraceLabel"""
    return _trace.TraceLabel_create_from_string(label_str)

def TraceLabel_get_state(_self):
    r"""TraceLabel_get_state(TraceLabel _self) -> int"""
    return _trace.TraceLabel_get_state(_self)

def TraceLabel_get_trace(_self):
    r"""TraceLabel_get_trace(TraceLabel _self) -> int"""
    return _trace.TraceLabel_get_trace(_self)
TRACE_MANAGER_DEFAULT_PLUGIN = _trace.TRACE_MANAGER_DEFAULT_PLUGIN

TRACE_MANAGER_LAST_TRACE = _trace.TRACE_MANAGER_LAST_TRACE


def TraceManager_create():
    r"""TraceManager_create() -> TraceManager_ptr"""
    return _trace.TraceManager_create()

def TraceManager_destroy(_self):
    r"""TraceManager_destroy(TraceManager_ptr _self)"""
    return _trace.TraceManager_destroy(_self)

def TraceManager_get_size(_self):
    r"""TraceManager_get_size(TraceManager_ptr const _self) -> int"""
    return _trace.TraceManager_get_size(_self)

def TraceManager_get_plugin_size(_self):
    r"""TraceManager_get_plugin_size(TraceManager_ptr const _self) -> int"""
    return _trace.TraceManager_get_plugin_size(_self)

def TraceManager_get_internal_plugin_size(_self):
    r"""TraceManager_get_internal_plugin_size(TraceManager_ptr const _self) -> int"""
    return _trace.TraceManager_get_internal_plugin_size(_self)

def TraceManager_get_trace_at_index(_self, index):
    r"""TraceManager_get_trace_at_index(TraceManager_ptr const _self, int index) -> Trace_ptr"""
    return _trace.TraceManager_get_trace_at_index(_self, index)

def TraceManager_get_plugin_at_index(_self, index):
    r"""TraceManager_get_plugin_at_index(TraceManager_ptr const _self, int index) -> TracePlugin_ptr"""
    return _trace.TraceManager_get_plugin_at_index(_self, index)

def TraceManager_register_trace(_self, trace):
    r"""TraceManager_register_trace(TraceManager_ptr _self, Trace_ptr trace) -> int"""
    return _trace.TraceManager_register_trace(_self, trace)

def TraceManager_init_plugins(_self):
    r"""TraceManager_init_plugins(TraceManager_ptr _self)"""
    return _trace.TraceManager_init_plugins(_self)

def TraceManager_register_plugin(_self, plugin):
    r"""TraceManager_register_plugin(TraceManager_ptr _self, TracePlugin_ptr plugin) -> int"""
    return _trace.TraceManager_register_plugin(_self, plugin)

def TraceManager_get_evaluator(_self):
    r"""TraceManager_get_evaluator(TraceManager_ptr _self) -> BaseEvaluator_ptr"""
    return _trace.TraceManager_get_evaluator(_self)

def TraceManager_register_evaluator(_self, eval):
    r"""TraceManager_register_evaluator(TraceManager_ptr _self, BaseEvaluator_ptr eval)"""
    return _trace.TraceManager_register_evaluator(_self, eval)

def TraceManager_unregister_evaluator(_self):
    r"""TraceManager_unregister_evaluator(TraceManager_ptr _self)"""
    return _trace.TraceManager_unregister_evaluator(_self)

def TraceManager_register_complete_trace_executor(_self, executor_name, executor_desc, executor):
    r"""TraceManager_register_complete_trace_executor(TraceManager_ptr _self, char const * executor_name, char const * executor_desc, CompleteTraceExecutor_ptr const executor)"""
    return _trace.TraceManager_register_complete_trace_executor(_self, executor_name, executor_desc, executor)

def TraceManager_get_complete_trace_executor(_self, name):
    r"""TraceManager_get_complete_trace_executor(TraceManager_ptr const _self, char const * name) -> CompleteTraceExecutor_ptr"""
    return _trace.TraceManager_get_complete_trace_executor(_self, name)

def TraceManager_get_complete_trace_executor_ids(_self):
    r"""TraceManager_get_complete_trace_executor_ids(TraceManager_ptr const _self) -> array_t *"""
    return _trace.TraceManager_get_complete_trace_executor_ids(_self)

def TraceManager_get_complete_trace_executor_desc(_self, name):
    r"""TraceManager_get_complete_trace_executor_desc(TraceManager_ptr const _self, char const * name) -> char const *"""
    return _trace.TraceManager_get_complete_trace_executor_desc(_self, name)

def TraceManager_get_default_complete_trace_executor(global_trace_manager):
    r"""TraceManager_get_default_complete_trace_executor(TraceManager_ptr const global_trace_manager) -> CompleteTraceExecutor_ptr"""
    return _trace.TraceManager_get_default_complete_trace_executor(global_trace_manager)

def TraceManager_register_partial_trace_executor(_self, executor_name, executor_desc, executor):
    r"""TraceManager_register_partial_trace_executor(TraceManager_ptr _self, char const * executor_name, char const * executor_desc, PartialTraceExecutor_ptr const executor)"""
    return _trace.TraceManager_register_partial_trace_executor(_self, executor_name, executor_desc, executor)

def TraceManager_get_partial_trace_executor_ids(_self):
    r"""TraceManager_get_partial_trace_executor_ids(TraceManager_ptr const _self) -> array_t *"""
    return _trace.TraceManager_get_partial_trace_executor_ids(_self)

def TraceManager_get_partial_trace_executor(_self, name):
    r"""TraceManager_get_partial_trace_executor(TraceManager_ptr const _self, char const * name) -> PartialTraceExecutor_ptr"""
    return _trace.TraceManager_get_partial_trace_executor(_self, name)

def TraceManager_get_partial_trace_executor_desc(_self, name):
    r"""TraceManager_get_partial_trace_executor_desc(TraceManager_ptr const _self, char const * name) -> char const *"""
    return _trace.TraceManager_get_partial_trace_executor_desc(_self, name)

def TraceManager_get_default_partial_trace_executor(global_trace_manager):
    r"""TraceManager_get_default_partial_trace_executor(TraceManager_ptr const global_trace_manager) -> PartialTraceExecutor_ptr"""
    return _trace.TraceManager_get_default_partial_trace_executor(global_trace_manager)

def TraceManager_register_layer(_self, layer_name):
    r"""TraceManager_register_layer(TraceManager_ptr _self, char const * layer_name)"""
    return _trace.TraceManager_register_layer(_self, layer_name)

def TraceManager_unregister_layer(_self, layer_name):
    r"""TraceManager_unregister_layer(TraceManager_ptr _self, char const * layer_name)"""
    return _trace.TraceManager_unregister_layer(_self, layer_name)

def TraceManager_is_layer_registered(_self, layer_name):
    r"""TraceManager_is_layer_registered(TraceManager_ptr const _self, char const * layer_name) -> boolean"""
    return _trace.TraceManager_is_layer_registered(_self, layer_name)

def TraceManager_get_registered_layers(_self):
    r"""TraceManager_get_registered_layers(TraceManager_ptr const _self) -> array_t const *"""
    return _trace.TraceManager_get_registered_layers(_self)

def TraceManager_execute_plugin(_self, opt, plugin_index, trace_index):
    r"""TraceManager_execute_plugin(TraceManager_ptr const _self, TraceOpt_ptr const opt, int plugin_index, int trace_index) -> int"""
    return _trace.TraceManager_execute_plugin(_self, opt, plugin_index, trace_index)

def TraceManager_set_current_trace_number(_self, trace_id):
    r"""TraceManager_set_current_trace_number(TraceManager_ptr _self, int trace_id)"""
    return _trace.TraceManager_set_current_trace_number(_self, trace_id)

def TraceManager_get_current_trace_number(_self):
    r"""TraceManager_get_current_trace_number(TraceManager_ptr _self) -> int"""
    return _trace.TraceManager_get_current_trace_number(_self)

def TraceManager_set_default_plugin(_self, plugin_id):
    r"""TraceManager_set_default_plugin(TraceManager_ptr _self, int plugin_id)"""
    return _trace.TraceManager_set_default_plugin(_self, plugin_id)

def TraceManager_get_default_plugin(_self):
    r"""TraceManager_get_default_plugin(TraceManager_ptr _self) -> int"""
    return _trace.TraceManager_get_default_plugin(_self)

def TraceManager_is_visible_symbol(_self, symbol):
    r"""TraceManager_is_visible_symbol(TraceManager_ptr _self, node_ptr symbol) -> boolean"""
    return _trace.TraceManager_is_visible_symbol(_self, symbol)

def TraceManager_is_label_valid(_self, label):
    r"""TraceManager_is_label_valid(TraceManager_ptr _self, TraceLabel label) -> boolean"""
    return _trace.TraceManager_is_label_valid(_self, label)

def TraceManager_is_plugin_internal(_self, index):
    r"""TraceManager_is_plugin_internal(TraceManager_ptr const _self, int index) -> boolean"""
    return _trace.TraceManager_is_plugin_internal(_self, index)

def TraceManager_get_iterator_from_label(_self, label):
    r"""TraceManager_get_iterator_from_label(TraceManager_ptr _self, TraceLabel label) -> TraceIter"""
    return _trace.TraceManager_get_iterator_from_label(_self, label)

def TraceManager_get_abs_index_from_label(_self, label):
    r"""TraceManager_get_abs_index_from_label(TraceManager_ptr _self, TraceLabel label) -> int"""
    return _trace.TraceManager_get_abs_index_from_label(_self, label)

def TraceOpt_create():
    r"""TraceOpt_create() -> TraceOpt_ptr"""
    return _trace.TraceOpt_create()

def TraceOpt_create_from_env(opt):
    r"""TraceOpt_create_from_env(OptsHandler_ptr opt) -> TraceOpt_ptr"""
    return _trace.TraceOpt_create_from_env(opt)

def TraceOpt_update_from_env(_self, opt):
    r"""TraceOpt_update_from_env(TraceOpt_ptr _self, OptsHandler_ptr opt)"""
    return _trace.TraceOpt_update_from_env(_self, opt)

def TraceOpt_destroy(_self):
    r"""TraceOpt_destroy(TraceOpt_ptr _self)"""
    return _trace.TraceOpt_destroy(_self)

def TraceOpt_obfuscate(_self):
    r"""TraceOpt_obfuscate(TraceOpt_ptr _self) -> boolean"""
    return _trace.TraceOpt_obfuscate(_self)

def TraceOpt_set_obfuscate(_self, obfuscate):
    r"""TraceOpt_set_obfuscate(TraceOpt_ptr _self, boolean obfuscate)"""
    return _trace.TraceOpt_set_obfuscate(_self, obfuscate)

def TraceOpt_show_defines(_self):
    r"""TraceOpt_show_defines(TraceOpt_ptr _self) -> boolean"""
    return _trace.TraceOpt_show_defines(_self)

def TraceOpt_set_show_defines(_self, show_defines):
    r"""TraceOpt_set_show_defines(TraceOpt_ptr _self, boolean show_defines)"""
    return _trace.TraceOpt_set_show_defines(_self, show_defines)

def TraceOpt_show_defines_with_next(_self):
    r"""TraceOpt_show_defines_with_next(TraceOpt_ptr _self) -> boolean"""
    return _trace.TraceOpt_show_defines_with_next(_self)

def TraceOpt_set_show_defines_with_next(_self, show_next):
    r"""TraceOpt_set_show_defines_with_next(TraceOpt_ptr _self, boolean show_next)"""
    return _trace.TraceOpt_set_show_defines_with_next(_self, show_next)

def TraceOpt_hiding_prefix(_self):
    r"""TraceOpt_hiding_prefix(TraceOpt_ptr _self) -> char const *"""
    return _trace.TraceOpt_hiding_prefix(_self)

def TraceOpt_set_hiding_prefix(_self, hiding_prefix):
    r"""TraceOpt_set_hiding_prefix(TraceOpt_ptr _self, char const * hiding_prefix)"""
    return _trace.TraceOpt_set_hiding_prefix(_self, hiding_prefix)

def TraceOpt_from_here(_self):
    r"""TraceOpt_from_here(TraceOpt_ptr _self) -> unsigned int"""
    return _trace.TraceOpt_from_here(_self)

def TraceOpt_set_from_here(_self, index):
    r"""TraceOpt_set_from_here(TraceOpt_ptr _self, unsigned int index)"""
    return _trace.TraceOpt_set_from_here(_self, index)

def TraceOpt_to_here(_self):
    r"""TraceOpt_to_here(TraceOpt_ptr _self) -> unsigned int"""
    return _trace.TraceOpt_to_here(_self)

def TraceOpt_set_to_here(_self, index):
    r"""TraceOpt_set_to_here(TraceOpt_ptr _self, unsigned int index)"""
    return _trace.TraceOpt_set_to_here(_self, index)

def TraceOpt_output_stream(_self):
    r"""TraceOpt_output_stream(TraceOpt_ptr _self) -> FILE *"""
    return _trace.TraceOpt_output_stream(_self)

def TraceOpt_set_output_stream(_self, out):
    r"""TraceOpt_set_output_stream(TraceOpt_ptr _self, FILE * out)"""
    return _trace.TraceOpt_set_output_stream(_self, out)
TRACE_XML_INVALID_TAG = _trace.TRACE_XML_INVALID_TAG

TRACE_XML_CNTX_TAG = _trace.TRACE_XML_CNTX_TAG

TRACE_XML_NODE_TAG = _trace.TRACE_XML_NODE_TAG

TRACE_XML_STATE_TAG = _trace.TRACE_XML_STATE_TAG

TRACE_XML_COMB_TAG = _trace.TRACE_XML_COMB_TAG

TRACE_XML_INPUT_TAG = _trace.TRACE_XML_INPUT_TAG

TRACE_XML_VALUE_TAG = _trace.TRACE_XML_VALUE_TAG

TRACE_XML_LOOPS_TAG = _trace.TRACE_XML_LOOPS_TAG

TRACE_XML_CNTX_TAG_STRING = _trace.TRACE_XML_CNTX_TAG_STRING

TRACE_XML_NODE_TAG_STRING = _trace.TRACE_XML_NODE_TAG_STRING

TRACE_XML_STATE_TAG_STRING = _trace.TRACE_XML_STATE_TAG_STRING

TRACE_XML_COMB_TAG_STRING = _trace.TRACE_XML_COMB_TAG_STRING

TRACE_XML_INPUT_TAG_STRING = _trace.TRACE_XML_INPUT_TAG_STRING

TRACE_XML_VALUE_TAG_STRING = _trace.TRACE_XML_VALUE_TAG_STRING

TRACE_XML_LOOPS_TAG_STRING = _trace.TRACE_XML_LOOPS_TAG_STRING


def TraceXmlTag_from_string(tag):
    r"""TraceXmlTag_from_string(char const * tag) -> TraceXmlTag"""
    return _trace.TraceXmlTag_from_string(tag)

def TraceXmlTag_to_string(tag):
    r"""TraceXmlTag_to_string(TraceXmlTag tag) -> char const *"""
    return _trace.TraceXmlTag_to_string(tag)

def Trace_concatenate(_self, other):
    r"""Trace_concatenate(Trace_ptr _self, Trace_ptr other) -> Trace_ptr"""
    return _trace.Trace_concatenate(_self, other)
class assignment_t(object):
    r"""Proxy of C assignment_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    symbol = property(_trace.assignment_t_symbol_get, _trace.assignment_t_symbol_set, doc=r"""symbol : node_ptr""")
    value = property(_trace.assignment_t_value_get, _trace.assignment_t_value_set, doc=r"""value : node_ptr""")
    success = property(_trace.assignment_t_success_get, _trace.assignment_t_success_set, doc=r"""success : boolean""")
    iter = property(_trace.assignment_t_iter_get, _trace.assignment_t_iter_set, doc=r"""iter : TraceStepIter""")

    def __init__(self):
        r"""__init__(assignment_t self) -> assignment_t"""
        _trace.assignment_t_swiginit(self, _trace.new_assignment_t())
    __swig_destroy__ = _trace.delete_assignment_t

# Register assignment_t in _trace:
_trace.assignment_t_swigregister(assignment_t)

def Trace_step_get_assignment(step_iter):
    r"""Trace_step_get_assignment(TraceStepIter step_iter) -> assignment_t"""
    return _trace.Trace_step_get_assignment(step_iter)

