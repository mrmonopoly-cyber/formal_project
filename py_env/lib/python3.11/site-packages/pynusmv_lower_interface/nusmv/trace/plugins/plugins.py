# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _plugins
else:
    import _plugins

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _plugins.PRIuPTR

PRIdPTR = _plugins.PRIdPTR

LLU = _plugins.LLU

LLO = _plugins.LLO

LLX = _plugins.LLX

false = _plugins.false

true = _plugins.true

OUTCOME_GENERIC_ERROR = _plugins.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _plugins.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _plugins.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _plugins.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _plugins.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _plugins.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _plugins.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _plugins.Object_copy(_self)

def TraceCompact_create():
    r"""TraceCompact_create() -> TraceCompact_ptr"""
    return _plugins.TraceCompact_create()

def TraceExplainer_create(changes_only):
    r"""TraceExplainer_create(boolean changes_only) -> TraceExplainer_ptr"""
    return _plugins.TraceExplainer_create(changes_only)

def TracePlugin_action(_self, trace, opt):
    r"""TracePlugin_action(TracePlugin_ptr const _self, Trace_ptr const trace, TraceOpt_ptr const opt) -> int"""
    return _plugins.TracePlugin_action(_self, trace, opt)

def TracePlugin_get_desc(_self):
    r"""TracePlugin_get_desc(TracePlugin_ptr const _self) -> char *"""
    return _plugins.TracePlugin_get_desc(_self)
TRACE_TABLE_TYPE_ROW = _plugins.TRACE_TABLE_TYPE_ROW

TRACE_TABLE_TYPE_COLUMN = _plugins.TRACE_TABLE_TYPE_COLUMN


def TraceTable_create(style):
    r"""TraceTable_create(TraceTableStyle style) -> TraceTable_ptr"""
    return _plugins.TraceTable_create(style)

def TraceXmlDumper_create():
    r"""TraceXmlDumper_create() -> TraceXmlDumper_ptr"""
    return _plugins.TraceXmlDumper_create()

