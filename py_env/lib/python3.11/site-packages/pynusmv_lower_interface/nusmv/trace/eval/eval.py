# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _eval
else:
    import _eval

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _eval.PRIuPTR

PRIdPTR = _eval.PRIdPTR

LLU = _eval.LLU

LLO = _eval.LLO

LLX = _eval.LLX

false = _eval.false

true = _eval.true

OUTCOME_GENERIC_ERROR = _eval.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _eval.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _eval.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _eval.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _eval.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _eval.OUTCOME_SUCCESS


def BaseEvaluator_create():
    r"""BaseEvaluator_create() -> BaseEvaluator_ptr"""
    return _eval.BaseEvaluator_create()

def BaseEvaluator_destroy(_self):
    r"""BaseEvaluator_destroy(BaseEvaluator_ptr _self)"""
    return _eval.BaseEvaluator_destroy(_self)

def BaseEvaluator_set_context(_self, st, env):
    r"""BaseEvaluator_set_context(BaseEvaluator_ptr _self, SymbTable_ptr const st, hash_ptr const env)"""
    return _eval.BaseEvaluator_set_context(_self, st, env)

def BaseEvaluator_evaluate(_self, const_expr):
    r"""BaseEvaluator_evaluate(BaseEvaluator_ptr _self, Expr_ptr const_expr) -> Expr_ptr"""
    return _eval.BaseEvaluator_evaluate(_self, const_expr)

