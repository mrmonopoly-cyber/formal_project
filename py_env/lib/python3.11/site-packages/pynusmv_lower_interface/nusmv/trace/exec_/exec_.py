# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _exec_
else:
    import _exec_

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _exec_.PRIuPTR

PRIdPTR = _exec_.PRIdPTR

LLU = _exec_.LLU

LLO = _exec_.LLO

LLX = _exec_.LLX

false = _exec_.false

true = _exec_.true

OUTCOME_GENERIC_ERROR = _exec_.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _exec_.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _exec_.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _exec_.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _exec_.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _exec_.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _exec_.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _exec_.Object_copy(_self)

def BaseTraceExecutor_get_verbosity(_self):
    r"""BaseTraceExecutor_get_verbosity(BaseTraceExecutor_ptr _self) -> int"""
    return _exec_.BaseTraceExecutor_get_verbosity(_self)

def BaseTraceExecutor_set_verbosity(_self, verbosity):
    r"""BaseTraceExecutor_set_verbosity(BaseTraceExecutor_ptr _self, int verbosity)"""
    return _exec_.BaseTraceExecutor_set_verbosity(_self, verbosity)

def BaseTraceExecutor_get_output_stream(_self):
    r"""BaseTraceExecutor_get_output_stream(BaseTraceExecutor_ptr _self) -> FILE *"""
    return _exec_.BaseTraceExecutor_get_output_stream(_self)

def BaseTraceExecutor_set_output_stream(_self, error_stream):
    r"""BaseTraceExecutor_set_output_stream(BaseTraceExecutor_ptr _self, FILE * error_stream)"""
    return _exec_.BaseTraceExecutor_set_output_stream(_self, error_stream)

def BaseTraceExecutor_get_error_stream(_self):
    r"""BaseTraceExecutor_get_error_stream(BaseTraceExecutor_ptr _self) -> FILE *"""
    return _exec_.BaseTraceExecutor_get_error_stream(_self)

def BaseTraceExecutor_set_error_stream(_self, error_stream):
    r"""BaseTraceExecutor_set_error_stream(BaseTraceExecutor_ptr _self, FILE * error_stream)"""
    return _exec_.BaseTraceExecutor_set_error_stream(_self, error_stream)

def BaseTraceExecutor_destroy(_self):
    r"""BaseTraceExecutor_destroy(BaseTraceExecutor_ptr _self)"""
    return _exec_.BaseTraceExecutor_destroy(_self)

def BDDCompleteTraceExecutor_create(fsm, enc):
    r"""BDDCompleteTraceExecutor_create(BddFsm_ptr const fsm, BddEnc_ptr const enc) -> BDDCompleteTraceExecutor_ptr"""
    return _exec_.BDDCompleteTraceExecutor_create(fsm, enc)

def BDDPartialTraceExecutor_create(fsm, enc):
    r"""BDDPartialTraceExecutor_create(BddFsm_ptr const fsm, BddEnc_ptr const enc) -> BDDPartialTraceExecutor_ptr"""
    return _exec_.BDDPartialTraceExecutor_create(fsm, enc)

def CompleteTraceExecutor_execute(_self, trace, n_steps):
    r"""CompleteTraceExecutor_execute(CompleteTraceExecutor_ptr const _self, Trace_ptr const trace, int * n_steps) -> boolean"""
    return _exec_.CompleteTraceExecutor_execute(_self, trace, n_steps)

def PartialTraceExecutor_execute(_self, trace, language, n_steps):
    r"""PartialTraceExecutor_execute(PartialTraceExecutor_ptr const _self, Trace_ptr const trace, NodeList_ptr const language, int * n_steps) -> Trace_ptr"""
    return _exec_.PartialTraceExecutor_execute(_self, trace, language, n_steps)

def SATCompleteTraceExecutor_create(fsm, enc, bdd_enc):
    r"""SATCompleteTraceExecutor_create(BeFsm_ptr const fsm, BeEnc_ptr const enc, BddEnc_ptr const bdd_enc) -> SATCompleteTraceExecutor_ptr"""
    return _exec_.SATCompleteTraceExecutor_create(fsm, enc, bdd_enc)

def SATPartialTraceExecutor_create(fsm, enc, bdd_enc, use_restart):
    r"""SATPartialTraceExecutor_create(BeFsm_ptr const fsm, BeEnc_ptr const enc, BddEnc_ptr const bdd_enc, boolean use_restart) -> SATPartialTraceExecutor_ptr"""
    return _exec_.SATPartialTraceExecutor_create(fsm, enc, bdd_enc, use_restart)
BDD_EXEC_ENGINE = _exec_.BDD_EXEC_ENGINE

SAT_EXEC_ENGINE = _exec_.SAT_EXEC_ENGINE

EXEC_NONE = _exec_.EXEC_NONE

EXEC_BDD = _exec_.EXEC_BDD

EXEC_SAT = _exec_.EXEC_SAT

EXEC_RESERVED = _exec_.EXEC_RESERVED


def bddPartialTraceExecutor2partialTraceExecutor(ptr):
    r"""bddPartialTraceExecutor2partialTraceExecutor(BDDPartialTraceExecutor_ptr ptr) -> PartialTraceExecutor_ptr"""
    return _exec_.bddPartialTraceExecutor2partialTraceExecutor(ptr)

def bddCompleteTraceExecutor2completeTraceExecutor(ptr):
    r"""bddCompleteTraceExecutor2completeTraceExecutor(BDDCompleteTraceExecutor_ptr ptr) -> CompleteTraceExecutor_ptr"""
    return _exec_.bddCompleteTraceExecutor2completeTraceExecutor(ptr)

def SATCompleteTraceExecutor2completeTraceExecutor(ptr):
    r"""SATCompleteTraceExecutor2completeTraceExecutor(SATCompleteTraceExecutor_ptr ptr) -> CompleteTraceExecutor_ptr"""
    return _exec_.SATCompleteTraceExecutor2completeTraceExecutor(ptr)

def SATPartialTraceExecutor2partialTraceExecutor(ptr):
    r"""SATPartialTraceExecutor2partialTraceExecutor(SATPartialTraceExecutor_ptr ptr) -> PartialTraceExecutor_ptr"""
    return _exec_.SATPartialTraceExecutor2partialTraceExecutor(ptr)

