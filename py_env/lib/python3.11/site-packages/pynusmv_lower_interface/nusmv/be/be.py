# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _be
else:
    import _be

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _be.PRIuPTR

PRIdPTR = _be.PRIdPTR

LLU = _be.LLU

LLO = _be.LLO

LLX = _be.LLX

false = _be.false

true = _be.true

OUTCOME_GENERIC_ERROR = _be.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _be.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _be.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _be.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _be.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _be.OUTCOME_SUCCESS


def Be_Init():
    r"""Be_Init()"""
    return _be.Be_Init()

def Be_Quit():
    r"""Be_Quit()"""
    return _be.Be_Quit()

def Be_Manager_Spec2Be(_self, spec_expr):
    r"""Be_Manager_Spec2Be(Be_Manager_ptr const _self, void * spec_expr) -> be_ptr"""
    return _be.Be_Manager_Spec2Be(_self, spec_expr)

def Be_Manager_Be2Spec(_self, be):
    r"""Be_Manager_Be2Spec(Be_Manager_ptr const _self, be_ptr be) -> void *"""
    return _be.Be_Manager_Be2Spec(_self, be)

def Be_Manager_GetSpecManager(_self):
    r"""Be_Manager_GetSpecManager(Be_Manager_ptr _self) -> void *"""
    return _be.Be_Manager_GetSpecManager(_self)

def Be_Cnf_Create(be):
    r"""Be_Cnf_Create(be_ptr const be) -> Be_Cnf_ptr"""
    return _be.Be_Cnf_Create(be)

def Be_Cnf_Delete(_self):
    r"""Be_Cnf_Delete(Be_Cnf_ptr _self)"""
    return _be.Be_Cnf_Delete(_self)

def Be_Cnf_RemoveDuplicateLiterals(_self):
    r"""Be_Cnf_RemoveDuplicateLiterals(Be_Cnf_ptr _self)"""
    return _be.Be_Cnf_RemoveDuplicateLiterals(_self)

def Be_Cnf_GetOriginalProblem(_self):
    r"""Be_Cnf_GetOriginalProblem(Be_Cnf_ptr const _self) -> be_ptr"""
    return _be.Be_Cnf_GetOriginalProblem(_self)

def Be_Cnf_GetFormulaLiteral(_self):
    r"""Be_Cnf_GetFormulaLiteral(Be_Cnf_ptr const _self) -> int"""
    return _be.Be_Cnf_GetFormulaLiteral(_self)

def Be_Cnf_GetVarsList(_self):
    r"""Be_Cnf_GetVarsList(Be_Cnf_ptr const _self) -> Slist_ptr"""
    return _be.Be_Cnf_GetVarsList(_self)

def Be_Cnf_GetClausesList(_self):
    r"""Be_Cnf_GetClausesList(Be_Cnf_ptr const _self) -> Slist_ptr"""
    return _be.Be_Cnf_GetClausesList(_self)

def Be_Cnf_GetMaxVarIndex(_self):
    r"""Be_Cnf_GetMaxVarIndex(Be_Cnf_ptr const _self) -> int"""
    return _be.Be_Cnf_GetMaxVarIndex(_self)

def Be_Cnf_GetVarsNumber(_self):
    r"""Be_Cnf_GetVarsNumber(Be_Cnf_ptr const _self) -> size_t"""
    return _be.Be_Cnf_GetVarsNumber(_self)

def Be_Cnf_GetClausesNumber(_self):
    r"""Be_Cnf_GetClausesNumber(Be_Cnf_ptr const _self) -> size_t"""
    return _be.Be_Cnf_GetClausesNumber(_self)

def Be_Cnf_SetFormulaLiteral(_self, formula_literal):
    r"""Be_Cnf_SetFormulaLiteral(Be_Cnf_ptr const _self, int const formula_literal)"""
    return _be.Be_Cnf_SetFormulaLiteral(_self, formula_literal)

def Be_Cnf_SetMaxVarIndex(_self, max_idx):
    r"""Be_Cnf_SetMaxVarIndex(Be_Cnf_ptr const _self, int const max_idx)"""
    return _be.Be_Cnf_SetMaxVarIndex(_self, max_idx)

def Be_IsTrue(manager, arg):
    r"""Be_IsTrue(Be_Manager_ptr manager, be_ptr arg) -> boolean"""
    return _be.Be_IsTrue(manager, arg)

def Be_IsFalse(manager, arg):
    r"""Be_IsFalse(Be_Manager_ptr manager, be_ptr arg) -> boolean"""
    return _be.Be_IsFalse(manager, arg)

def Be_IsConstant(manager, arg):
    r"""Be_IsConstant(Be_Manager_ptr manager, be_ptr arg) -> boolean"""
    return _be.Be_IsConstant(manager, arg)

def Be_Truth(manager):
    r"""Be_Truth(Be_Manager_ptr manager) -> be_ptr"""
    return _be.Be_Truth(manager)

def Be_Falsity(manager):
    r"""Be_Falsity(Be_Manager_ptr manager) -> be_ptr"""
    return _be.Be_Falsity(manager)

def Be_Not(manager, arg):
    r"""Be_Not(Be_Manager_ptr manager, be_ptr arg) -> be_ptr"""
    return _be.Be_Not(manager, arg)

def Be_And(manager, arg1, arg2):
    r"""Be_And(Be_Manager_ptr manager, be_ptr arg1, be_ptr arg2) -> be_ptr"""
    return _be.Be_And(manager, arg1, arg2)

def Be_Or(manager, arg1, arg2):
    r"""Be_Or(Be_Manager_ptr manager, be_ptr arg1, be_ptr arg2) -> be_ptr"""
    return _be.Be_Or(manager, arg1, arg2)

def Be_Xor(manager, arg1, arg2):
    r"""Be_Xor(Be_Manager_ptr manager, be_ptr arg1, be_ptr arg2) -> be_ptr"""
    return _be.Be_Xor(manager, arg1, arg2)

def Be_Implies(manager, arg1, arg2):
    r"""Be_Implies(Be_Manager_ptr manager, be_ptr arg1, be_ptr arg2) -> be_ptr"""
    return _be.Be_Implies(manager, arg1, arg2)

def Be_Iff(manager, arg1, arg2):
    r"""Be_Iff(Be_Manager_ptr manager, be_ptr arg1, be_ptr arg2) -> be_ptr"""
    return _be.Be_Iff(manager, arg1, arg2)

def Be_Ite(manager, arg_if, arg_then, arg_else):
    r"""Be_Ite(Be_Manager_ptr manager, be_ptr arg_if, be_ptr arg_then, be_ptr arg_else) -> be_ptr"""
    return _be.Be_Ite(manager, arg_if, arg_then, arg_else)

def Be_LogicalShiftVar(manager, f, shift, log2phy, phy2log):
    r"""Be_LogicalShiftVar(Be_Manager_ptr manager, be_ptr f, int shift, int const * log2phy, int const * phy2log) -> be_ptr"""
    return _be.Be_LogicalShiftVar(manager, f, shift, log2phy, phy2log)

def Be_LogicalVarSubst(manager, f, subst, log2phy, phy2log):
    r"""Be_LogicalVarSubst(Be_Manager_ptr manager, be_ptr f, int * subst, int const * log2phy, int const * phy2log) -> be_ptr"""
    return _be.Be_LogicalVarSubst(manager, f, subst, log2phy, phy2log)

def Be_ConvertToCnf(manager, f, polarity):
    r"""Be_ConvertToCnf(Be_Manager_ptr manager, be_ptr f, int polarity) -> Be_Cnf_ptr"""
    return _be.Be_ConvertToCnf(manager, f, polarity)

def Be_CnfLiteral2BeLiteral(_self, cnfLiteral):
    r"""Be_CnfLiteral2BeLiteral(Be_Manager_ptr const _self, int cnfLiteral) -> int"""
    return _be.Be_CnfLiteral2BeLiteral(_self, cnfLiteral)

def Be_BeLiteral2CnfLiteral(_self, beLiteral):
    r"""Be_BeLiteral2CnfLiteral(Be_Manager_ptr const _self, int beLiteral) -> int"""
    return _be.Be_BeLiteral2CnfLiteral(_self, beLiteral)

def Be_BeLiteral2BeIndex(_self, beLiteral):
    r"""Be_BeLiteral2BeIndex(Be_Manager_ptr const _self, int beLiteral) -> int"""
    return _be.Be_BeLiteral2BeIndex(_self, beLiteral)

def Be_BeIndex2BeLiteral(_self, beIndex):
    r"""Be_BeIndex2BeLiteral(Be_Manager_ptr const _self, int beIndex) -> int"""
    return _be.Be_BeIndex2BeLiteral(_self, beIndex)

def Be_BeIndex2CnfLiteral(_self, beIndex):
    r"""Be_BeIndex2CnfLiteral(Be_Manager_ptr const _self, int beIndex) -> int"""
    return _be.Be_BeIndex2CnfLiteral(_self, beIndex)

def Be_CnfModelToBeModel(manager, cnfModel):
    r"""Be_CnfModelToBeModel(Be_Manager_ptr manager, Slist_ptr const cnfModel) -> Slist_ptr"""
    return _be.Be_CnfModelToBeModel(manager, cnfModel)

def Be_DumpDavinci(manager, f, outFile):
    r"""Be_DumpDavinci(Be_Manager_ptr manager, be_ptr f, FILE * outFile)"""
    return _be.Be_DumpDavinci(manager, f, outFile)

def Be_DumpGdl(manager, f, outFile):
    r"""Be_DumpGdl(Be_Manager_ptr manager, be_ptr f, FILE * outFile)"""
    return _be.Be_DumpGdl(manager, f, outFile)

def Be_DumpSexpr(manager, f, outFile):
    r"""Be_DumpSexpr(Be_Manager_ptr manager, be_ptr f, FILE * outFile)"""
    return _be.Be_DumpSexpr(manager, f, outFile)

def Be_Index2Var(manager, varIndex):
    r"""Be_Index2Var(Be_Manager_ptr manager, int varIndex) -> be_ptr"""
    return _be.Be_Index2Var(manager, varIndex)

def Be_Var2Index(manager, var):
    r"""Be_Var2Index(Be_Manager_ptr manager, be_ptr var) -> int"""
    return _be.Be_Var2Index(manager, var)

def Be_CnfLiteral_IsSignPositive(_self, cnfLiteral):
    r"""Be_CnfLiteral_IsSignPositive(Be_Manager_ptr const _self, int cnfLiteral) -> boolean"""
    return _be.Be_CnfLiteral_IsSignPositive(_self, cnfLiteral)

def Be_CnfLiteral_Negate(_self, cnfLiteral):
    r"""Be_CnfLiteral_Negate(Be_Manager_ptr const _self, int cnfLiteral) -> int"""
    return _be.Be_CnfLiteral_Negate(_self, cnfLiteral)

def Be_BeLiteral_IsSignPositive(_self, beLiteral):
    r"""Be_BeLiteral_IsSignPositive(Be_Manager_ptr const _self, int beLiteral) -> boolean"""
    return _be.Be_BeLiteral_IsSignPositive(_self, beLiteral)

def Be_BeLiteral_Negate(_self, beLiteral):
    r"""Be_BeLiteral_Negate(Be_Manager_ptr const _self, int beLiteral) -> int"""
    return _be.Be_BeLiteral_Negate(_self, beLiteral)

def Be_apply_inlining(_self, f, add_conj):
    r"""Be_apply_inlining(Be_Manager_ptr _self, be_ptr f, boolean add_conj) -> be_ptr"""
    return _be.Be_apply_inlining(_self, f, add_conj)

def Be_Cnf_PrintStat(_self, outFile, prefix):
    r"""Be_Cnf_PrintStat(Be_Cnf_ptr const _self, FILE * outFile, char * prefix)"""
    return _be.Be_Cnf_PrintStat(_self, outFile, prefix)

def Be_RbcManager_Create(capacity):
    r"""Be_RbcManager_Create(size_t const capacity) -> Be_Manager_ptr"""
    return _be.Be_RbcManager_Create(capacity)

def Be_RbcManager_Delete(_self):
    r"""Be_RbcManager_Delete(Be_Manager_ptr _self)"""
    return _be.Be_RbcManager_Delete(_self)

def Be_RbcManager_Reserve(_self, size):
    r"""Be_RbcManager_Reserve(Be_Manager_ptr _self, size_t const size)"""
    return _be.Be_RbcManager_Reserve(_self, size)

def Be_RbcManager_Reset(_self):
    r"""Be_RbcManager_Reset(Be_Manager_ptr const _self)"""
    return _be.Be_RbcManager_Reset(_self)

cvar = _be.cvar
BE_INVALID_SUBST_VALUE = cvar.BE_INVALID_SUBST_VALUE

