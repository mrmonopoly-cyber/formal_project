# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dag
else:
    import _dag

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _dag.PRIuPTR

PRIdPTR = _dag.PRIdPTR

LLU = _dag.LLU

LLO = _dag.LLO

LLX = _dag.LLX

false = _dag.false

true = _dag.true

OUTCOME_GENERIC_ERROR = _dag.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _dag.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _dag.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _dag.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _dag.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _dag.OUTCOME_SUCCESS

DAG_DEFAULT_VERTICES_NO = _dag.DAG_DEFAULT_VERTICES_NO

DAG_DEFAULT_DENSITY = _dag.DAG_DEFAULT_DENSITY

DAG_DEFAULT_GROWTH = _dag.DAG_DEFAULT_GROWTH

class Dag_Vertex(object):
    r"""Proxy of C Dag_Vertex struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    symbol = property(_dag.Dag_Vertex_symbol_get, _dag.Dag_Vertex_symbol_set, doc=r"""symbol : int""")
    data = property(_dag.Dag_Vertex_data_get, _dag.Dag_Vertex_data_set, doc=r"""data : p.char""")
    outList = property(_dag.Dag_Vertex_outList_get, _dag.Dag_Vertex_outList_set, doc=r"""outList : p.p.Dag_Vertex_t""")
    numSons = property(_dag.Dag_Vertex_numSons_get, _dag.Dag_Vertex_numSons_set, doc=r"""numSons : unsigned int""")
    dag = property(_dag.Dag_Vertex_dag_get, _dag.Dag_Vertex_dag_set, doc=r"""dag : p.Dag_Manager_t""")
    mark = property(_dag.Dag_Vertex_mark_get, _dag.Dag_Vertex_mark_set, doc=r"""mark : int""")
    visit = property(_dag.Dag_Vertex_visit_get, _dag.Dag_Vertex_visit_set, doc=r"""visit : int""")
    vHandle = property(_dag.Dag_Vertex_vHandle_get, _dag.Dag_Vertex_vHandle_set, doc=r"""vHandle : lsHandle""")
    gRef = property(_dag.Dag_Vertex_gRef_get, _dag.Dag_Vertex_gRef_set, doc=r"""gRef : p.char""")
    iRef = property(_dag.Dag_Vertex_iRef_get, _dag.Dag_Vertex_iRef_set, doc=r"""iRef : int""")

    def __init__(self):
        r"""__init__(Dag_Vertex self) -> Dag_Vertex"""
        _dag.Dag_Vertex_swiginit(self, _dag.new_Dag_Vertex())
    __swig_destroy__ = _dag.delete_Dag_Vertex

# Register Dag_Vertex in _dag:
_dag.Dag_Vertex_swigregister(Dag_Vertex)
class Dag_DfsFunctions(object):
    r"""Proxy of C Dag_DfsFunctions struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Set = property(_dag.Dag_DfsFunctions_Set_get, _dag.Dag_DfsFunctions_Set_set, doc=r"""Set : Dag_IntPtr_t""")
    FirstVisit = property(_dag.Dag_DfsFunctions_FirstVisit_get, _dag.Dag_DfsFunctions_FirstVisit_set, doc=r"""FirstVisit : Dag_ProcPtr_t""")
    BackVisit = property(_dag.Dag_DfsFunctions_BackVisit_get, _dag.Dag_DfsFunctions_BackVisit_set, doc=r"""BackVisit : Dag_ProcPtr_t""")
    LastVisit = property(_dag.Dag_DfsFunctions_LastVisit_get, _dag.Dag_DfsFunctions_LastVisit_set, doc=r"""LastVisit : Dag_ProcPtr_t""")

    def __init__(self):
        r"""__init__(Dag_DfsFunctions self) -> Dag_DfsFunctions"""
        _dag.Dag_DfsFunctions_swiginit(self, _dag.new_Dag_DfsFunctions())
    __swig_destroy__ = _dag.delete_Dag_DfsFunctions

# Register Dag_DfsFunctions in _dag:
_dag.Dag_DfsFunctions_swigregister(Dag_DfsFunctions)

def Dag_Dfs(dfsRoot, dfsFun, dfsData):
    r"""Dag_Dfs(Dag_Vertex dfsRoot, Dag_DfsFunctions dfsFun, char * dfsData)"""
    return _dag.Dag_Dfs(dfsRoot, dfsFun, dfsData)

def Dag_ManagerAlloc():
    r"""Dag_ManagerAlloc() -> Dag_Manager_t *"""
    return _dag.Dag_ManagerAlloc()

def Dag_ManagerFree(dagManager, freeData, freeGen):
    r"""Dag_ManagerFree(Dag_Manager_t * dagManager, Dag_ProcPtr_t freeData, Dag_ProcPtr_t freeGen)"""
    return _dag.Dag_ManagerFree(dagManager, freeData, freeGen)

def Dag_ManagerGC(dagManager, freeData, freeGen):
    r"""Dag_ManagerGC(Dag_Manager_t * dagManager, Dag_ProcPtr_t freeData, Dag_ProcPtr_t freeGen)"""
    return _dag.Dag_ManagerGC(dagManager, freeData, freeGen)

def Dag_PrintStats(dagManager, clustSz, outFile):
    r"""Dag_PrintStats(Dag_Manager_t * dagManager, int clustSz, FILE * outFile)"""
    return _dag.Dag_PrintStats(dagManager, clustSz, outFile)

def Dag_VertexLookup(dagManager, vSymb, vData, vSons, numSons):
    r"""Dag_VertexLookup(Dag_Manager_t * dagManager, int vSymb, char * vData, Dag_Vertex_t ** vSons, unsigned int numSons) -> Dag_Vertex"""
    return _dag.Dag_VertexLookup(dagManager, vSymb, vData, vSons, numSons)

def Dag_VertexInsert(dagManager, vSymb, vData, vSons, numSons):
    r"""Dag_VertexInsert(Dag_Manager_t * dagManager, int vSymb, char * vData, Dag_Vertex_t ** vSons, unsigned int numSons) -> Dag_Vertex"""
    return _dag.Dag_VertexInsert(dagManager, vSymb, vData, vSons, numSons)

def Dag_VertexMark(v):
    r"""Dag_VertexMark(Dag_Vertex v)"""
    return _dag.Dag_VertexMark(v)

def Dag_VertexUnmark(v):
    r"""Dag_VertexUnmark(Dag_Vertex v)"""
    return _dag.Dag_VertexUnmark(v)

def PrintStat(dfsRoot, statFile, prefix):
    r"""PrintStat(Dag_Vertex dfsRoot, FILE * statFile, char * prefix)"""
    return _dag.PrintStat(dfsRoot, statFile, prefix)

cvar = _dag.cvar

