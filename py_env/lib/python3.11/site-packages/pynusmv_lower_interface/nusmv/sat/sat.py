# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sat
else:
    import _sat

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _sat.PRIuPTR

PRIdPTR = _sat.PRIdPTR

LLU = _sat.LLU

LLO = _sat.LLO

LLX = _sat.LLX

false = _sat.false

true = _sat.true

OUTCOME_GENERIC_ERROR = _sat.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _sat.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _sat.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _sat.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _sat.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _sat.OUTCOME_SUCCESS


def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _sat.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _sat.Object_copy(_self)
NUSMV_HAVE_INCREMENTAL_SAT = _sat.NUSMV_HAVE_INCREMENTAL_SAT


def Sat_CreateNonIncSolver(satSolver):
    r"""Sat_CreateNonIncSolver(char const * satSolver) -> SatSolver_ptr"""
    return _sat.Sat_CreateNonIncSolver(satSolver)

def Sat_CreateNonIncProofSolver(satSolver):
    r"""Sat_CreateNonIncProofSolver(char const * satSolver) -> SatSolver_ptr"""
    return _sat.Sat_CreateNonIncProofSolver(satSolver)

def Sat_CreateIncSolver(satSolver):
    r"""Sat_CreateIncSolver(char const * satSolver) -> SatIncSolver_ptr"""
    return _sat.Sat_CreateIncSolver(satSolver)

def Sat_CreateIncProofSolver(satSolver):
    r"""Sat_CreateIncProofSolver(char const * satSolver) -> SatIncSolver_ptr"""
    return _sat.Sat_CreateIncProofSolver(satSolver)

def Sat_NormalizeSatSolverName(solverName):
    r"""Sat_NormalizeSatSolverName(char const * solverName) -> char const *"""
    return _sat.Sat_NormalizeSatSolverName(solverName)

def Sat_PrintAvailableSolvers(file):
    r"""Sat_PrintAvailableSolvers(FILE * file)"""
    return _sat.Sat_PrintAvailableSolvers(file)

def Sat_GetAvailableSolversString():
    r"""Sat_GetAvailableSolversString() -> char *"""
    return _sat.Sat_GetAvailableSolversString()
SAT_SOLVER_INTERNAL_ERROR = _sat.SAT_SOLVER_INTERNAL_ERROR

SAT_SOLVER_TIMEOUT = _sat.SAT_SOLVER_TIMEOUT

SAT_SOLVER_MEMOUT = _sat.SAT_SOLVER_MEMOUT

SAT_SOLVER_SATISFIABLE_PROBLEM = _sat.SAT_SOLVER_SATISFIABLE_PROBLEM

SAT_SOLVER_UNSATISFIABLE_PROBLEM = _sat.SAT_SOLVER_UNSATISFIABLE_PROBLEM

SAT_SOLVER_UNAVAILABLE = _sat.SAT_SOLVER_UNAVAILABLE

class TermFactoryCallbacks(object):
    r"""Proxy of C TermFactoryCallbacks_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    make_false = property(_sat.TermFactoryCallbacks_make_false_get, _sat.TermFactoryCallbacks_make_false_set, doc=r"""make_false : p.f(p.void).p.void""")
    make_true = property(_sat.TermFactoryCallbacks_make_true_get, _sat.TermFactoryCallbacks_make_true_set, doc=r"""make_true : p.f(p.void).p.void""")
    make_and = property(_sat.TermFactoryCallbacks_make_and_get, _sat.TermFactoryCallbacks_make_and_set, doc=r"""make_and : p.f(p.void,p.void,p.void).p.void""")
    make_or = property(_sat.TermFactoryCallbacks_make_or_get, _sat.TermFactoryCallbacks_make_or_set, doc=r"""make_or : p.f(p.void,p.void,p.void).p.void""")
    make_not = property(_sat.TermFactoryCallbacks_make_not_get, _sat.TermFactoryCallbacks_make_not_set, doc=r"""make_not : p.f(p.void,p.void).p.void""")
    make_var = property(_sat.TermFactoryCallbacks_make_var_get, _sat.TermFactoryCallbacks_make_var_set, doc=r"""make_var : p.f(int,p.void).p.void""")

    def __init__(self):
        r"""__init__(TermFactoryCallbacks self) -> TermFactoryCallbacks"""
        _sat.TermFactoryCallbacks_swiginit(self, _sat.new_TermFactoryCallbacks())
    __swig_destroy__ = _sat.delete_TermFactoryCallbacks

# Register TermFactoryCallbacks in _sat:
_sat.TermFactoryCallbacks_swigregister(TermFactoryCallbacks)

def SatSolver_destroy(_self):
    r"""SatSolver_destroy(SatSolver_ptr _self)"""
    return _sat.SatSolver_destroy(_self)

def SatSolver_get_permanent_group(_self):
    r"""SatSolver_get_permanent_group(SatSolver_ptr const _self) -> SatSolverGroup"""
    return _sat.SatSolver_get_permanent_group(_self)

def SatSolver_add(_self, cnfProb, group):
    r"""SatSolver_add(SatSolver_ptr const _self, Be_Cnf_ptr const cnfProb, SatSolverGroup group)"""
    return _sat.SatSolver_add(_self, cnfProb, group)

def SatSolver_set_polarity(_self, cnfProb, polarity, group):
    r"""SatSolver_set_polarity(SatSolver_ptr const _self, Be_Cnf_ptr const cnfProb, int polarity, SatSolverGroup group)"""
    return _sat.SatSolver_set_polarity(_self, cnfProb, polarity, group)

def SatSolver_set_preferred_variables(_self, cnfVars):
    r"""SatSolver_set_preferred_variables(SatSolver_ptr const _self, Slist_ptr const cnfVars)"""
    return _sat.SatSolver_set_preferred_variables(_self, cnfVars)

def SatSolver_get_conflicts(_self):
    r"""SatSolver_get_conflicts(SatSolver_ptr const _self) -> Slist_ptr"""
    return _sat.SatSolver_get_conflicts(_self)

def SatSolver_clear_preferred_variables(_self):
    r"""SatSolver_clear_preferred_variables(SatSolver_ptr const _self)"""
    return _sat.SatSolver_clear_preferred_variables(_self)

def SatSolver_solve_all_groups(_self):
    r"""SatSolver_solve_all_groups(SatSolver_ptr const _self) -> SatSolverResult"""
    return _sat.SatSolver_solve_all_groups(_self)

def SatSolver_solve_all_groups_assume(_self, assumptions):
    r"""SatSolver_solve_all_groups_assume(SatSolver_ptr const _self, Slist_ptr assumptions) -> SatSolverResult"""
    return _sat.SatSolver_solve_all_groups_assume(_self, assumptions)

def SatSolver_get_model(_self):
    r"""SatSolver_get_model(SatSolver_ptr const _self) -> Slist_ptr"""
    return _sat.SatSolver_get_model(_self)

def SatSolver_get_cnf_var(_self, var):
    r"""SatSolver_get_cnf_var(SatSolver_ptr const _self, int var) -> int"""
    return _sat.SatSolver_get_cnf_var(_self, var)

def SatSolver_set_random_mode(_self, seed):
    r"""SatSolver_set_random_mode(SatSolver_ptr _self, double seed)"""
    return _sat.SatSolver_set_random_mode(_self, seed)

def SatSolver_set_polarity_mode(_self, mode):
    r"""SatSolver_set_polarity_mode(SatSolver_ptr _self, int mode)"""
    return _sat.SatSolver_set_polarity_mode(_self, mode)

def SatSolver_get_polarity_mode(_self):
    r"""SatSolver_get_polarity_mode(SatSolver_ptr const _self) -> int"""
    return _sat.SatSolver_get_polarity_mode(_self)

def SatSolver_get_name(_self):
    r"""SatSolver_get_name(SatSolver_ptr const _self) -> char const *"""
    return _sat.SatSolver_get_name(_self)

def SatSolver_get_last_solving_time(_self):
    r"""SatSolver_get_last_solving_time(SatSolver_ptr const _self) -> long"""
    return _sat.SatSolver_get_last_solving_time(_self)

def SatSolver_curr_itp_group(_self):
    r"""SatSolver_curr_itp_group(SatSolver_ptr const _self) -> SatSolverItpGroup"""
    return _sat.SatSolver_curr_itp_group(_self)

def SatSolver_new_itp_group(_self):
    r"""SatSolver_new_itp_group(SatSolver_ptr const _self) -> SatSolverItpGroup"""
    return _sat.SatSolver_new_itp_group(_self)

def SatSolver_extract_interpolant(_self, nof_ga_groups, ga_groups, callbacks, user_data):
    r"""SatSolver_extract_interpolant(SatSolver_ptr const _self, int nof_ga_groups, SatSolverItpGroup * ga_groups, TermFactoryCallbacks callbacks, void * user_data) -> void *"""
    return _sat.SatSolver_extract_interpolant(_self, nof_ga_groups, ga_groups, callbacks, user_data)

def SatIncSolver_destroy(_self):
    r"""SatIncSolver_destroy(SatIncSolver_ptr _self)"""
    return _sat.SatIncSolver_destroy(_self)

def SatIncSolver_create_group(_self):
    r"""SatIncSolver_create_group(SatIncSolver_ptr const _self) -> SatSolverGroup"""
    return _sat.SatIncSolver_create_group(_self)

def SatIncSolver_destroy_group(_self, group):
    r"""SatIncSolver_destroy_group(SatIncSolver_ptr const _self, SatSolverGroup group)"""
    return _sat.SatIncSolver_destroy_group(_self, group)

def SatIncSolver_move_to_permanent_and_destroy_group(_self, group):
    r"""SatIncSolver_move_to_permanent_and_destroy_group(SatIncSolver_ptr const _self, SatSolverGroup group)"""
    return _sat.SatIncSolver_move_to_permanent_and_destroy_group(_self, group)

def SatIncSolver_solve_groups(_self, groups):
    r"""SatIncSolver_solve_groups(SatIncSolver_ptr const _self, Olist_ptr const groups) -> SatSolverResult"""
    return _sat.SatIncSolver_solve_groups(_self, groups)

def SatIncSolver_solve_without_groups(_self, groups):
    r"""SatIncSolver_solve_without_groups(SatIncSolver_ptr const _self, Olist_ptr const groups) -> SatSolverResult"""
    return _sat.SatIncSolver_solve_without_groups(_self, groups)

def SatIncSolver_cast_to_SatSolver_ptr(ptr):
    r"""SatIncSolver_cast_to_SatSolver_ptr(SatIncSolver_ptr ptr) -> SatSolver_ptr"""
    return _sat.SatIncSolver_cast_to_SatSolver_ptr(ptr)

