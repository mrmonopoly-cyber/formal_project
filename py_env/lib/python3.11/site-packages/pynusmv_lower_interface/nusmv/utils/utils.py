# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _utils
else:
    import _utils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PRIuPTR = _utils.PRIuPTR

PRIdPTR = _utils.PRIdPTR

LLU = _utils.LLU

LLO = _utils.LLO

LLX = _utils.LLX

false = _utils.false

true = _utils.true

OUTCOME_GENERIC_ERROR = _utils.OUTCOME_GENERIC_ERROR

OUTCOME_PARSER_ERROR = _utils.OUTCOME_PARSER_ERROR

OUTCOME_SYNTAX_ERROR = _utils.OUTCOME_SYNTAX_ERROR

OUTCOME_FILE_ERROR = _utils.OUTCOME_FILE_ERROR

OUTCOME_SUCCESS_REQUIRED_HELP = _utils.OUTCOME_SUCCESS_REQUIRED_HELP

OUTCOME_SUCCESS = _utils.OUTCOME_SUCCESS


def Utils_pkg_init():
    r"""Utils_pkg_init()"""
    return _utils.Utils_pkg_init()

def Utils_pkg_quit():
    r"""Utils_pkg_quit()"""
    return _utils.Utils_pkg_quit()

def Utils_FreeListOfLists(list_of_lists):
    r"""Utils_FreeListOfLists(ls_dummy list_of_lists)"""
    return _utils.Utils_FreeListOfLists(list_of_lists)

def Utils_StripPath(pathfname):
    r"""Utils_StripPath(char const * pathfname) -> char const *"""
    return _utils.Utils_StripPath(pathfname)

def Utils_StripPathNoExtension(fpathname, filename):
    r"""Utils_StripPathNoExtension(char const * fpathname, char * filename)"""
    return _utils.Utils_StripPathNoExtension(fpathname, filename)

def Utils_StripPathNoFilenameNoExtension(fpathname, dirname):
    r"""Utils_StripPathNoFilenameNoExtension(char const * fpathname, char * dirname)"""
    return _utils.Utils_StripPathNoFilenameNoExtension(fpathname, dirname)

def Utils_get_temp_filename_in_dir(dir, templ):
    r"""Utils_get_temp_filename_in_dir(char const * dir, char const * templ) -> char *"""
    return _utils.Utils_get_temp_filename_in_dir(dir, templ)

def Utils_file_exists_in_paths(filename, paths, delimiters):
    r"""Utils_file_exists_in_paths(char const * filename, char const * paths, char const * delimiters) -> boolean"""
    return _utils.Utils_file_exists_in_paths(filename, paths, delimiters)

def Utils_file_exists_in_directory(filename, directory):
    r"""Utils_file_exists_in_directory(char const * filename, char * directory) -> boolean"""
    return _utils.Utils_file_exists_in_directory(filename, directory)

def Utils_strcasecmp(s1, s2):
    r"""Utils_strcasecmp(char const * s1, char const * s2) -> int"""
    return _utils.Utils_strcasecmp(s1, s2)

def Utils_log2_round(a):
    r"""Utils_log2_round(unsigned long long a) -> int"""
    return _utils.Utils_log2_round(a)

def Utils_start_timer(name):
    r"""Utils_start_timer(char const * name)"""
    return _utils.Utils_start_timer(name)

def Utils_stop_timer(name):
    r"""Utils_stop_timer(char const * name)"""
    return _utils.Utils_stop_timer(name)

def Utils_reset_timer(name):
    r"""Utils_reset_timer(char const * name)"""
    return _utils.Utils_reset_timer(name)

def Utils_print_timer(name, msg):
    r"""Utils_print_timer(char const * name, char const * msg)"""
    return _utils.Utils_print_timer(name, msg)

def Utils_str_escape_xml_file(str, file):
    r"""Utils_str_escape_xml_file(char const * str, FILE * file)"""
    return _utils.Utils_str_escape_xml_file(str, file)
ARRAY_OUT_OF_MEM = _utils.ARRAY_OUT_OF_MEM

class array_t(object):
    r"""Proxy of C array_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    space = property(_utils.array_t_space_get, _utils.array_t_space_set, doc=r"""space : p.char""")
    num = property(_utils.array_t_num_get, _utils.array_t_num_set, doc=r"""num : int""")
    n_size = property(_utils.array_t_n_size_get, _utils.array_t_n_size_set, doc=r"""n_size : int""")
    obj_size = property(_utils.array_t_obj_size_get, _utils.array_t_obj_size_set, doc=r"""obj_size : int""")
    index = property(_utils.array_t_index_get, _utils.array_t_index_set, doc=r"""index : int""")

    def __init__(self):
        r"""__init__(array_t self) -> array_t"""
        _utils.array_t_swiginit(self, _utils.new_array_t())
    __swig_destroy__ = _utils.delete_array_t

# Register array_t in _utils:
_utils.array_t_swigregister(array_t)

def array_do_alloc(arg1, arg2):
    r"""array_do_alloc(int arg1, int arg2) -> array_t"""
    return _utils.array_do_alloc(arg1, arg2)

def array_dup(arg1):
    r"""array_dup(array_t arg1) -> array_t"""
    return _utils.array_dup(arg1)

def array_join(arg1, arg2):
    r"""array_join(array_t arg1, array_t arg2) -> array_t"""
    return _utils.array_join(arg1, arg2)

def array_free(arg1):
    r"""array_free(array_t arg1)"""
    return _utils.array_free(arg1)

def array_append(arg1, arg2):
    r"""array_append(array_t arg1, array_t arg2) -> int"""
    return _utils.array_append(arg1, arg2)

def array_sort(arg1, arg2):
    r"""array_sort(array_t arg1, int (*)() arg2)"""
    return _utils.array_sort(arg1, arg2)

def array_uniq(arg1, arg2, arg3):
    r"""array_uniq(array_t arg1, int (*)() arg2, void (*)() arg3)"""
    return _utils.array_uniq(arg1, arg2, arg3)

def array_abort(arg1, arg2):
    r"""array_abort(array_t arg1, int arg2) -> int"""
    return _utils.array_abort(arg1, arg2)

def array_resize(arg1, arg2):
    r"""array_resize(array_t arg1, int arg2) -> int"""
    return _utils.array_resize(arg1, arg2)

def array_do_data(arg1):
    r"""array_do_data(array_t arg1) -> char *"""
    return _utils.array_do_data(arg1)

def new_assoc():
    r"""new_assoc() -> hash_ptr"""
    return _utils.new_assoc()

def new_assoc_with_size(initial_size):
    r"""new_assoc_with_size(int initial_size) -> hash_ptr"""
    return _utils.new_assoc_with_size(initial_size)

def new_assoc_with_params(compare_fun, hash_fun):
    r"""new_assoc_with_params(ST_PFICPCP compare_fun, ST_PFICPI hash_fun) -> hash_ptr"""
    return _utils.new_assoc_with_params(compare_fun, hash_fun)

def new_assoc_string_key():
    r"""new_assoc_string_key() -> hash_ptr"""
    return _utils.new_assoc_string_key()

def free_assoc(hash):
    r"""free_assoc(hash_ptr hash)"""
    return _utils.free_assoc(hash)

def copy_assoc(hash):
    r"""copy_assoc(hash_ptr hash) -> hash_ptr"""
    return _utils.copy_assoc(hash)

def find_assoc(arg1, arg2):
    r"""find_assoc(hash_ptr arg1, node_ptr arg2) -> node_ptr"""
    return _utils.find_assoc(arg1, arg2)

def insert_assoc(arg1, arg2, arg3):
    r"""insert_assoc(hash_ptr arg1, node_ptr arg2, node_ptr arg3)"""
    return _utils.insert_assoc(arg1, arg2, arg3)

def remove_assoc(hash, key):
    r"""remove_assoc(hash_ptr hash, node_ptr key) -> node_ptr"""
    return _utils.remove_assoc(hash, key)

def assoc_get_keys(hash, ignore_nils):
    r"""assoc_get_keys(hash_ptr hash, boolean ignore_nils) -> node_ptr"""
    return _utils.assoc_get_keys(hash, ignore_nils)

def clear_assoc_and_free_entries(arg1, arg2):
    r"""clear_assoc_and_free_entries(hash_ptr arg1, ST_PFSR arg2)"""
    return _utils.clear_assoc_and_free_entries(arg1, arg2)

def clear_assoc_and_free_entries_arg(hash, fn, arg):
    r"""clear_assoc_and_free_entries_arg(hash_ptr hash, ST_PFSR fn, char * arg)"""
    return _utils.clear_assoc_and_free_entries_arg(hash, fn, arg)

def clear_assoc(hash):
    r"""clear_assoc(hash_ptr hash)"""
    return _utils.clear_assoc(hash)

def assoc_foreach(hash, fn, arg):
    r"""assoc_foreach(hash_ptr hash, ST_PFSR fn, char * arg)"""
    return _utils.assoc_foreach(hash, fn, arg)
class avl_node_struct(object):
    r"""Proxy of C avl_node_struct struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    left = property(_utils.avl_node_struct_left_get, _utils.avl_node_struct_left_set, doc=r"""left : p.avl_node""")
    right = property(_utils.avl_node_struct_right_get, _utils.avl_node_struct_right_set, doc=r"""right : p.avl_node""")
    key = property(_utils.avl_node_struct_key_get, _utils.avl_node_struct_key_set, doc=r"""key : p.char""")
    value = property(_utils.avl_node_struct_value_get, _utils.avl_node_struct_value_set, doc=r"""value : p.char""")
    height = property(_utils.avl_node_struct_height_get, _utils.avl_node_struct_height_set, doc=r"""height : int""")

    def __init__(self):
        r"""__init__(avl_node_struct self) -> avl_node_struct"""
        _utils.avl_node_struct_swiginit(self, _utils.new_avl_node_struct())
    __swig_destroy__ = _utils.delete_avl_node_struct

# Register avl_node_struct in _utils:
_utils.avl_node_struct_swigregister(avl_node_struct)
cvar = _utils.cvar

class avl_tree_struct(object):
    r"""Proxy of C avl_tree_struct struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    root = property(_utils.avl_tree_struct_root_get, _utils.avl_tree_struct_root_set, doc=r"""root : p.avl_node""")
    compar = property(_utils.avl_tree_struct_compar_get, _utils.avl_tree_struct_compar_set, doc=r"""compar : p.f().int""")
    num_entries = property(_utils.avl_tree_struct_num_entries_get, _utils.avl_tree_struct_num_entries_set, doc=r"""num_entries : int""")
    modified = property(_utils.avl_tree_struct_modified_get, _utils.avl_tree_struct_modified_set, doc=r"""modified : int""")

    def __init__(self):
        r"""__init__(avl_tree_struct self) -> avl_tree_struct"""
        _utils.avl_tree_struct_swiginit(self, _utils.new_avl_tree_struct())
    __swig_destroy__ = _utils.delete_avl_tree_struct

# Register avl_tree_struct in _utils:
_utils.avl_tree_struct_swigregister(avl_tree_struct)
class avl_generator_struct(object):
    r"""Proxy of C avl_generator_struct struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tree = property(_utils.avl_generator_struct_tree_get, _utils.avl_generator_struct_tree_set, doc=r"""tree : p.avl_tree""")
    nodelist = property(_utils.avl_generator_struct_nodelist_get, _utils.avl_generator_struct_nodelist_set, doc=r"""nodelist : p.p.avl_node""")
    count = property(_utils.avl_generator_struct_count_get, _utils.avl_generator_struct_count_set, doc=r"""count : int""")

    def __init__(self):
        r"""__init__(avl_generator_struct self) -> avl_generator_struct"""
        _utils.avl_generator_struct_swiginit(self, _utils.new_avl_generator_struct())
    __swig_destroy__ = _utils.delete_avl_generator_struct

# Register avl_generator_struct in _utils:
_utils.avl_generator_struct_swigregister(avl_generator_struct)
AVL_FORWARD = _utils.AVL_FORWARD

AVL_BACKWARD = _utils.AVL_BACKWARD


def avl_init_table(arg1):
    r"""avl_init_table(int (*)() arg1) -> avl_tree_struct"""
    return _utils.avl_init_table(arg1)

def avl_delete(arg1, arg2, arg3):
    r"""avl_delete(avl_tree_struct arg1, char ** arg2, char ** arg3) -> int"""
    return _utils.avl_delete(arg1, arg2, arg3)

def avl_insert(arg1, arg2, arg3):
    r"""avl_insert(avl_tree_struct arg1, char * arg2, char * arg3) -> int"""
    return _utils.avl_insert(arg1, arg2, arg3)

def avl_lookup(arg1, arg2, arg3):
    r"""avl_lookup(avl_tree_struct arg1, char * arg2, char ** arg3) -> int"""
    return _utils.avl_lookup(arg1, arg2, arg3)

def avl_first(arg1, arg2, arg3):
    r"""avl_first(avl_tree_struct arg1, char ** arg2, char ** arg3) -> int"""
    return _utils.avl_first(arg1, arg2, arg3)

def avl_last(arg1, arg2, arg3):
    r"""avl_last(avl_tree_struct arg1, char ** arg2, char ** arg3) -> int"""
    return _utils.avl_last(arg1, arg2, arg3)

def avl_find_or_add(arg1, arg2, arg3):
    r"""avl_find_or_add(avl_tree_struct arg1, char * arg2, char *** arg3) -> int"""
    return _utils.avl_find_or_add(arg1, arg2, arg3)

def avl_count(arg1):
    r"""avl_count(avl_tree_struct arg1) -> int"""
    return _utils.avl_count(arg1)

def avl_numcmp(arg1, arg2):
    r"""avl_numcmp(char * arg1, char * arg2) -> int"""
    return _utils.avl_numcmp(arg1, arg2)

def avl_gen(arg1, arg2, arg3):
    r"""avl_gen(avl_generator_struct arg1, char ** arg2, char ** arg3) -> int"""
    return _utils.avl_gen(arg1, arg2, arg3)

def avl_foreach(arg1, arg2, arg3):
    r"""avl_foreach(avl_tree_struct arg1, void (*)() arg2, int arg3)"""
    return _utils.avl_foreach(arg1, arg2, arg3)

def avl_free_table(arg1, arg2, arg3):
    r"""avl_free_table(avl_tree_struct arg1, void (*)() arg2, void (*)() arg3)"""
    return _utils.avl_free_table(arg1, arg2, arg3)

def avl_free_gen(arg1):
    r"""avl_free_gen(avl_generator_struct arg1)"""
    return _utils.avl_free_gen(arg1)

def avl_init_gen(arg1, arg2):
    r"""avl_init_gen(avl_tree_struct arg1, int arg2) -> avl_generator_struct"""
    return _utils.avl_init_gen(arg1, arg2)
FAILURE_DIV_BY_ZERO = _utils.FAILURE_DIV_BY_ZERO

FAILURE_CASE_NOT_EXHAUSTIVE = _utils.FAILURE_CASE_NOT_EXHAUSTIVE

FAILURE_ARRAY_OUT_OF_BOUNDS = _utils.FAILURE_ARRAY_OUT_OF_BOUNDS

FAILURE_UNSPECIFIED = _utils.FAILURE_UNSPECIFIED


def init_the_node():
    r"""init_the_node()"""
    return _utils.init_the_node()

def set_the_node(arg1):
    r"""set_the_node(node_ptr arg1)"""
    return _utils.set_the_node(arg1)

def get_the_node():
    r"""get_the_node() -> node_ptr"""
    return _utils.get_the_node()

def io_atom_isempty():
    r"""io_atom_isempty() -> int"""
    return _utils.io_atom_isempty()

def io_atom_push(arg1):
    r"""io_atom_push(node_ptr arg1)"""
    return _utils.io_atom_push(arg1)

def io_atom_pop():
    r"""io_atom_pop()"""
    return _utils.io_atom_pop()

def io_atom_head():
    r"""io_atom_head() -> node_ptr"""
    return _utils.io_atom_head()

def print_io_atom_stack(fd):
    r"""print_io_atom_stack(FILE * fd)"""
    return _utils.print_io_atom_stack(fd)

def start_parsing_err():
    r"""start_parsing_err()"""
    return _utils.start_parsing_err()

def nusmv_exit(arg1):
    r"""nusmv_exit(int arg1)"""
    return _utils.nusmv_exit(arg1)

def rpterr(*args):
    r"""rpterr(char const * arg1)"""
    return _utils.rpterr(*args)

def rpterr_node(*args):
    r"""rpterr_node(node_ptr node, char const * fmt)"""
    return _utils.rpterr_node(*args)

def internal_error(*args):
    r"""internal_error(char const * arg1)"""
    return _utils.internal_error(*args)

def report_failure_node(arg1):
    r"""report_failure_node(node_ptr arg1)"""
    return _utils.report_failure_node(arg1)

def warning_failure_node(n):
    r"""warning_failure_node(node_ptr n)"""
    return _utils.warning_failure_node(n)

def warning_case_not_exhaustive(arg1):
    r"""warning_case_not_exhaustive(node_ptr arg1)"""
    return _utils.warning_case_not_exhaustive(arg1)

def warning_possible_div_by_zero(failure):
    r"""warning_possible_div_by_zero(node_ptr failure)"""
    return _utils.warning_possible_div_by_zero(failure)

def error_div_by_zero(expr):
    r"""error_div_by_zero(node_ptr expr)"""
    return _utils.error_div_by_zero(expr)

def error_div_by_nonconst(expr):
    r"""error_div_by_nonconst(node_ptr expr)"""
    return _utils.error_div_by_nonconst(expr)

def warning_possible_array_out_of_bounds(failure):
    r"""warning_possible_array_out_of_bounds(node_ptr failure)"""
    return _utils.warning_possible_array_out_of_bounds(failure)

def error_array_out_of_bounds(index, low, high):
    r"""error_array_out_of_bounds(int index, int low, int high)"""
    return _utils.error_array_out_of_bounds(index, low, high)

def error_lhs_of_index_is_not_array():
    r"""error_lhs_of_index_is_not_array()"""
    return _utils.error_lhs_of_index_is_not_array()

def range_error(arg1, arg2):
    r"""range_error(node_ptr arg1, node_ptr arg2)"""
    return _utils.range_error(arg1, arg2)

def range_warning(arg1, arg2):
    r"""range_warning(node_ptr arg1, node_ptr arg2)"""
    return _utils.range_warning(arg1, arg2)

def type_error(arg1):
    r"""type_error(node_ptr arg1)"""
    return _utils.type_error(arg1)

def error_shadowing(s):
    r"""error_shadowing(node_ptr s)"""
    return _utils.error_shadowing(s)

def error_redefining(arg1):
    r"""error_redefining(node_ptr arg1)"""
    return _utils.error_redefining(arg1)

def error_redefining_operational_symbol(arg1):
    r"""error_redefining_operational_symbol(node_ptr arg1)"""
    return _utils.error_redefining_operational_symbol(arg1)

def error_redefining_input_var(s):
    r"""error_redefining_input_var(node_ptr s)"""
    return _utils.error_redefining_input_var(s)

def error_reassigning(s):
    r"""error_reassigning(node_ptr s)"""
    return _utils.error_reassigning(s)

def error_assign_input_var(s):
    r"""error_assign_input_var(node_ptr s)"""
    return _utils.error_assign_input_var(s)

def error_assign_frozen_var(s):
    r"""error_assign_frozen_var(node_ptr s)"""
    return _utils.error_assign_frozen_var(s)

def error_assign_expected_var(s):
    r"""error_assign_expected_var(node_ptr s)"""
    return _utils.error_assign_expected_var(s)

def error_ambiguous(s):
    r"""error_ambiguous(node_ptr s)"""
    return _utils.error_ambiguous(s)

def error_undefined(arg1):
    r"""error_undefined(node_ptr arg1)"""
    return _utils.error_undefined(arg1)

def error_circular(arg1):
    r"""error_circular(node_ptr arg1)"""
    return _utils.error_circular(arg1)

def error_too_many_vars():
    r"""error_too_many_vars()"""
    return _utils.error_too_many_vars()

def error_not_proper_number(op, arg2):
    r"""error_not_proper_number(char const * op, node_ptr arg2)"""
    return _utils.error_not_proper_number(op, arg2)

def error_not_proper_numbers(op, arg2, arg3):
    r"""error_not_proper_numbers(char const * op, node_ptr arg2, node_ptr arg3)"""
    return _utils.error_not_proper_numbers(op, arg2, arg3)

def error_multiple_assignment(arg1):
    r"""error_multiple_assignment(node_ptr arg1)"""
    return _utils.error_multiple_assignment(arg1)

def error_empty_range(arg1, arg2, arg3):
    r"""error_empty_range(node_ptr arg1, int arg2, int arg3)"""
    return _utils.error_empty_range(arg1, arg2, arg3)

def error_not_constant_resize_width(arg1):
    r"""error_not_constant_resize_width(node_ptr arg1)"""
    return _utils.error_not_constant_resize_width(arg1)

def error_not_constant_extend_width(arg1):
    r"""error_not_constant_extend_width(node_ptr arg1)"""
    return _utils.error_not_constant_extend_width(arg1)

def error_not_constant_wtoint(arg1):
    r"""error_not_constant_wtoint(node_ptr arg1)"""
    return _utils.error_not_constant_wtoint(arg1)

def error_not_constant_width_of_word_type(arg1):
    r"""error_not_constant_width_of_word_type(node_ptr arg1)"""
    return _utils.error_not_constant_width_of_word_type(arg1)

def error_not_constant_width_of_word_array_type(arg1):
    r"""error_not_constant_width_of_word_array_type(node_ptr arg1)"""
    return _utils.error_not_constant_width_of_word_array_type(arg1)

def error_not_constant_width_of_array_type(arg1):
    r"""error_not_constant_width_of_array_type(node_ptr arg1)"""
    return _utils.error_not_constant_width_of_array_type(arg1)

def error_wrong_word_operand(msg, arg2):
    r"""error_wrong_word_operand(char const * msg, node_ptr arg2)"""
    return _utils.error_wrong_word_operand(msg, arg2)

def error_assign_both(arg1, arg2, arg3, arg4):
    r"""error_assign_both(node_ptr arg1, node_ptr arg2, int arg3, int arg4)"""
    return _utils.error_assign_both(arg1, arg2, arg3, arg4)

def error_unknown_var_in_order_file(arg1):
    r"""error_unknown_var_in_order_file(node_ptr arg1)"""
    return _utils.error_unknown_var_in_order_file(arg1)

def error_var_appear_twice_in_order_file(arg1):
    r"""error_var_appear_twice_in_order_file(node_ptr arg1)"""
    return _utils.error_var_appear_twice_in_order_file(arg1)

def warning_var_appear_twice_in_order_file(arg1):
    r"""warning_var_appear_twice_in_order_file(node_ptr arg1)"""
    return _utils.warning_var_appear_twice_in_order_file(arg1)

def warning_id_appears_twice_in_idlist_file(n):
    r"""warning_id_appears_twice_in_idlist_file(node_ptr n)"""
    return _utils.warning_id_appears_twice_in_idlist_file(n)

def warning_variable_not_declared(arg1):
    r"""warning_variable_not_declared(node_ptr arg1)"""
    return _utils.warning_variable_not_declared(arg1)

def warning_missing_variable(arg1):
    r"""warning_missing_variable(node_ptr arg1)"""
    return _utils.warning_missing_variable(arg1)

def warning_missing_variables(vars_list):
    r"""warning_missing_variables(NodeList_ptr vars_list)"""
    return _utils.warning_missing_variables(vars_list)

def warning_non_ag_only_spec(arg1):
    r"""warning_non_ag_only_spec(Prop_ptr arg1)"""
    return _utils.warning_non_ag_only_spec(arg1)

def warning_ag_only_without_reachables():
    r"""warning_ag_only_without_reachables()"""
    return _utils.warning_ag_only_without_reachables()

def warning_fsm_init_empty():
    r"""warning_fsm_init_empty()"""
    return _utils.warning_fsm_init_empty()

def warning_fsm_fairness_empty():
    r"""warning_fsm_fairness_empty()"""
    return _utils.warning_fsm_fairness_empty()

def warning_fsm_init_and_fairness_empty():
    r"""warning_fsm_init_and_fairness_empty()"""
    return _utils.warning_fsm_init_and_fairness_empty()

def warning_fsm_invar_empty():
    r"""warning_fsm_invar_empty()"""
    return _utils.warning_fsm_invar_empty()

def error_var_not_in_order_file(arg1):
    r"""error_var_not_in_order_file(node_ptr arg1)"""
    return _utils.error_var_not_in_order_file(arg1)

def error_out_of_memory(arg1):
    r"""error_out_of_memory(size_t arg1)"""
    return _utils.error_out_of_memory(arg1)

def error_invalid_subrange(range):
    r"""error_invalid_subrange(node_ptr range)"""
    return _utils.error_invalid_subrange(range)

def error_invalid_bool_cast(expr):
    r"""error_invalid_bool_cast(node_ptr expr)"""
    return _utils.error_invalid_bool_cast(expr)

def error_invalid_toint_cast(expr):
    r"""error_invalid_toint_cast(node_ptr expr)"""
    return _utils.error_invalid_toint_cast(expr)

def error_out_of_bounds_word_toint_cast(expr):
    r"""error_out_of_bounds_word_toint_cast(node_ptr expr)"""
    return _utils.error_out_of_bounds_word_toint_cast(expr)

def error_invalid_count_operator(expr):
    r"""error_invalid_count_operator(node_ptr expr)"""
    return _utils.error_invalid_count_operator(expr)

def error_invalid_enum_value(value):
    r"""error_invalid_enum_value(node_ptr value)"""
    return _utils.error_invalid_enum_value(value)

def error_game_definition_contains_input_vars(var_name):
    r"""error_game_definition_contains_input_vars(node_ptr var_name)"""
    return _utils.error_game_definition_contains_input_vars(var_name)

def error_property_contains_input_vars(arg1):
    r"""error_property_contains_input_vars(Prop_ptr arg1)"""
    return _utils.error_property_contains_input_vars(arg1)

def error_assign_exp_contains_input_vars(arg1):
    r"""error_assign_exp_contains_input_vars(node_ptr arg1)"""
    return _utils.error_assign_exp_contains_input_vars(arg1)

def error_next_exp_contains_input_vars(arg1):
    r"""error_next_exp_contains_input_vars(node_ptr arg1)"""
    return _utils.error_next_exp_contains_input_vars(arg1)

def error_invar_exp_contains_input_vars(arg1):
    r"""error_invar_exp_contains_input_vars(node_ptr arg1)"""
    return _utils.error_invar_exp_contains_input_vars(arg1)

def error_init_exp_contains_input_vars(arg1):
    r"""error_init_exp_contains_input_vars(node_ptr arg1)"""
    return _utils.error_init_exp_contains_input_vars(arg1)

def error_second_player_var(arg1):
    r"""error_second_player_var(node_ptr arg1)"""
    return _utils.error_second_player_var(arg1)

def error_second_player_next_var(arg1):
    r"""error_second_player_next_var(node_ptr arg1)"""
    return _utils.error_second_player_next_var(arg1)

def error_unknown_preprocessor(prep_name):
    r"""error_unknown_preprocessor(char const * prep_name)"""
    return _utils.error_unknown_preprocessor(prep_name)

def error_type_system_violation():
    r"""error_type_system_violation()"""
    return _utils.error_type_system_violation()

def error_psl_not_supported_feature():
    r"""error_psl_not_supported_feature()"""
    return _utils.error_psl_not_supported_feature()

def error_psl_not_supported_feature_next_number():
    r"""error_psl_not_supported_feature_next_number()"""
    return _utils.error_psl_not_supported_feature_next_number()

def error_not_supported_feature(msg):
    r"""error_not_supported_feature(char const * msg)"""
    return _utils.error_not_supported_feature(msg)

def error_expected_number():
    r"""error_expected_number()"""
    return _utils.error_expected_number()

def warning_psl_not_supported_feature(psl_spec, index):
    r"""warning_psl_not_supported_feature(node_ptr psl_spec, int index)"""
    return _utils.warning_psl_not_supported_feature(psl_spec, index)

def error_psl_repeated_replicator_id():
    r"""error_psl_repeated_replicator_id()"""
    return _utils.error_psl_repeated_replicator_id()

def error_invalid_number(szNumber):
    r"""error_invalid_number(char const * szNumber)"""
    return _utils.error_invalid_number(szNumber)

def error_bmc_invalid_k_l(k, l):
    r"""error_bmc_invalid_k_l(int const k, int const l)"""
    return _utils.error_bmc_invalid_k_l(k, l)

def error_property_already_specified():
    r"""error_property_already_specified()"""
    return _utils.error_property_already_specified()

def error_invalid_numeric_value(value, reason):
    r"""error_invalid_numeric_value(int value, char const * reason)"""
    return _utils.error_invalid_numeric_value(value, reason)

def error_file_not_found(filename):
    r"""error_file_not_found(char const * filename)"""
    return _utils.error_file_not_found(filename)

def warning_processes_deprecated():
    r"""warning_processes_deprecated()"""
    return _utils.warning_processes_deprecated()

def error_not_word_wsizeof(expr):
    r"""error_not_word_wsizeof(node_ptr expr)"""
    return _utils.error_not_word_wsizeof(expr)

def finish_parsing_err():
    r"""finish_parsing_err()"""
    return _utils.finish_parsing_err()

def error_reset_and_exit(val):
    r"""error_reset_and_exit(int val)"""
    return _utils.error_reset_and_exit(val)

def init_memory():
    r"""init_memory()"""
    return _utils.init_memory()

def failure_make(msg, kind, lineno):
    r"""failure_make(char const * msg, FailureKind kind, int lineno) -> node_ptr"""
    return _utils.failure_make(msg, kind, lineno)

def failure_get_msg(failure):
    r"""failure_get_msg(node_ptr failure) -> char const *"""
    return _utils.failure_get_msg(failure)

def failure_get_kind(failure):
    r"""failure_get_kind(node_ptr failure) -> FailureKind"""
    return _utils.failure_get_kind(failure)

def failure_get_lineno(failure):
    r"""failure_get_lineno(node_ptr failure) -> int"""
    return _utils.failure_get_lineno(failure)

def util_newlongjmp():
    r"""util_newlongjmp() -> sigjmp_buf *"""
    return _utils.util_newlongjmp()

def util_longjmp():
    r"""util_longjmp()"""
    return _utils.util_longjmp()

def util_cancellongjmp():
    r"""util_cancellongjmp()"""
    return _utils.util_cancellongjmp()

def util_resetlongjmp():
    r"""util_resetlongjmp()"""
    return _utils.util_resetlongjmp()
HEAP_MAXLENGTH_INIT = _utils.HEAP_MAXLENGTH_INIT


def heap_create():
    r"""heap_create() -> heap"""
    return _utils.heap_create()

def heap_destroy(h):
    r"""heap_destroy(heap h)"""
    return _utils.heap_destroy(h)

def heap_add(h, val, el):
    r"""heap_add(heap h, float val, void * el)"""
    return _utils.heap_add(h, val, el)

def heap_isempty(h):
    r"""heap_isempty(heap h) -> int"""
    return _utils.heap_isempty(h)

def heap_getmax(h):
    r"""heap_getmax(heap h) -> void *"""
    return _utils.heap_getmax(h)
class ls_dummy(object):
    r"""Proxy of C ls_dummy_defn struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dummy = property(_utils.ls_dummy_dummy_get, _utils.ls_dummy_dummy_set, doc=r"""dummy : int""")

    def __init__(self):
        r"""__init__(ls_dummy self) -> ls_dummy"""
        _utils.ls_dummy_swiginit(self, _utils.new_ls_dummy())
    __swig_destroy__ = _utils.delete_ls_dummy

# Register ls_dummy in _utils:
_utils.ls_dummy_swigregister(ls_dummy)
LS_NIL = _utils.LS_NIL

LS_BADSTATE = _utils.LS_BADSTATE

LS_BADPARAM = _utils.LS_BADPARAM

LS_NOMORE = _utils.LS_NOMORE

LS_OK = _utils.LS_OK

LS_BEFORE = _utils.LS_BEFORE

LS_AFTER = _utils.LS_AFTER

LS_STOP = _utils.LS_STOP

LS_DELETE = _utils.LS_DELETE


def lsCreate():
    r"""lsCreate() -> ls_dummy"""
    return _utils.lsCreate()

def lsSingleton(arg1, arg2):
    r"""lsSingleton(lsGeneric arg1, lsHandle * arg2) -> ls_dummy"""
    return _utils.lsSingleton(arg1, arg2)

def lsDestroy(arg1, arg2):
    r"""lsDestroy(ls_dummy arg1, void (*)() arg2) -> lsStatus"""
    return _utils.lsDestroy(arg1, arg2)

def lsDestroyListList(arg1):
    r"""lsDestroyListList(ls_dummy arg1) -> lsStatus"""
    return _utils.lsDestroyListList(arg1)

def lsCopy(arg1, arg2):
    r"""lsCopy(ls_dummy arg1, LS_PFLSG arg2) -> ls_dummy"""
    return _utils.lsCopy(arg1, arg2)

def lsCopyListList(arg1):
    r"""lsCopyListList(ls_dummy arg1) -> ls_dummy"""
    return _utils.lsCopyListList(arg1)

def lsAppend(arg1, arg2, arg3):
    r"""lsAppend(ls_dummy arg1, ls_dummy arg2, LS_PFLSG arg3) -> ls_dummy"""
    return _utils.lsAppend(arg1, arg2, arg3)

def lsJoin(arg1, arg2, arg3):
    r"""lsJoin(ls_dummy arg1, ls_dummy arg2, LS_PFLSG arg3)"""
    return _utils.lsJoin(arg1, arg2, arg3)

def lsFirstItem(arg1, arg2, arg3):
    r"""lsFirstItem(ls_dummy arg1, lsGeneric * arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsFirstItem(arg1, arg2, arg3)

def lsLastItem(arg1, arg2, arg3):
    r"""lsLastItem(ls_dummy arg1, lsGeneric * arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsLastItem(arg1, arg2, arg3)

def lsNewBegin(arg1, arg2, arg3):
    r"""lsNewBegin(ls_dummy arg1, lsGeneric arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsNewBegin(arg1, arg2, arg3)

def lsNewEnd(arg1, arg2, arg3):
    r"""lsNewEnd(ls_dummy arg1, lsGeneric arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsNewEnd(arg1, arg2, arg3)

def lsDelBegin(arg1, arg2):
    r"""lsDelBegin(ls_dummy arg1, lsGeneric * arg2) -> lsStatus"""
    return _utils.lsDelBegin(arg1, arg2)

def lsDelEnd(arg1, arg2):
    r"""lsDelEnd(ls_dummy arg1, lsGeneric * arg2) -> lsStatus"""
    return _utils.lsDelEnd(arg1, arg2)

def lsLength(arg1):
    r"""lsLength(ls_dummy arg1) -> int"""
    return _utils.lsLength(arg1)

def lsStart(arg1):
    r"""lsStart(ls_dummy arg1) -> ls_dummy"""
    return _utils.lsStart(arg1)

def lsEnd(arg1):
    r"""lsEnd(ls_dummy arg1) -> ls_dummy"""
    return _utils.lsEnd(arg1)

def lsGenHandle(arg1, arg2, arg3):
    r"""lsGenHandle(ls_dummy arg1, lsGeneric * arg2, int arg3) -> ls_dummy"""
    return _utils.lsGenHandle(arg1, arg2, arg3)

def lsNext(arg1, arg2, arg3):
    r"""lsNext(ls_dummy arg1, lsGeneric * arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsNext(arg1, arg2, arg3)

def lsPrev(arg1, arg2, arg3):
    r"""lsPrev(ls_dummy arg1, lsGeneric * arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsPrev(arg1, arg2, arg3)

def lsInBefore(arg1, arg2, arg3):
    r"""lsInBefore(ls_dummy arg1, lsGeneric arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsInBefore(arg1, arg2, arg3)

def lsInAfter(arg1, arg2, arg3):
    r"""lsInAfter(ls_dummy arg1, lsGeneric arg2, lsHandle * arg3) -> lsStatus"""
    return _utils.lsInAfter(arg1, arg2, arg3)

def lsDelBefore(arg1, arg2):
    r"""lsDelBefore(ls_dummy arg1, lsGeneric * arg2) -> lsStatus"""
    return _utils.lsDelBefore(arg1, arg2)

def lsDelAfter(arg1, arg2):
    r"""lsDelAfter(ls_dummy arg1, lsGeneric * arg2) -> lsStatus"""
    return _utils.lsDelAfter(arg1, arg2)

def lsFinish(arg1):
    r"""lsFinish(ls_dummy arg1) -> lsStatus"""
    return _utils.lsFinish(arg1)

def lsQueryHandle(arg1):
    r"""lsQueryHandle(ls_dummy arg1) -> ls_dummy"""
    return _utils.lsQueryHandle(arg1)

def lsFetchHandle(arg1):
    r"""lsFetchHandle(ls_dummy arg1) -> lsGeneric"""
    return _utils.lsFetchHandle(arg1)

def lsRemoveItem(arg1, arg2):
    r"""lsRemoveItem(ls_dummy arg1, lsGeneric * arg2) -> lsStatus"""
    return _utils.lsRemoveItem(arg1, arg2)

def lsSort(arg1, arg2):
    r"""lsSort(ls_dummy arg1, int (*)() arg2) -> lsStatus"""
    return _utils.lsSort(arg1, arg2)

def lsUniq(arg1, arg2, arg3):
    r"""lsUniq(ls_dummy arg1, int (*)() arg2, void (*)() arg3) -> lsStatus"""
    return _utils.lsUniq(arg1, arg2, arg3)

def NodeGraph_create():
    r"""NodeGraph_create() -> NodeGraph_ptr"""
    return _utils.NodeGraph_create()

def NodeGraph_destroy(_self):
    r"""NodeGraph_destroy(NodeGraph_ptr _self)"""
    return _utils.NodeGraph_destroy(_self)

def NodeGraph_add_children(_self, var, children):
    r"""NodeGraph_add_children(NodeGraph_ptr _self, node_ptr var, Set_t const children)"""
    return _utils.NodeGraph_add_children(_self, var, children)

def NodeGraph_remove_nodes(_self, nodes):
    r"""NodeGraph_remove_nodes(NodeGraph_ptr _self, Set_t const nodes)"""
    return _utils.NodeGraph_remove_nodes(_self, nodes)

def NodeGraph_clear_removed_nodes(_self):
    r"""NodeGraph_clear_removed_nodes(NodeGraph_ptr _self)"""
    return _utils.NodeGraph_clear_removed_nodes(_self)

def NodeGraph_is_empty(_self):
    r"""NodeGraph_is_empty(NodeGraph_ptr const _self) -> boolean"""
    return _utils.NodeGraph_is_empty(_self)

def NodeGraph_get_leaves(_self):
    r"""NodeGraph_get_leaves(NodeGraph_ptr const _self) -> Set_t"""
    return _utils.NodeGraph_get_leaves(_self)

def NodeGraph_get_parents(_self, child):
    r"""NodeGraph_get_parents(NodeGraph_ptr const _self, node_ptr child) -> Set_t"""
    return _utils.NodeGraph_get_parents(_self, child)

def NodeGraph_print(_self, out):
    r"""NodeGraph_print(NodeGraph_ptr const _self, FILE * out)"""
    return _utils.NodeGraph_print(_self, out)

def NodeList_create():
    r"""NodeList_create() -> NodeList_ptr"""
    return _utils.NodeList_create()

def NodeList_create_from_list(list):
    r"""NodeList_create_from_list(node_ptr list) -> NodeList_ptr"""
    return _utils.NodeList_create_from_list(list)

def NodeList_destroy(_self):
    r"""NodeList_destroy(NodeList_ptr _self)"""
    return _utils.NodeList_destroy(_self)

def NodeList_copy(_self):
    r"""NodeList_copy(NodeList_ptr _self) -> NodeList_ptr"""
    return _utils.NodeList_copy(_self)

def NodeList_append(_self, elem):
    r"""NodeList_append(NodeList_ptr _self, node_ptr elem)"""
    return _utils.NodeList_append(_self, elem)

def NodeList_prepend(_self, elem):
    r"""NodeList_prepend(NodeList_ptr _self, node_ptr elem)"""
    return _utils.NodeList_prepend(_self, elem)

def NodeList_insert_before(_self, iter, elem):
    r"""NodeList_insert_before(NodeList_ptr _self, ListIter_ptr iter, node_ptr elem)"""
    return _utils.NodeList_insert_before(_self, iter, elem)

def NodeList_insert_after(_self, iter, elem):
    r"""NodeList_insert_after(NodeList_ptr _self, ListIter_ptr iter, node_ptr elem)"""
    return _utils.NodeList_insert_after(_self, iter, elem)

def NodeList_remove_elem_at(_self, iter):
    r"""NodeList_remove_elem_at(NodeList_ptr _self, ListIter_ptr iter) -> node_ptr"""
    return _utils.NodeList_remove_elem_at(_self, iter)

def NodeList_remove_elems(_self, other, disposer, disposer_arg):
    r"""NodeList_remove_elems(NodeList_ptr _self, NodeList_ptr const other, NodeListPred disposer, void * disposer_arg) -> int"""
    return _utils.NodeList_remove_elems(_self, other, disposer, disposer_arg)

def NodeList_get_length(_self):
    r"""NodeList_get_length(NodeList_ptr const _self) -> int"""
    return _utils.NodeList_get_length(_self)

def NodeList_reverse(_self):
    r"""NodeList_reverse(NodeList_ptr _self)"""
    return _utils.NodeList_reverse(_self)

def NodeList_concat(_self, src):
    r"""NodeList_concat(NodeList_ptr _self, NodeList_ptr const src)"""
    return _utils.NodeList_concat(_self, src)

def NodeList_concat_unique(_self, src):
    r"""NodeList_concat_unique(NodeList_ptr _self, NodeList_ptr const src)"""
    return _utils.NodeList_concat_unique(_self, src)

def NodeList_belongs_to(_self, elem):
    r"""NodeList_belongs_to(NodeList_ptr const _self, node_ptr elem) -> boolean"""
    return _utils.NodeList_belongs_to(_self, elem)

def NodeList_search(_self, pred, arg):
    r"""NodeList_search(NodeList_ptr const _self, NodeListPred pred, void * arg) -> ListIter_ptr"""
    return _utils.NodeList_search(_self, pred, arg)

def NodeList_count_elem(_self, elem):
    r"""NodeList_count_elem(NodeList_ptr const _self, node_ptr elem) -> int"""
    return _utils.NodeList_count_elem(_self, elem)

def NodeList_get_first_iter(_self):
    r"""NodeList_get_first_iter(NodeList_ptr const _self) -> ListIter_ptr"""
    return _utils.NodeList_get_first_iter(_self)

def NodeList_get_elem_at(_self, iter):
    r"""NodeList_get_elem_at(NodeList_ptr const _self, ListIter_ptr const iter) -> node_ptr"""
    return _utils.NodeList_get_elem_at(_self, iter)

def NodeList_foreach(_self, foo, user_data):
    r"""NodeList_foreach(NodeList_ptr _self, NODE_LIST_FOREACH_FUN_P foo, void * user_data) -> int"""
    return _utils.NodeList_foreach(_self, foo, user_data)

def NodeList_map(_self, foo):
    r"""NodeList_map(NodeList_ptr const _self, NPFN foo) -> NodeList_ptr"""
    return _utils.NodeList_map(_self, foo)

def NodeList_filter(_self, foo):
    r"""NodeList_filter(NodeList_ptr const _self, BPFN foo) -> NodeList_ptr"""
    return _utils.NodeList_filter(_self, foo)

def ListIter_get_next(_self):
    r"""ListIter_get_next(ListIter_ptr const _self) -> ListIter_ptr"""
    return _utils.ListIter_get_next(_self)

def ListIter_is_end(_self):
    r"""ListIter_is_end(ListIter_ptr const _self) -> boolean"""
    return _utils.ListIter_is_end(_self)

def ListIter_get_end():
    r"""ListIter_get_end() -> ListIter_ptr"""
    return _utils.ListIter_get_end()

def NodeList_print_nodes(_self, out):
    r"""NodeList_print_nodes(NodeList_ptr const _self, FILE * out)"""
    return _utils.NodeList_print_nodes(_self, out)

def Object_destroy(_self, arg):
    r"""Object_destroy(Object_ptr _self, void * arg)"""
    return _utils.Object_destroy(_self, arg)

def Object_copy(_self):
    r"""Object_copy(Object_ptr const _self) -> Object_ptr"""
    return _utils.Object_copy(_self)
class Oiter(object):
    r"""Proxy of C Oiter_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_utils.Oiter_node_get, _utils.Oiter_node_set, doc=r"""node : p.Onode_ptr""")

    def __init__(self):
        r"""__init__(Oiter self) -> Oiter"""
        _utils.Oiter_swiginit(self, _utils.new_Oiter())
    __swig_destroy__ = _utils.delete_Oiter

# Register Oiter in _utils:
_utils.Oiter_swigregister(Oiter)

def Olist_create():
    r"""Olist_create() -> Olist_ptr"""
    return _utils.Olist_create()

def Olist_destroy(_self):
    r"""Olist_destroy(Olist_ptr _self)"""
    return _utils.Olist_destroy(_self)

def Olist_copy(_self):
    r"""Olist_copy(Olist_ptr _self) -> Olist_ptr"""
    return _utils.Olist_copy(_self)

def Olist_copy_reversed(_self):
    r"""Olist_copy_reversed(Olist_ptr _self) -> Olist_ptr"""
    return _utils.Olist_copy_reversed(_self)

def Olist_copy_without_element(_self, element):
    r"""Olist_copy_without_element(Olist_ptr _self, void * element) -> Olist_ptr"""
    return _utils.Olist_copy_without_element(_self, element)

def Olist_reverse(_self):
    r"""Olist_reverse(Olist_ptr _self)"""
    return _utils.Olist_reverse(_self)

def Olist_move(_self, to_list, iter_to):
    r"""Olist_move(Olist_ptr _self, Olist_ptr to_list, Oiter iter_to)"""
    return _utils.Olist_move(_self, to_list, iter_to)

def Olist_move_all(_self, to_list):
    r"""Olist_move_all(Olist_ptr _self, Olist_ptr to_list)"""
    return _utils.Olist_move_all(_self, to_list)

def Olist_clean(_self):
    r"""Olist_clean(Olist_ptr _self)"""
    return _utils.Olist_clean(_self)

def Olist_prepend(_self, element):
    r"""Olist_prepend(Olist_ptr _self, void * element)"""
    return _utils.Olist_prepend(_self, element)

def Olist_append(_self, element):
    r"""Olist_append(Olist_ptr _self, void * element)"""
    return _utils.Olist_append(_self, element)

def Olist_delete_first(_self):
    r"""Olist_delete_first(Olist_ptr _self) -> void *"""
    return _utils.Olist_delete_first(_self)

def Olist_get_size(_self):
    r"""Olist_get_size(Olist_ptr const _self) -> int"""
    return _utils.Olist_get_size(_self)

def Olist_is_empty(_self):
    r"""Olist_is_empty(Olist_ptr _self) -> boolean"""
    return _utils.Olist_is_empty(_self)

def Olist_first(_self):
    r"""Olist_first(Olist_ptr _self) -> Oiter"""
    return _utils.Olist_first(_self)

def Olist_last(_self):
    r"""Olist_last(Olist_ptr _self) -> Oiter"""
    return _utils.Olist_last(_self)

def Oiter_make_end(iter):
    r"""Oiter_make_end(Oiter iter)"""
    return _utils.Oiter_make_end(iter)

def Oiter_is_end(iter):
    r"""Oiter_is_end(Oiter iter) -> boolean"""
    return _utils.Oiter_is_end(iter)

def Oiter_next(iter):
    r"""Oiter_next(Oiter iter) -> Oiter"""
    return _utils.Oiter_next(iter)

def Oiter_element(iter):
    r"""Oiter_element(Oiter iter) -> void *"""
    return _utils.Oiter_element(iter)

def Oiter_set_element(iter, element):
    r"""Oiter_set_element(Oiter iter, void * element)"""
    return _utils.Oiter_set_element(iter, element)

def Olist_insert_after(_self, iter, element):
    r"""Olist_insert_after(Olist_ptr _self, Oiter iter, void * element) -> Oiter"""
    return _utils.Olist_insert_after(_self, iter, element)

def Olist_insert_before(_self, iter, element):
    r"""Olist_insert_before(Olist_ptr _self, Oiter iter, void * element) -> Oiter"""
    return _utils.Olist_insert_before(_self, iter, element)

def Olist_delete(_self, iter, element):
    r"""Olist_delete(Olist_ptr _self, Oiter iter, void ** element) -> Oiter"""
    return _utils.Olist_delete(_self, iter, element)

def Olist_iter_is_first(_self, iter):
    r"""Olist_iter_is_first(Olist_ptr _self, Oiter iter) -> boolean"""
    return _utils.Olist_iter_is_first(_self, iter)

def Olist_iter_is_last(_self, iter):
    r"""Olist_iter_is_last(Olist_ptr _self, Oiter iter) -> boolean"""
    return _utils.Olist_iter_is_last(_self, iter)

def Olist_contains(_self, element):
    r"""Olist_contains(Olist_ptr const _self, void const * element) -> boolean"""
    return _utils.Olist_contains(_self, element)

def Olist_remove(_self, element):
    r"""Olist_remove(Olist_ptr _self, void const * element) -> boolean"""
    return _utils.Olist_remove(_self, element)

def Olist_sort(_self, cmp):
    r"""Olist_sort(Olist_ptr _self, int (*)(void *,void *) cmp)"""
    return _utils.Olist_sort(_self, cmp)

def Olist_print_node(_self, output):
    r"""Olist_print_node(Olist_ptr _self, FILE * output)"""
    return _utils.Olist_print_node(_self, output)
class Pair(object):
    r"""Proxy of C Pair_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    first = property(_utils.Pair_first_get, _utils.Pair_first_set, doc=r"""first : p.void""")
    second = property(_utils.Pair_second_get, _utils.Pair_second_set, doc=r"""second : p.void""")
    frozen = property(_utils.Pair_frozen_get, _utils.Pair_frozen_set, doc=r"""frozen : boolean""")

    def __init__(self):
        r"""__init__(Pair self) -> Pair"""
        _utils.Pair_swiginit(self, _utils.new_Pair())
    __swig_destroy__ = _utils.delete_Pair

# Register Pair in _utils:
_utils.Pair_swigregister(Pair)

def Pair_create(first, second):
    r"""Pair_create(void * first, void * second) -> Pair"""
    return _utils.Pair_create(first, second)

def Pair_freeze(_self):
    r"""Pair_freeze(Pair _self)"""
    return _utils.Pair_freeze(_self)

def Pair_is_freezed(_self):
    r"""Pair_is_freezed(Pair _self) -> boolean"""
    return _utils.Pair_is_freezed(_self)

def Pair_get_first(_self):
    r"""Pair_get_first(Pair _self) -> void *"""
    return _utils.Pair_get_first(_self)

def Pair_get_second(_self):
    r"""Pair_get_second(Pair _self) -> void *"""
    return _utils.Pair_get_second(_self)

def Pair_set_first(_self, first):
    r"""Pair_set_first(Pair _self, void * first)"""
    return _utils.Pair_set_first(_self, first)

def Pair_set_second(_self, second):
    r"""Pair_set_second(Pair _self, void * second)"""
    return _utils.Pair_set_second(_self, second)

def Pair_set_values(_self, first, second):
    r"""Pair_set_values(Pair _self, void * first, void * second)"""
    return _utils.Pair_set_values(_self, first, second)

def Pair_destroy(_self):
    r"""Pair_destroy(Pair _self)"""
    return _utils.Pair_destroy(_self)

def Pair_compare(a, b):
    r"""Pair_compare(Pair a, Pair b) -> int"""
    return _utils.Pair_compare(a, b)

def Pair_hash(_self, size):
    r"""Pair_hash(Pair _self, int size) -> int"""
    return _utils.Pair_hash(_self, size)

def malloc(arg1):
    r"""malloc(size_t arg1) -> void *"""
    return _utils.malloc(arg1)

def realloc(arg1, arg2):
    r"""realloc(void * arg1, size_t arg2) -> void *"""
    return _utils.realloc(arg1, arg2)
ERANGE = _utils.ERANGE

EINVAL = _utils.EINVAL


def Utils_set_data_for_range_check(var, range):
    r"""Utils_set_data_for_range_check(node_ptr var, node_ptr range)"""
    return _utils.Utils_set_data_for_range_check(var, range)

def Utils_set_mode_for_range_check(is_fatal):
    r"""Utils_set_mode_for_range_check(boolean is_fatal)"""
    return _utils.Utils_set_mode_for_range_check(is_fatal)

def Utils_range_check(n):
    r"""Utils_range_check(node_ptr n)"""
    return _utils.Utils_range_check(n)

def Utils_failure_node_check(n):
    r"""Utils_failure_node_check(node_ptr n)"""
    return _utils.Utils_failure_node_check(n)

def Utils_is_in_range(s, d):
    r"""Utils_is_in_range(node_ptr s, node_ptr d) -> boolean"""
    return _utils.Utils_is_in_range(s, d)

def Utils_check_subrange(subrange):
    r"""Utils_check_subrange(node_ptr subrange) -> boolean"""
    return _utils.Utils_check_subrange(subrange)

def Utils_check_subrange_not_negative(subrange):
    r"""Utils_check_subrange_not_negative(node_ptr subrange) -> boolean"""
    return _utils.Utils_check_subrange_not_negative(subrange)
class Siter(object):
    r"""Proxy of C Siter_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_utils.Siter_node_get, _utils.Siter_node_set, doc=r"""node : Snode_ptr""")

    def __init__(self):
        r"""__init__(Siter self) -> Siter"""
        _utils.Siter_swiginit(self, _utils.new_Siter())
    __swig_destroy__ = _utils.delete_Siter

# Register Siter in _utils:
_utils.Siter_swigregister(Siter)

def Slist_create():
    r"""Slist_create() -> Slist_ptr"""
    return _utils.Slist_create()

def Slist_destroy(_self):
    r"""Slist_destroy(Slist_ptr _self)"""
    return _utils.Slist_destroy(_self)

def Slist_destroy_and_free_elements(_self, f):
    r"""Slist_destroy_and_free_elements(Slist_ptr _self, Slist_free_function f)"""
    return _utils.Slist_destroy_and_free_elements(_self, f)

def Slist_copy(_self):
    r"""Slist_copy(Slist_ptr _self) -> Slist_ptr"""
    return _utils.Slist_copy(_self)

def Slist_copy_reversed(_self):
    r"""Slist_copy_reversed(Slist_ptr _self) -> Slist_ptr"""
    return _utils.Slist_copy_reversed(_self)

def Slist_reverse(_self):
    r"""Slist_reverse(Slist_ptr _self)"""
    return _utils.Slist_reverse(_self)

def Slist_push(_self, element):
    r"""Slist_push(Slist_ptr _self, void * element)"""
    return _utils.Slist_push(_self, element)

def Slist_pop(_self):
    r"""Slist_pop(Slist_ptr _self) -> void *"""
    return _utils.Slist_pop(_self)

def Slist_top(_self):
    r"""Slist_top(Slist_ptr _self) -> void *"""
    return _utils.Slist_top(_self)

def Slist_is_empty(_self):
    r"""Slist_is_empty(Slist_ptr _self) -> boolean"""
    return _utils.Slist_is_empty(_self)

def Slist_first(_self):
    r"""Slist_first(Slist_ptr _self) -> Siter"""
    return _utils.Slist_first(_self)

def Siter_make_end(iter):
    r"""Siter_make_end(Siter iter)"""
    return _utils.Siter_make_end(iter)

def Siter_is_end(iter):
    r"""Siter_is_end(Siter iter) -> boolean"""
    return _utils.Siter_is_end(iter)

def Siter_next(iter):
    r"""Siter_next(Siter iter) -> Siter"""
    return _utils.Siter_next(iter)

def Siter_element(iter):
    r"""Siter_element(Siter iter) -> void *"""
    return _utils.Siter_element(iter)

def Slist_find(_self, element):
    r"""Slist_find(Slist_ptr _self, void const * element) -> Siter"""
    return _utils.Slist_find(_self, element)

def Slist_contains(_self, element):
    r"""Slist_contains(Slist_ptr _self, void const * element) -> boolean"""
    return _utils.Slist_contains(_self, element)

def Slist_remove(_self, element):
    r"""Slist_remove(Slist_ptr _self, void const * element) -> boolean"""
    return _utils.Slist_remove(_self, element)

def Slist_append(_self, other):
    r"""Slist_append(Slist_ptr _self, Slist_ptr const other)"""
    return _utils.Slist_append(_self, other)

def Slist_equals(_self, other):
    r"""Slist_equals(Slist_ptr const _self, Slist_ptr const other) -> boolean"""
    return _utils.Slist_equals(_self, other)

def Slist_get_size(_self):
    r"""Slist_get_size(Slist_ptr _self) -> unsigned int"""
    return _utils.Slist_get_size(_self)

def Slist_sort(_self, cmp):
    r"""Slist_sort(Slist_ptr _self, int (*)(void *,void *) cmp)"""
    return _utils.Slist_sort(_self, cmp)

def Slist_clear(_self):
    r"""Slist_clear(Slist_ptr _self)"""
    return _utils.Slist_clear(_self)
class Ssiter(object):
    r"""Proxy of C Ssiter_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_utils.Ssiter_node_get, _utils.Ssiter_node_set, doc=r"""node : Ssnode_ptr""")

    def __init__(self):
        r"""__init__(Ssiter self) -> Ssiter"""
        _utils.Ssiter_swiginit(self, _utils.new_Ssiter())
    __swig_destroy__ = _utils.delete_Ssiter

# Register Ssiter in _utils:
_utils.Ssiter_swigregister(Ssiter)

def Sset_create():
    r"""Sset_create() -> Sset_ptr"""
    return _utils.Sset_create()

def Sset_destroy(_self):
    r"""Sset_destroy(Sset_ptr _self)"""
    return _utils.Sset_destroy(_self)

def Sset_copy(_self):
    r"""Sset_copy(Sset_ptr const _self) -> Sset_ptr"""
    return _utils.Sset_copy(_self)

def Sset_copy_func(_self, func):
    r"""Sset_copy_func(Sset_ptr const _self, void *(*)(void *) func) -> Sset_ptr"""
    return _utils.Sset_copy_func(_self, func)

def Sset_insert(_self, key, element):
    r"""Sset_insert(Sset_ptr _self, long long key, void * element) -> boolean"""
    return _utils.Sset_insert(_self, key, element)

def Sset_find(_self, key):
    r"""Sset_find(Sset_ptr _self, long long key) -> Ssiter"""
    return _utils.Sset_find(_self, key)

def Sset_find_le(_self, key):
    r"""Sset_find_le(Sset_ptr _self, long long key) -> Ssiter"""
    return _utils.Sset_find_le(_self, key)

def Sset_find_ge(_self, key):
    r"""Sset_find_ge(Sset_ptr _self, long long key) -> Ssiter"""
    return _utils.Sset_find_ge(_self, key)

def Sset_find_insert(_self, key, is_found):
    r"""Sset_find_insert(Sset_ptr _self, long long key, boolean * is_found) -> Ssiter"""
    return _utils.Sset_find_insert(_self, key, is_found)

def Sset_delete(_self, key, is_found):
    r"""Sset_delete(Sset_ptr _self, long long key, boolean * is_found) -> void *"""
    return _utils.Sset_delete(_self, key, is_found)

def Sset_delete_iter(_self, iter):
    r"""Sset_delete_iter(Sset_ptr _self, Ssiter iter)"""
    return _utils.Sset_delete_iter(_self, iter)

def Sset_get_size(_self):
    r"""Sset_get_size(Sset_ptr _self) -> size_t"""
    return _utils.Sset_get_size(_self)

def Sset_is_empty(_self):
    r"""Sset_is_empty(Sset_ptr _self) -> boolean"""
    return _utils.Sset_is_empty(_self)

def Sset_first(_self):
    r"""Sset_first(Sset_ptr _self) -> Ssiter"""
    return _utils.Sset_first(_self)

def Sset_last(_self):
    r"""Sset_last(Sset_ptr _self) -> Ssiter"""
    return _utils.Sset_last(_self)

def Ssiter_next(iter):
    r"""Ssiter_next(Ssiter iter) -> Ssiter"""
    return _utils.Ssiter_next(iter)

def Ssiter_prev(iter):
    r"""Ssiter_prev(Ssiter iter) -> Ssiter"""
    return _utils.Ssiter_prev(iter)

def Ssiter_is_valid(iter):
    r"""Ssiter_is_valid(Ssiter iter) -> boolean"""
    return _utils.Ssiter_is_valid(iter)

def Ssiter_element(iter):
    r"""Ssiter_element(Ssiter iter) -> void *"""
    return _utils.Ssiter_element(iter)

def Ssiter_key(iter):
    r"""Ssiter_key(Ssiter iter) -> long long"""
    return _utils.Ssiter_key(iter)

def Ssiter_set_element(iter, element):
    r"""Ssiter_set_element(Ssiter iter, void * element)"""
    return _utils.Ssiter_set_element(iter, element)
class Stack_TAG(object):
    r"""Proxy of C Stack_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    allocated = property(_utils.Stack_TAG_allocated_get, _utils.Stack_TAG_allocated_set, doc=r"""allocated : size_t""")
    index = property(_utils.Stack_TAG_index_get, _utils.Stack_TAG_index_set, doc=r"""index : size_t""")
    array = property(_utils.Stack_TAG_array_get, _utils.Stack_TAG_array_set, doc=r"""array : p.p.void""")

    def __init__(self):
        r"""__init__(Stack_TAG self) -> Stack_TAG"""
        _utils.Stack_TAG_swiginit(self, _utils.new_Stack_TAG())
    __swig_destroy__ = _utils.delete_Stack_TAG

# Register Stack_TAG in _utils:
_utils.Stack_TAG_swigregister(Stack_TAG)

def Stack_create():
    r"""Stack_create() -> Stack_TAG"""
    return _utils.Stack_create()

def Stack_create_with_param(size):
    r"""Stack_create_with_param(int size) -> Stack_TAG"""
    return _utils.Stack_create_with_param(size)

def Stack_destroy(_self):
    r"""Stack_destroy(Stack_TAG _self)"""
    return _utils.Stack_destroy(_self)

def Stack_copy(_self):
    r"""Stack_copy(Stack_TAG _self) -> Stack_TAG"""
    return _utils.Stack_copy(_self)

def Stack_push(_self, element):
    r"""Stack_push(Stack_TAG _self, void * element)"""
    return _utils.Stack_push(_self, element)

def Stack_pop(_self):
    r"""Stack_pop(Stack_TAG _self) -> void *"""
    return _utils.Stack_pop(_self)

def Stack_top(_self):
    r"""Stack_top(Stack_TAG _self) -> void *"""
    return _utils.Stack_top(_self)

def Stack_is_empty(_self):
    r"""Stack_is_empty(Stack_TAG _self) -> boolean"""
    return _utils.Stack_is_empty(_self)

def Stack_get_size(_self):
    r"""Stack_get_size(Stack_TAG _self) -> size_t"""
    return _utils.Stack_get_size(_self)

def TimerBench_create(name):
    r"""TimerBench_create(char const * name) -> TimerBench_ptr"""
    return _utils.TimerBench_create(name)

def TimerBench_destroy(_self):
    r"""TimerBench_destroy(TimerBench_ptr _self)"""
    return _utils.TimerBench_destroy(_self)

def TimerBench_start(_self):
    r"""TimerBench_start(TimerBench_ptr _self)"""
    return _utils.TimerBench_start(_self)

def TimerBench_stop(_self):
    r"""TimerBench_stop(TimerBench_ptr _self)"""
    return _utils.TimerBench_stop(_self)

def TimerBench_reset(_self):
    r"""TimerBench_reset(TimerBench_ptr _self)"""
    return _utils.TimerBench_reset(_self)

def TimerBench_is_running(_self):
    r"""TimerBench_is_running(TimerBench_ptr const _self) -> boolean"""
    return _utils.TimerBench_is_running(_self)

def TimerBench_get_time(_self):
    r"""TimerBench_get_time(TimerBench_ptr const _self) -> long"""
    return _utils.TimerBench_get_time(_self)

def TimerBench_get_laps(_self):
    r"""TimerBench_get_laps(TimerBench_ptr const _self) -> long"""
    return _utils.TimerBench_get_laps(_self)

def TimerBench_print(_self, file, msg):
    r"""TimerBench_print(TimerBench_ptr const _self, FILE * file, char const * msg)"""
    return _utils.TimerBench_print(_self, file, msg)
class Triple(object):
    r"""Proxy of C Triple_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    first = property(_utils.Triple_first_get, _utils.Triple_first_set, doc=r"""first : p.void""")
    second = property(_utils.Triple_second_get, _utils.Triple_second_set, doc=r"""second : p.void""")
    third = property(_utils.Triple_third_get, _utils.Triple_third_set, doc=r"""third : p.void""")
    frozen = property(_utils.Triple_frozen_get, _utils.Triple_frozen_set, doc=r"""frozen : boolean""")

    def __init__(self):
        r"""__init__(Triple self) -> Triple"""
        _utils.Triple_swiginit(self, _utils.new_Triple())
    __swig_destroy__ = _utils.delete_Triple

# Register Triple in _utils:
_utils.Triple_swigregister(Triple)

def Triple_create(first, second, third):
    r"""Triple_create(void * first, void * second, void * third) -> Triple"""
    return _utils.Triple_create(first, second, third)

def Triple_freeze(_self):
    r"""Triple_freeze(Triple _self)"""
    return _utils.Triple_freeze(_self)

def Triple_is_freezed(_self):
    r"""Triple_is_freezed(Triple _self) -> boolean"""
    return _utils.Triple_is_freezed(_self)

def Triple_get_first(_self):
    r"""Triple_get_first(Triple _self) -> void *"""
    return _utils.Triple_get_first(_self)

def Triple_get_second(_self):
    r"""Triple_get_second(Triple _self) -> void *"""
    return _utils.Triple_get_second(_self)

def Triple_get_third(_self):
    r"""Triple_get_third(Triple _self) -> void *"""
    return _utils.Triple_get_third(_self)

def Triple_set_first(_self, first):
    r"""Triple_set_first(Triple _self, void * first)"""
    return _utils.Triple_set_first(_self, first)

def Triple_set_second(_self, second):
    r"""Triple_set_second(Triple _self, void * second)"""
    return _utils.Triple_set_second(_self, second)

def Triple_set_third(_self, third):
    r"""Triple_set_third(Triple _self, void * third)"""
    return _utils.Triple_set_third(_self, third)

def Triple_set_values(_self, first, second, third):
    r"""Triple_set_values(Triple _self, void * first, void * second, void * third)"""
    return _utils.Triple_set_values(_self, first, second, third)

def Triple_destroy(_self):
    r"""Triple_destroy(Triple _self)"""
    return _utils.Triple_destroy(_self)

def Triple_compare(a, b):
    r"""Triple_compare(Triple a, Triple b) -> int"""
    return _utils.Triple_compare(a, b)

def Triple_hash(_self, size):
    r"""Triple_hash(Triple _self, int size) -> int"""
    return _utils.Triple_hash(_self, size)
class SubstValue(object):
    r"""Proxy of C SubstValue_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_utils.SubstValue_type_get, _utils.SubstValue_type_set, doc=r"""type : enum $unnamed2$""")
    assign = property(_utils.SubstValue_assign_get, doc=r"""assign : SubstValue_TAG_assign""")

    def __init__(self):
        r"""__init__(SubstValue self) -> SubstValue"""
        _utils.SubstValue_swiginit(self, _utils.new_SubstValue())
    __swig_destroy__ = _utils.delete_SubstValue

# Register SubstValue in _utils:
_utils.SubstValue_swigregister(SubstValue)
sv_string = _utils.sv_string

sv_integer = _utils.sv_integer

sv_floating = _utils.sv_floating

sv_pointer = _utils.sv_pointer

sv_undef = _utils.sv_undef


class SubstValue_TAG_assign(object):
    r"""Proxy of C SubstValue_TAG_assign struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    string = property(_utils.SubstValue_TAG_assign_string_get, _utils.SubstValue_TAG_assign_string_set, doc=r"""string : p.char""")
    integer = property(_utils.SubstValue_TAG_assign_integer_get, _utils.SubstValue_TAG_assign_integer_set, doc=r"""integer : int""")
    floating = property(_utils.SubstValue_TAG_assign_floating_get, _utils.SubstValue_TAG_assign_floating_set, doc=r"""floating : double""")
    pointer = property(_utils.SubstValue_TAG_assign_pointer_get, _utils.SubstValue_TAG_assign_pointer_set, doc=r"""pointer : p.void""")

    def __init__(self):
        r"""__init__(SubstValue_TAG_assign self) -> SubstValue_TAG_assign"""
        _utils.SubstValue_TAG_assign_swiginit(self, _utils.new_SubstValue_TAG_assign())
    __swig_destroy__ = _utils.delete_SubstValue_TAG_assign

# Register SubstValue_TAG_assign in _utils:
_utils.SubstValue_TAG_assign_swigregister(SubstValue_TAG_assign)
class SubstString(object):
    r"""Proxy of C SubstString_TAG struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    symbol = property(_utils.SubstString_symbol_get, _utils.SubstString_symbol_set, doc=r"""symbol : p.char""")
    value = property(_utils.SubstString_value_get, _utils.SubstString_value_set, doc=r"""value : SubstValue""")
    format = property(_utils.SubstString_format_get, _utils.SubstString_format_set, doc=r"""format : p.char""")

    def __init__(self):
        r"""__init__(SubstString self) -> SubstString"""
        _utils.SubstString_swiginit(self, _utils.new_SubstString())
    __swig_destroy__ = _utils.delete_SubstString

# Register SubstString in _utils:
_utils.SubstString_swigregister(SubstString)

def apply_string_macro_expansion(subst, string, buf_len):
    r"""apply_string_macro_expansion(SubstString subst, char * string, size_t buf_len)"""
    return _utils.apply_string_macro_expansion(subst, string, buf_len)

def util_str2int(str, value):
    r"""util_str2int(char const * str, int * value) -> int"""
    return _utils.util_str2int(str, value)

def util_is_string_null(string):
    r"""util_is_string_null(char const * string) -> int"""
    return _utils.util_is_string_null(string)

def util_str2int_incr(str, endptr, out):
    r"""util_str2int_incr(char const * str, char ** endptr, int * out) -> int"""
    return _utils.util_str2int_incr(str, endptr, out)
class string_rec(object):
    r"""Proxy of C string_ struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    link = property(_utils.string_rec_link_get, _utils.string_rec_link_set, doc=r"""link : p.struct string_""")
    text = property(_utils.string_rec_text_get, _utils.string_rec_text_set, doc=r"""text : p.char""")

    def __init__(self):
        r"""__init__(string_rec self) -> string_rec"""
        _utils.string_rec_swiginit(self, _utils.new_string_rec())
    __swig_destroy__ = _utils.delete_string_rec

# Register string_rec in _utils:
_utils.string_rec_swigregister(string_rec)

def init_string():
    r"""init_string()"""
    return _utils.init_string()

def quit_string():
    r"""quit_string()"""
    return _utils.quit_string()

def find_string(arg1):
    r"""find_string(char * arg1) -> string_rec"""
    return _utils.find_string(arg1)

def get_text(str):
    r"""get_text(string_rec str) -> char *"""
    return _utils.get_text(str)

def inc_indent_size():
    r"""inc_indent_size()"""
    return _utils.inc_indent_size()

def dec_indent_size():
    r"""dec_indent_size()"""
    return _utils.dec_indent_size()

def get_indent_size():
    r"""get_indent_size() -> int"""
    return _utils.get_indent_size()

def reset_indent_size():
    r"""reset_indent_size()"""
    return _utils.reset_indent_size()

def set_indent_size(arg1):
    r"""set_indent_size(int arg1)"""
    return _utils.set_indent_size(arg1)

def indent(arg1):
    r"""indent(FILE * arg1)"""
    return _utils.indent(arg1)

def indent_print(*args):
    r"""indent_print(FILE * arg1, char const * arg2)"""
    return _utils.indent_print(*args)

def indent_node(arg1, arg2, arg3, arg4):
    r"""indent_node(FILE * arg1, char * arg2, node_ptr arg3, char * arg4)"""
    return _utils.indent_node(arg1, arg2, arg3, arg4)

def print_in_process(arg1, arg2):
    r"""print_in_process(char * arg1, node_ptr arg2)"""
    return _utils.print_in_process(arg1, arg2)

def print_invar(arg1, arg2):
    r"""print_invar(FILE * arg1, Prop_ptr arg2)"""
    return _utils.print_invar(arg1, arg2)

def WordNumber_max_width():
    r"""WordNumber_max_width() -> int"""
    return _utils.WordNumber_max_width()

def WordNumber_from_string(str, base):
    r"""WordNumber_from_string(char * str, int base) -> WordNumber_ptr"""
    return _utils.WordNumber_from_string(str, base)

def WordNumber_from_sized_string(str, base, width):
    r"""WordNumber_from_sized_string(char * str, int base, int width) -> WordNumber_ptr"""
    return _utils.WordNumber_from_sized_string(str, base, width)

def WordNumber_from_parsed_string(str, errorString):
    r"""WordNumber_from_parsed_string(char * str, char ** errorString) -> WordNumber_ptr"""
    return _utils.WordNumber_from_parsed_string(str, errorString)

def WordNumber_from_integer(value, width):
    r"""WordNumber_from_integer(WordNumberValue value, int width) -> WordNumber_ptr"""
    return _utils.WordNumber_from_integer(value, width)

def WordNumber_from_signed_integer(val, width):
    r"""WordNumber_from_signed_integer(WordNumberValue val, int width) -> WordNumber_ptr"""
    return _utils.WordNumber_from_signed_integer(val, width)

def WordNumber_normalize(number):
    r"""WordNumber_normalize(WordNumber_ptr const number) -> WordNumber_ptr"""
    return _utils.WordNumber_normalize(number)

def WordNumber_get_unsigned_value(_self):
    r"""WordNumber_get_unsigned_value(WordNumber_ptr _self) -> WordNumberValue"""
    return _utils.WordNumber_get_unsigned_value(_self)

def WordNumber_get_signed_value(_self):
    r"""WordNumber_get_signed_value(WordNumber_ptr _self) -> WordNumberValue"""
    return _utils.WordNumber_get_signed_value(_self)

def WordNumber_get_width(_self):
    r"""WordNumber_get_width(WordNumber_ptr _self) -> int"""
    return _utils.WordNumber_get_width(_self)

def WordNumber_get_bit(_self, n):
    r"""WordNumber_get_bit(WordNumber_ptr _self, int n) -> boolean"""
    return _utils.WordNumber_get_bit(_self, n)

def WordNumber_get_sign(_self):
    r"""WordNumber_get_sign(WordNumber_ptr _self) -> boolean"""
    return _utils.WordNumber_get_sign(_self)

def WordNumber_get_parsed_string(_self):
    r"""WordNumber_get_parsed_string(WordNumber_ptr _self) -> char *"""
    return _utils.WordNumber_get_parsed_string(_self)

def WordNumber_max_unsigned_value(width):
    r"""WordNumber_max_unsigned_value(int width) -> WordNumberValue"""
    return _utils.WordNumber_max_unsigned_value(width)

def WordNumber_max_signed_value(width):
    r"""WordNumber_max_signed_value(int width) -> WordNumberValue"""
    return _utils.WordNumber_max_signed_value(width)

def WordNumber_min_signed_value(width):
    r"""WordNumber_min_signed_value(int width) -> WordNumberValue"""
    return _utils.WordNumber_min_signed_value(width)

def WordNumber_print(output_stream, _self, isSigned):
    r"""WordNumber_print(FILE * output_stream, WordNumber_ptr _self, boolean isSigned) -> int"""
    return _utils.WordNumber_print(output_stream, _self, isSigned)

def WordNumber_based_print(output_stream, _self, base, isSigned):
    r"""WordNumber_based_print(FILE * output_stream, WordNumber_ptr _self, int base, boolean isSigned) -> int"""
    return _utils.WordNumber_based_print(output_stream, _self, base, isSigned)

def WordNumber_to_string(_self, isSigned):
    r"""WordNumber_to_string(WordNumber_ptr _self, boolean isSigned) -> char *"""
    return _utils.WordNumber_to_string(_self, isSigned)

def WordNumber_to_based_string(_self, base, isSigned):
    r"""WordNumber_to_based_string(WordNumber_ptr _self, int base, boolean isSigned) -> char *"""
    return _utils.WordNumber_to_based_string(_self, base, isSigned)

def WordNumber_unary_minus(v1):
    r"""WordNumber_unary_minus(WordNumber_ptr v1) -> WordNumber_ptr"""
    return _utils.WordNumber_unary_minus(v1)

def WordNumber_plus(v1, v2):
    r"""WordNumber_plus(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_plus(v1, v2)

def WordNumber_minus(v1, v2):
    r"""WordNumber_minus(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_minus(v1, v2)

def WordNumber_times(v1, v2):
    r"""WordNumber_times(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_times(v1, v2)

def WordNumber_unsigned_divide(v1, v2):
    r"""WordNumber_unsigned_divide(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_unsigned_divide(v1, v2)

def WordNumber_signed_divide(v1, v2):
    r"""WordNumber_signed_divide(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_signed_divide(v1, v2)

def WordNumber_unsigned_mod(v1, v2):
    r"""WordNumber_unsigned_mod(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_unsigned_mod(v1, v2)

def WordNumber_signed_mod(v1, v2):
    r"""WordNumber_signed_mod(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_signed_mod(v1, v2)

def WordNumber_is_zero(v):
    r"""WordNumber_is_zero(WordNumber_ptr v) -> boolean"""
    return _utils.WordNumber_is_zero(v)

def WordNumber_equal(v1, v2):
    r"""WordNumber_equal(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_equal(v1, v2)

def WordNumber_not_equal(v1, v2):
    r"""WordNumber_not_equal(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_not_equal(v1, v2)

def WordNumber_unsigned_less(v1, v2):
    r"""WordNumber_unsigned_less(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_unsigned_less(v1, v2)

def WordNumber_unsigned_less_or_equal(v1, v2):
    r"""WordNumber_unsigned_less_or_equal(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_unsigned_less_or_equal(v1, v2)

def WordNumber_unsigned_greater(v1, v2):
    r"""WordNumber_unsigned_greater(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_unsigned_greater(v1, v2)

def WordNumber_unsigned_greater_or_equal(v1, v2):
    r"""WordNumber_unsigned_greater_or_equal(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_unsigned_greater_or_equal(v1, v2)

def WordNumber_signed_less(v1, v2):
    r"""WordNumber_signed_less(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_signed_less(v1, v2)

def WordNumber_signed_less_or_equal(v1, v2):
    r"""WordNumber_signed_less_or_equal(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_signed_less_or_equal(v1, v2)

def WordNumber_signed_greater(v1, v2):
    r"""WordNumber_signed_greater(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_signed_greater(v1, v2)

def WordNumber_signed_greater_or_equal(v1, v2):
    r"""WordNumber_signed_greater_or_equal(WordNumber_ptr v1, WordNumber_ptr v2) -> boolean"""
    return _utils.WordNumber_signed_greater_or_equal(v1, v2)

def WordNumber_not(v):
    r"""WordNumber_not(WordNumber_ptr v) -> WordNumber_ptr"""
    return _utils.WordNumber_not(v)

def WordNumber_and(v1, v2):
    r"""WordNumber_and(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_and(v1, v2)

def WordNumber_or(v1, v2):
    r"""WordNumber_or(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_or(v1, v2)

def WordNumber_xor(v1, v2):
    r"""WordNumber_xor(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_xor(v1, v2)

def WordNumber_xnor(v1, v2):
    r"""WordNumber_xnor(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_xnor(v1, v2)

def WordNumber_implies(v1, v2):
    r"""WordNumber_implies(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_implies(v1, v2)

def WordNumber_iff(v1, v2):
    r"""WordNumber_iff(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_iff(v1, v2)

def WordNumber_concatenate(v1, v2):
    r"""WordNumber_concatenate(WordNumber_ptr v1, WordNumber_ptr v2) -> WordNumber_ptr"""
    return _utils.WordNumber_concatenate(v1, v2)

def WordNumber_bit_select(v, highBit, lowBit):
    r"""WordNumber_bit_select(WordNumber_ptr v, int highBit, int lowBit) -> WordNumber_ptr"""
    return _utils.WordNumber_bit_select(v, highBit, lowBit)

def WordNumber_unsigned_right_shift(v, numberOfBits):
    r"""WordNumber_unsigned_right_shift(WordNumber_ptr v, int numberOfBits) -> WordNumber_ptr"""
    return _utils.WordNumber_unsigned_right_shift(v, numberOfBits)

def WordNumber_signed_right_shift(v, numberOfBits):
    r"""WordNumber_signed_right_shift(WordNumber_ptr v, int numberOfBits) -> WordNumber_ptr"""
    return _utils.WordNumber_signed_right_shift(v, numberOfBits)

def WordNumber_left_shift(v, numberOfBits):
    r"""WordNumber_left_shift(WordNumber_ptr v, int numberOfBits) -> WordNumber_ptr"""
    return _utils.WordNumber_left_shift(v, numberOfBits)

def WordNumber_right_rotate(v, numberOfBits):
    r"""WordNumber_right_rotate(WordNumber_ptr v, int numberOfBits) -> WordNumber_ptr"""
    return _utils.WordNumber_right_rotate(v, numberOfBits)

def WordNumber_left_rotate(v, numberOfBits):
    r"""WordNumber_left_rotate(WordNumber_ptr v, int numberOfBits) -> WordNumber_ptr"""
    return _utils.WordNumber_left_rotate(v, numberOfBits)

def WordNumber_unsigned_extend(v, numberOfTimes):
    r"""WordNumber_unsigned_extend(WordNumber_ptr v, int numberOfTimes) -> WordNumber_ptr"""
    return _utils.WordNumber_unsigned_extend(v, numberOfTimes)

def WordNumber_signed_extend(v, numberOfTimes):
    r"""WordNumber_signed_extend(WordNumber_ptr v, int numberOfTimes) -> WordNumber_ptr"""
    return _utils.WordNumber_signed_extend(v, numberOfTimes)

def array_alloc_strings(number):
    r"""array_alloc_strings(int number) -> array_t"""
    return _utils.array_alloc_strings(number)

def array_insert_strings(array, i, datum):
    r"""array_insert_strings(array_t array, int i, char const * datum)"""
    return _utils.array_insert_strings(array, i, datum)

def array_fetch_strings(array, i):
    r"""array_fetch_strings(array_t array, int i) -> char const *"""
    return _utils.array_fetch_strings(array, i)

def stdio_fopen(fname, mode):
    r"""stdio_fopen(char const * fname, char const * mode) -> FILE *"""
    return _utils.stdio_fopen(fname, mode)

def stdio_stdin():
    r"""stdio_stdin() -> FILE *"""
    return _utils.stdio_stdin()

def stdio_stdout():
    r"""stdio_stdout() -> FILE *"""
    return _utils.stdio_stdout()

def stdio_stderr():
    r"""stdio_stderr() -> FILE *"""
    return _utils.stdio_stderr()

def stdio_fclose(f):
    r"""stdio_fclose(FILE * f) -> int"""
    return _utils.stdio_fclose(f)

def void_star_to_int(p):
    r"""void_star_to_int(void * p) -> int"""
    return _utils.void_star_to_int(p)

def int_to_void_star(i):
    r"""int_to_void_star(int i) -> void *"""
    return _utils.int_to_void_star(i)

def void_star_to_int_star(p):
    r"""void_star_to_int_star(void * p) -> int *"""
    return _utils.void_star_to_int_star(p)

def slist_to_void_star(l):
    r"""slist_to_void_star(Slist_ptr l) -> void *"""
    return _utils.slist_to_void_star(l)

def void_star_to_slist(p):
    r"""void_star_to_slist(void * p) -> Slist_ptr"""
    return _utils.void_star_to_slist(p)

def str_to_void_star(text):
    r"""str_to_void_star(char * text) -> void *"""
    return _utils.str_to_void_star(text)

def void_star_to_str(ptr):
    r"""void_star_to_str(void * ptr) -> char *"""
    return _utils.void_star_to_str(ptr)

